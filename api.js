"use strict";
/**
 * SendinBlue API
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetChildDomain = exports.GetChildAccountCreationStatus = exports.GetCampaignStats = exports.GetCampaignRecipients = exports.GetCampaignOverview = exports.GetBlockedDomains = exports.GetAttributesEnumeration = exports.GetAttributesAttributes = exports.GetAttributes = exports.GetAggregatedReport = exports.GetAccountRelayData = exports.GetAccountRelay = exports.GetAccountPlan = exports.GetAccountMarketingAutomation = exports.ErrorModel = exports.EmailExportRecipients = exports.DeleteHardbounces = exports.CreatedProcessId = exports.CreateWebhook = exports.CreateUpdateFolder = exports.CreateUpdateContactModel = exports.CreateSmtpTemplateSender = exports.CreateSmtpTemplate = exports.CreateSmtpEmail = exports.CreateSmsCampaignRecipients = exports.CreateSmsCampaign = exports.CreateSenderModel = exports.CreateSenderIps = exports.CreateSender = exports.CreateReseller = exports.CreateModel = exports.CreateList = exports.CreateEmailCampaignSender = exports.CreateEmailCampaignRecipients = exports.CreateEmailCampaign = exports.CreateDoiContact = exports.CreateContact = exports.CreateChild = exports.CreateAttributeEnumeration = exports.CreateAttribute = exports.BlockDomain = exports.AddCredits = exports.AddContactToList = exports.AddChildDomain = exports.AbTestVersionStats = exports.AbTestVersionClicksInner = exports.AbTestVersionClicks = exports.AbTestCampaignResultStatistics = exports.AbTestCampaignResultClickedLinks = exports.AbTestCampaignResult = void 0;
exports.GetProcesses = exports.GetProcess = exports.GetExtendedList = exports.GetLists = exports.GetList = exports.GetIpsFromSender = exports.GetIps = exports.GetIpFromSender = exports.GetIp = exports.GetFolders = exports.GetFolderLists = exports.GetFolder = exports.GetExtendedListCampaignStats = exports.GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription = exports.GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription = exports.GetExtendedContactDetailsStatisticsUnsubscriptions = exports.GetExtendedContactDetailsStatisticsOpened = exports.GetExtendedContactDetailsStatisticsMessagesSent = exports.GetExtendedContactDetailsStatisticsLinks = exports.GetAccount = exports.GetExtendedContactDetailsStatisticsClicked = exports.GetExtendedContactDetailsStatistics = exports.GetExtendedContactDetails = exports.GetExtendedClientAddress = exports.GetExtendedClient = exports.GetExtendedCampaignStatsGlobalStats = exports.GetExtendedCampaignStats = exports.GetExtendedCampaignOverviewSender = exports.GetEmailCampaign = exports.GetExtendedCampaignOverview = exports.GetEmailEventReportEvents = exports.GetEmailEventReport = exports.GetEmailCampaigns = exports.GetDeviceBrowserStats = exports.GetContacts = exports.GetContactDetails = exports.GetContactCampaignStatsUnsubscriptions = exports.GetContactCampaignStatsTransacAttributes = exports.GetContactCampaignStatsOpened = exports.GetContactCampaignStatsClicked = exports.GetContactCampaignStats = exports.GetChildInfo = exports.GetClient = exports.GetChildrenList = exports.GetChildInfoStatistics = exports.GetChildInfoCredits = exports.GetChildInfoApiKeysV3 = exports.GetChildInfoApiKeysV2 = exports.GetChildInfoApiKeys = exports.GetChildDomains = void 0;
exports.SendReport = exports.SendEmailAttachment = exports.SendEmail = exports.RequestSmsRecipientExport = exports.RequestContactImportNewList = exports.RequestContactImport = exports.RequestContactExportCustomContactFilter = exports.RequestContactExport = exports.RemoveCredits = exports.RemoveContactFromList = exports.RemainingCreditModelReseller = exports.RemainingCreditModelChild = exports.RemainingCreditModel = exports.PostSendSmsTestFailed = exports.PostSendFailed = exports.PostContactInfoContacts = exports.PostContactInfo = exports.ManageIp = exports.GetWebhooks = exports.GetWebhook = exports.GetTransacSmsReportReports = exports.GetTransacSmsReport = exports.GetTransacEmailsListTransactionalEmails = exports.GetTransacEmailsList = exports.GetTransacEmailContentEvents = exports.GetTransacEmailContent = exports.GetTransacBlockedContactsReason = exports.GetTransacBlockedContactsContacts = exports.GetTransacBlockedContacts = exports.GetTransacAggregatedSmsReport = exports.GetStatsByDomain = exports.GetStatsByDevice = exports.GetStatsByBrowser = exports.GetSsoToken = exports.GetSmtpTemplates = exports.GetSmtpTemplateOverviewSender = exports.GetSmtpTemplateOverview = exports.GetSmsEventReportEvents = exports.GetSmsEventReport = exports.GetSmsCampaigns = exports.GetSmsCampaignStats = exports.GetSmsCampaignRecipients = exports.GetSmsCampaign = exports.GetSmsCampaignOverview = exports.GetSharedTemplateUrl = exports.GetSendersListSenders = exports.GetSendersListIps = exports.GetSendersList = exports.GetReportsReports = exports.GetReports = void 0;
exports.ProcessApiApiKeys = exports.ListsApi = exports.ListsApiApiKeys = exports.FoldersApi = exports.FoldersApiApiKeys = exports.EmailCampaignsApi = exports.EmailCampaignsApiApiKeys = exports.ContactsApi = exports.ContactsApiApiKeys = exports.AttributesApi = exports.AttributesApiApiKeys = exports.AccountApi = exports.AccountApiApiKeys = exports.VoidAuth = exports.OAuth = exports.ApiKeyAuth = exports.HttpBasicAuth = exports.UploadImageToGallery = exports.UpdateWebhook = exports.UpdateSmtpTemplateSender = exports.UpdateSmtpTemplate = exports.UpdateSmsCampaign = exports.UpdateSender = exports.UpdateList = exports.UpdateEmailCampaignSender = exports.UpdateEmailCampaignRecipients = exports.UpdateEmailCampaign = exports.UpdateContact = exports.UpdateChildDomain = exports.UpdateChildAccountStatus = exports.UpdateChild = exports.UpdateCampaignStatus = exports.UpdateAttributeEnumeration = exports.UpdateAttribute = exports.SendTransacSms = exports.SendTestSms = exports.SendTestEmail = exports.SendTemplateEmail = exports.SendSmtpEmailTo1 = exports.SendSmtpEmailTo = exports.SendSmtpEmailSender = exports.SendSmtpEmailReplyTo1 = exports.SendSmtpEmailReplyTo = exports.SendSmtpEmailMessageVersions = exports.SendSmtpEmailCc = exports.SendSmtpEmailBcc = exports.SendSmtpEmailAttachment = exports.SendSmtpEmail = exports.SendSms = exports.SendReportEmail = void 0;
exports.WebhooksApi = exports.WebhooksApiApiKeys = exports.TransactionalSMSApi = exports.TransactionalSMSApiApiKeys = exports.TransactionalEmailsApi = exports.TransactionalEmailsApiApiKeys = exports.SendersApi = exports.SendersApiApiKeys = exports.SMSCampaignsApi = exports.SMSCampaignsApiApiKeys = exports.ResellerApi = exports.ResellerApiApiKeys = exports.ProcessApi = void 0;
var localVarRequest = require("request");
var defaultBasePath = 'https://api.sendinblue.com/v3';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
/* tslint:disable:no-unused-variable */
var primitives = [
    "string",
    "boolean",
    "double",
    "integer",
    "long",
    "float",
    "number",
    "any"
];
var ObjectSerializer = /** @class */ (function () {
    function ObjectSerializer() {
    }
    ObjectSerializer.findCorrectType = function (data, expectedType) {
        if (data == undefined) {
            return expectedType;
        }
        else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }
        else if (expectedType === "Date") {
            return expectedType;
        }
        else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }
            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }
            // Check the discriminator
            var discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            }
            else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                }
                else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    };
    ObjectSerializer.serialize = function (data, type) {
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            var subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return data.toString();
        }
        else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }
            // get the map for the correct type.
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            var instance = {};
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    };
    ObjectSerializer.deserialize = function (data, type) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        }
        else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }
        else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            var subType = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            var transformedData = [];
            for (var index in data) {
                var date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }
        else if (type === "Date") {
            return new Date(data);
        }
        else {
            if (enumsMap[type]) { // is Enum
                return data;
            }
            if (!typeMap[type]) { // dont know the type
                return data;
            }
            var instance = new typeMap[type]();
            var attributeTypes = typeMap[type].getAttributeTypeMap();
            for (var index in attributeTypes) {
                var attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    };
    return ObjectSerializer;
}());
var AbTestCampaignResult = /** @class */ (function () {
    function AbTestCampaignResult() {
    }
    AbTestCampaignResult.getAttributeTypeMap = function () {
        return AbTestCampaignResult.attributeTypeMap;
    };
    AbTestCampaignResult.discriminator = undefined;
    AbTestCampaignResult.attributeTypeMap = [
        {
            "name": "winningVersion",
            "baseName": "winningVersion",
            "type": "AbTestCampaignResult.WinningVersionEnum"
        },
        {
            "name": "winningCriteria",
            "baseName": "winningCriteria",
            "type": "AbTestCampaignResult.WinningCriteriaEnum"
        },
        {
            "name": "winningSubjectLine",
            "baseName": "winningSubjectLine",
            "type": "string"
        },
        {
            "name": "openRate",
            "baseName": "openRate",
            "type": "string"
        },
        {
            "name": "clickRate",
            "baseName": "clickRate",
            "type": "string"
        },
        {
            "name": "winningVersionRate",
            "baseName": "winningVersionRate",
            "type": "string"
        },
        {
            "name": "statistics",
            "baseName": "statistics",
            "type": "AbTestCampaignResultStatistics"
        },
        {
            "name": "clickedLinks",
            "baseName": "clickedLinks",
            "type": "AbTestCampaignResultClickedLinks"
        }
    ];
    return AbTestCampaignResult;
}());
exports.AbTestCampaignResult = AbTestCampaignResult;
(function (AbTestCampaignResult) {
    var WinningVersionEnum;
    (function (WinningVersionEnum) {
        WinningVersionEnum[WinningVersionEnum["NotAvailable"] = 'notAvailable'] = "NotAvailable";
        WinningVersionEnum[WinningVersionEnum["Pending"] = 'pending'] = "Pending";
        WinningVersionEnum[WinningVersionEnum["Tie"] = 'tie'] = "Tie";
        WinningVersionEnum[WinningVersionEnum["A"] = 'A'] = "A";
        WinningVersionEnum[WinningVersionEnum["B"] = 'B'] = "B";
    })(WinningVersionEnum = AbTestCampaignResult.WinningVersionEnum || (AbTestCampaignResult.WinningVersionEnum = {}));
    var WinningCriteriaEnum;
    (function (WinningCriteriaEnum) {
        WinningCriteriaEnum[WinningCriteriaEnum["Open"] = 'Open'] = "Open";
        WinningCriteriaEnum[WinningCriteriaEnum["Click"] = 'Click'] = "Click";
    })(WinningCriteriaEnum = AbTestCampaignResult.WinningCriteriaEnum || (AbTestCampaignResult.WinningCriteriaEnum = {}));
})(AbTestCampaignResult = exports.AbTestCampaignResult || (exports.AbTestCampaignResult = {}));
exports.AbTestCampaignResult = AbTestCampaignResult;
var AbTestCampaignResultClickedLinks = /** @class */ (function () {
    function AbTestCampaignResultClickedLinks() {
    }
    AbTestCampaignResultClickedLinks.getAttributeTypeMap = function () {
        return AbTestCampaignResultClickedLinks.attributeTypeMap;
    };
    AbTestCampaignResultClickedLinks.discriminator = undefined;
    AbTestCampaignResultClickedLinks.attributeTypeMap = [
        {
            "name": "versionA",
            "baseName": "Version A",
            "type": "AbTestVersionClicks"
        },
        {
            "name": "versionB",
            "baseName": "Version B",
            "type": "AbTestVersionClicks"
        }
    ];
    return AbTestCampaignResultClickedLinks;
}());
exports.AbTestCampaignResultClickedLinks = AbTestCampaignResultClickedLinks;
var AbTestCampaignResultStatistics = /** @class */ (function () {
    function AbTestCampaignResultStatistics() {
    }
    AbTestCampaignResultStatistics.getAttributeTypeMap = function () {
        return AbTestCampaignResultStatistics.attributeTypeMap;
    };
    AbTestCampaignResultStatistics.discriminator = undefined;
    AbTestCampaignResultStatistics.attributeTypeMap = [
        {
            "name": "openers",
            "baseName": "openers",
            "type": "AbTestVersionStats"
        },
        {
            "name": "clicks",
            "baseName": "clicks",
            "type": "AbTestVersionStats"
        },
        {
            "name": "unsubscribed",
            "baseName": "unsubscribed",
            "type": "AbTestVersionStats"
        },
        {
            "name": "hardBounces",
            "baseName": "hardBounces",
            "type": "AbTestVersionStats"
        },
        {
            "name": "softBounces",
            "baseName": "softBounces",
            "type": "AbTestVersionStats"
        },
        {
            "name": "complaints",
            "baseName": "complaints",
            "type": "AbTestVersionStats"
        }
    ];
    return AbTestCampaignResultStatistics;
}());
exports.AbTestCampaignResultStatistics = AbTestCampaignResultStatistics;
/**
* Information on clicked links for a particular version
*/
var AbTestVersionClicks = /** @class */ (function (_super) {
    __extends(AbTestVersionClicks, _super);
    function AbTestVersionClicks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbTestVersionClicks.discriminator = undefined;
    return AbTestVersionClicks;
}(Array));
exports.AbTestVersionClicks = AbTestVersionClicks;
var AbTestVersionClicksInner = /** @class */ (function () {
    function AbTestVersionClicksInner() {
    }
    AbTestVersionClicksInner.getAttributeTypeMap = function () {
        return AbTestVersionClicksInner.attributeTypeMap;
    };
    AbTestVersionClicksInner.discriminator = undefined;
    AbTestVersionClicksInner.attributeTypeMap = [
        {
            "name": "link",
            "baseName": "link",
            "type": "string"
        },
        {
            "name": "clicksCount",
            "baseName": "clicksCount",
            "type": "number"
        },
        {
            "name": "clickRate",
            "baseName": "clickRate",
            "type": "string"
        }
    ];
    return AbTestVersionClicksInner;
}());
exports.AbTestVersionClicksInner = AbTestVersionClicksInner;
/**
* Percentage of a particular event for both versions
*/
var AbTestVersionStats = /** @class */ (function () {
    function AbTestVersionStats() {
    }
    AbTestVersionStats.getAttributeTypeMap = function () {
        return AbTestVersionStats.attributeTypeMap;
    };
    AbTestVersionStats.discriminator = undefined;
    AbTestVersionStats.attributeTypeMap = [
        {
            "name": "versionA",
            "baseName": "Version A",
            "type": "string"
        },
        {
            "name": "versionB",
            "baseName": "Version B",
            "type": "string"
        }
    ];
    return AbTestVersionStats;
}());
exports.AbTestVersionStats = AbTestVersionStats;
var AddChildDomain = /** @class */ (function () {
    function AddChildDomain() {
    }
    AddChildDomain.getAttributeTypeMap = function () {
        return AddChildDomain.attributeTypeMap;
    };
    AddChildDomain.discriminator = undefined;
    AddChildDomain.attributeTypeMap = [
        {
            "name": "domain",
            "baseName": "domain",
            "type": "string"
        }
    ];
    return AddChildDomain;
}());
exports.AddChildDomain = AddChildDomain;
var AddContactToList = /** @class */ (function () {
    function AddContactToList() {
    }
    AddContactToList.getAttributeTypeMap = function () {
        return AddContactToList.attributeTypeMap;
    };
    AddContactToList.discriminator = undefined;
    AddContactToList.attributeTypeMap = [
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<string>"
        },
        {
            "name": "ids",
            "baseName": "ids",
            "type": "Array<number>"
        }
    ];
    return AddContactToList;
}());
exports.AddContactToList = AddContactToList;
var AddCredits = /** @class */ (function () {
    function AddCredits() {
    }
    AddCredits.getAttributeTypeMap = function () {
        return AddCredits.attributeTypeMap;
    };
    AddCredits.discriminator = undefined;
    AddCredits.attributeTypeMap = [
        {
            "name": "sms",
            "baseName": "sms",
            "type": "number"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "number"
        }
    ];
    return AddCredits;
}());
exports.AddCredits = AddCredits;
var BlockDomain = /** @class */ (function () {
    function BlockDomain() {
    }
    BlockDomain.getAttributeTypeMap = function () {
        return BlockDomain.attributeTypeMap;
    };
    BlockDomain.discriminator = undefined;
    BlockDomain.attributeTypeMap = [
        {
            "name": "domain",
            "baseName": "domain",
            "type": "string"
        }
    ];
    return BlockDomain;
}());
exports.BlockDomain = BlockDomain;
var CreateAttribute = /** @class */ (function () {
    function CreateAttribute() {
    }
    CreateAttribute.getAttributeTypeMap = function () {
        return CreateAttribute.attributeTypeMap;
    };
    CreateAttribute.discriminator = undefined;
    CreateAttribute.attributeTypeMap = [
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "enumeration",
            "baseName": "enumeration",
            "type": "Array<CreateAttributeEnumeration>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "CreateAttribute.TypeEnum"
        }
    ];
    return CreateAttribute;
}());
exports.CreateAttribute = CreateAttribute;
(function (CreateAttribute) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Text"] = 'text'] = "Text";
        TypeEnum[TypeEnum["Date"] = 'date'] = "Date";
        TypeEnum[TypeEnum["Float"] = 'float'] = "Float";
        TypeEnum[TypeEnum["Boolean"] = 'boolean'] = "Boolean";
        TypeEnum[TypeEnum["Id"] = 'id'] = "Id";
        TypeEnum[TypeEnum["Category"] = 'category'] = "Category";
    })(TypeEnum = CreateAttribute.TypeEnum || (CreateAttribute.TypeEnum = {}));
})(CreateAttribute = exports.CreateAttribute || (exports.CreateAttribute = {}));
exports.CreateAttribute = CreateAttribute;
var CreateAttributeEnumeration = /** @class */ (function () {
    function CreateAttributeEnumeration() {
    }
    CreateAttributeEnumeration.getAttributeTypeMap = function () {
        return CreateAttributeEnumeration.attributeTypeMap;
    };
    CreateAttributeEnumeration.discriminator = undefined;
    CreateAttributeEnumeration.attributeTypeMap = [
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        }
    ];
    return CreateAttributeEnumeration;
}());
exports.CreateAttributeEnumeration = CreateAttributeEnumeration;
var CreateChild = /** @class */ (function () {
    function CreateChild() {
    }
    CreateChild.getAttributeTypeMap = function () {
        return CreateChild.attributeTypeMap;
    };
    CreateChild.discriminator = undefined;
    CreateChild.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "firstName",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "lastName",
            "type": "string"
        },
        {
            "name": "companyName",
            "baseName": "companyName",
            "type": "string"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "CreateChild.LanguageEnum"
        }
    ];
    return CreateChild;
}());
exports.CreateChild = CreateChild;
(function (CreateChild) {
    var LanguageEnum;
    (function (LanguageEnum) {
        LanguageEnum[LanguageEnum["Fr"] = 'fr'] = "Fr";
        LanguageEnum[LanguageEnum["Es"] = 'es'] = "Es";
        LanguageEnum[LanguageEnum["Pt"] = 'pt'] = "Pt";
        LanguageEnum[LanguageEnum["It"] = 'it'] = "It";
        LanguageEnum[LanguageEnum["De"] = 'de'] = "De";
        LanguageEnum[LanguageEnum["En"] = 'en'] = "En";
    })(LanguageEnum = CreateChild.LanguageEnum || (CreateChild.LanguageEnum = {}));
})(CreateChild = exports.CreateChild || (exports.CreateChild = {}));
exports.CreateChild = CreateChild;
var CreateContact = /** @class */ (function () {
    function CreateContact() {
    }
    CreateContact.getAttributeTypeMap = function () {
        return CreateContact.attributeTypeMap;
    };
    CreateContact.discriminator = undefined;
    CreateContact.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "any"
        },
        {
            "name": "emailBlacklisted",
            "baseName": "emailBlacklisted",
            "type": "boolean"
        },
        {
            "name": "smsBlacklisted",
            "baseName": "smsBlacklisted",
            "type": "boolean"
        },
        {
            "name": "listIds",
            "baseName": "listIds",
            "type": "Array<number>"
        },
        {
            "name": "updateEnabled",
            "baseName": "updateEnabled",
            "type": "boolean"
        },
        {
            "name": "smtpBlacklistSender",
            "baseName": "smtpBlacklistSender",
            "type": "Array<string>"
        }
    ];
    return CreateContact;
}());
exports.CreateContact = CreateContact;
var CreateDoiContact = /** @class */ (function () {
    function CreateDoiContact() {
    }
    CreateDoiContact.getAttributeTypeMap = function () {
        return CreateDoiContact.attributeTypeMap;
    };
    CreateDoiContact.discriminator = undefined;
    CreateDoiContact.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "any"
        },
        {
            "name": "includeListIds",
            "baseName": "includeListIds",
            "type": "Array<number>"
        },
        {
            "name": "excludeListIds",
            "baseName": "excludeListIds",
            "type": "Array<number>"
        },
        {
            "name": "templateId",
            "baseName": "templateId",
            "type": "number"
        },
        {
            "name": "redirectionUrl",
            "baseName": "redirectionUrl",
            "type": "string"
        }
    ];
    return CreateDoiContact;
}());
exports.CreateDoiContact = CreateDoiContact;
var CreateEmailCampaign = /** @class */ (function () {
    function CreateEmailCampaign() {
    }
    CreateEmailCampaign.getAttributeTypeMap = function () {
        return CreateEmailCampaign.attributeTypeMap;
    };
    CreateEmailCampaign.discriminator = undefined;
    CreateEmailCampaign.attributeTypeMap = [
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string"
        },
        {
            "name": "sender",
            "baseName": "sender",
            "type": "CreateEmailCampaignSender"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "htmlContent",
            "baseName": "htmlContent",
            "type": "string"
        },
        {
            "name": "htmlUrl",
            "baseName": "htmlUrl",
            "type": "string"
        },
        {
            "name": "templateId",
            "baseName": "templateId",
            "type": "number"
        },
        {
            "name": "scheduledAt",
            "baseName": "scheduledAt",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "replyTo",
            "baseName": "replyTo",
            "type": "string"
        },
        {
            "name": "toField",
            "baseName": "toField",
            "type": "string"
        },
        {
            "name": "recipients",
            "baseName": "recipients",
            "type": "CreateEmailCampaignRecipients"
        },
        {
            "name": "attachmentUrl",
            "baseName": "attachmentUrl",
            "type": "string"
        },
        {
            "name": "inlineImageActivation",
            "baseName": "inlineImageActivation",
            "type": "boolean"
        },
        {
            "name": "mirrorActive",
            "baseName": "mirrorActive",
            "type": "boolean"
        },
        {
            "name": "footer",
            "baseName": "footer",
            "type": "string"
        },
        {
            "name": "header",
            "baseName": "header",
            "type": "string"
        },
        {
            "name": "utmCampaign",
            "baseName": "utmCampaign",
            "type": "string"
        },
        {
            "name": "params",
            "baseName": "params",
            "type": "any"
        },
        {
            "name": "sendAtBestTime",
            "baseName": "sendAtBestTime",
            "type": "boolean"
        },
        {
            "name": "abTesting",
            "baseName": "abTesting",
            "type": "boolean"
        },
        {
            "name": "subjectA",
            "baseName": "subjectA",
            "type": "string"
        },
        {
            "name": "subjectB",
            "baseName": "subjectB",
            "type": "string"
        },
        {
            "name": "splitRule",
            "baseName": "splitRule",
            "type": "number"
        },
        {
            "name": "winnerCriteria",
            "baseName": "winnerCriteria",
            "type": "CreateEmailCampaign.WinnerCriteriaEnum"
        },
        {
            "name": "winnerDelay",
            "baseName": "winnerDelay",
            "type": "number"
        },
        {
            "name": "ipWarmupEnable",
            "baseName": "ipWarmupEnable",
            "type": "boolean"
        },
        {
            "name": "initialQuota",
            "baseName": "initialQuota",
            "type": "number"
        },
        {
            "name": "increaseRate",
            "baseName": "increaseRate",
            "type": "number"
        }
    ];
    return CreateEmailCampaign;
}());
exports.CreateEmailCampaign = CreateEmailCampaign;
(function (CreateEmailCampaign) {
    var WinnerCriteriaEnum;
    (function (WinnerCriteriaEnum) {
        WinnerCriteriaEnum[WinnerCriteriaEnum["Open"] = 'open'] = "Open";
        WinnerCriteriaEnum[WinnerCriteriaEnum["Click"] = 'click'] = "Click";
    })(WinnerCriteriaEnum = CreateEmailCampaign.WinnerCriteriaEnum || (CreateEmailCampaign.WinnerCriteriaEnum = {}));
})(CreateEmailCampaign = exports.CreateEmailCampaign || (exports.CreateEmailCampaign = {}));
exports.CreateEmailCampaign = CreateEmailCampaign;
/**
* List ids to include/exclude from campaign
*/
var CreateEmailCampaignRecipients = /** @class */ (function () {
    function CreateEmailCampaignRecipients() {
    }
    CreateEmailCampaignRecipients.getAttributeTypeMap = function () {
        return CreateEmailCampaignRecipients.attributeTypeMap;
    };
    CreateEmailCampaignRecipients.discriminator = undefined;
    CreateEmailCampaignRecipients.attributeTypeMap = [
        {
            "name": "exclusionListIds",
            "baseName": "exclusionListIds",
            "type": "Array<number>"
        },
        {
            "name": "listIds",
            "baseName": "listIds",
            "type": "Array<number>"
        }
    ];
    return CreateEmailCampaignRecipients;
}());
exports.CreateEmailCampaignRecipients = CreateEmailCampaignRecipients;
/**
* Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"}` , `{\"name\":\"xyz\", \"id\":123}`
*/
var CreateEmailCampaignSender = /** @class */ (function () {
    function CreateEmailCampaignSender() {
    }
    CreateEmailCampaignSender.getAttributeTypeMap = function () {
        return CreateEmailCampaignSender.attributeTypeMap;
    };
    CreateEmailCampaignSender.discriminator = undefined;
    CreateEmailCampaignSender.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        }
    ];
    return CreateEmailCampaignSender;
}());
exports.CreateEmailCampaignSender = CreateEmailCampaignSender;
var CreateList = /** @class */ (function () {
    function CreateList() {
    }
    CreateList.getAttributeTypeMap = function () {
        return CreateList.attributeTypeMap;
    };
    CreateList.discriminator = undefined;
    CreateList.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "folderId",
            "baseName": "folderId",
            "type": "number"
        }
    ];
    return CreateList;
}());
exports.CreateList = CreateList;
var CreateModel = /** @class */ (function () {
    function CreateModel() {
    }
    CreateModel.getAttributeTypeMap = function () {
        return CreateModel.attributeTypeMap;
    };
    CreateModel.discriminator = undefined;
    CreateModel.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        }
    ];
    return CreateModel;
}());
exports.CreateModel = CreateModel;
var CreateReseller = /** @class */ (function () {
    function CreateReseller() {
    }
    CreateReseller.getAttributeTypeMap = function () {
        return CreateReseller.attributeTypeMap;
    };
    CreateReseller.discriminator = undefined;
    CreateReseller.attributeTypeMap = [
        {
            "name": "authKey",
            "baseName": "authKey",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        }
    ];
    return CreateReseller;
}());
exports.CreateReseller = CreateReseller;
var CreateSender = /** @class */ (function () {
    function CreateSender() {
    }
    CreateSender.getAttributeTypeMap = function () {
        return CreateSender.attributeTypeMap;
    };
    CreateSender.discriminator = undefined;
    CreateSender.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "ips",
            "baseName": "ips",
            "type": "Array<CreateSenderIps>"
        }
    ];
    return CreateSender;
}());
exports.CreateSender = CreateSender;
var CreateSenderIps = /** @class */ (function () {
    function CreateSenderIps() {
    }
    CreateSenderIps.getAttributeTypeMap = function () {
        return CreateSenderIps.attributeTypeMap;
    };
    CreateSenderIps.discriminator = undefined;
    CreateSenderIps.attributeTypeMap = [
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        },
        {
            "name": "domain",
            "baseName": "domain",
            "type": "string"
        },
        {
            "name": "weight",
            "baseName": "weight",
            "type": "number"
        }
    ];
    return CreateSenderIps;
}());
exports.CreateSenderIps = CreateSenderIps;
var CreateSenderModel = /** @class */ (function () {
    function CreateSenderModel() {
    }
    CreateSenderModel.getAttributeTypeMap = function () {
        return CreateSenderModel.attributeTypeMap;
    };
    CreateSenderModel.discriminator = undefined;
    CreateSenderModel.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "spfError",
            "baseName": "spfError",
            "type": "boolean"
        },
        {
            "name": "dkimError",
            "baseName": "dkimError",
            "type": "boolean"
        }
    ];
    return CreateSenderModel;
}());
exports.CreateSenderModel = CreateSenderModel;
var CreateSmsCampaign = /** @class */ (function () {
    function CreateSmsCampaign() {
    }
    CreateSmsCampaign.getAttributeTypeMap = function () {
        return CreateSmsCampaign.attributeTypeMap;
    };
    CreateSmsCampaign.discriminator = undefined;
    CreateSmsCampaign.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "sender",
            "baseName": "sender",
            "type": "string"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "recipients",
            "baseName": "recipients",
            "type": "CreateSmsCampaignRecipients"
        },
        {
            "name": "scheduledAt",
            "baseName": "scheduledAt",
            "type": "string"
        }
    ];
    return CreateSmsCampaign;
}());
exports.CreateSmsCampaign = CreateSmsCampaign;
var CreateSmsCampaignRecipients = /** @class */ (function () {
    function CreateSmsCampaignRecipients() {
    }
    CreateSmsCampaignRecipients.getAttributeTypeMap = function () {
        return CreateSmsCampaignRecipients.attributeTypeMap;
    };
    CreateSmsCampaignRecipients.discriminator = undefined;
    CreateSmsCampaignRecipients.attributeTypeMap = [
        {
            "name": "listIds",
            "baseName": "listIds",
            "type": "Array<number>"
        },
        {
            "name": "exclusionListIds",
            "baseName": "exclusionListIds",
            "type": "Array<number>"
        }
    ];
    return CreateSmsCampaignRecipients;
}());
exports.CreateSmsCampaignRecipients = CreateSmsCampaignRecipients;
var CreateSmtpEmail = /** @class */ (function () {
    function CreateSmtpEmail() {
    }
    CreateSmtpEmail.getAttributeTypeMap = function () {
        return CreateSmtpEmail.attributeTypeMap;
    };
    CreateSmtpEmail.discriminator = undefined;
    CreateSmtpEmail.attributeTypeMap = [
        {
            "name": "messageId",
            "baseName": "messageId",
            "type": "string"
        },
        {
            "name": "messageIds",
            "baseName": "messageIds",
            "type": "Array<string>"
        }
    ];
    return CreateSmtpEmail;
}());
exports.CreateSmtpEmail = CreateSmtpEmail;
var CreateSmtpTemplate = /** @class */ (function () {
    function CreateSmtpTemplate() {
    }
    CreateSmtpTemplate.getAttributeTypeMap = function () {
        return CreateSmtpTemplate.attributeTypeMap;
    };
    CreateSmtpTemplate.discriminator = undefined;
    CreateSmtpTemplate.attributeTypeMap = [
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string"
        },
        {
            "name": "sender",
            "baseName": "sender",
            "type": "CreateSmtpTemplateSender"
        },
        {
            "name": "templateName",
            "baseName": "templateName",
            "type": "string"
        },
        {
            "name": "htmlContent",
            "baseName": "htmlContent",
            "type": "string"
        },
        {
            "name": "htmlUrl",
            "baseName": "htmlUrl",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "replyTo",
            "baseName": "replyTo",
            "type": "string"
        },
        {
            "name": "toField",
            "baseName": "toField",
            "type": "string"
        },
        {
            "name": "attachmentUrl",
            "baseName": "attachmentUrl",
            "type": "string"
        },
        {
            "name": "isActive",
            "baseName": "isActive",
            "type": "boolean"
        }
    ];
    return CreateSmtpTemplate;
}());
exports.CreateSmtpTemplate = CreateSmtpTemplate;
/**
* Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"}` , `{\"name\":\"xyz\", \"id\":123}`
*/
var CreateSmtpTemplateSender = /** @class */ (function () {
    function CreateSmtpTemplateSender() {
    }
    CreateSmtpTemplateSender.getAttributeTypeMap = function () {
        return CreateSmtpTemplateSender.attributeTypeMap;
    };
    CreateSmtpTemplateSender.discriminator = undefined;
    CreateSmtpTemplateSender.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        }
    ];
    return CreateSmtpTemplateSender;
}());
exports.CreateSmtpTemplateSender = CreateSmtpTemplateSender;
var CreateUpdateContactModel = /** @class */ (function () {
    function CreateUpdateContactModel() {
    }
    CreateUpdateContactModel.getAttributeTypeMap = function () {
        return CreateUpdateContactModel.attributeTypeMap;
    };
    CreateUpdateContactModel.discriminator = undefined;
    CreateUpdateContactModel.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        }
    ];
    return CreateUpdateContactModel;
}());
exports.CreateUpdateContactModel = CreateUpdateContactModel;
var CreateUpdateFolder = /** @class */ (function () {
    function CreateUpdateFolder() {
    }
    CreateUpdateFolder.getAttributeTypeMap = function () {
        return CreateUpdateFolder.attributeTypeMap;
    };
    CreateUpdateFolder.discriminator = undefined;
    CreateUpdateFolder.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return CreateUpdateFolder;
}());
exports.CreateUpdateFolder = CreateUpdateFolder;
var CreateWebhook = /** @class */ (function () {
    function CreateWebhook() {
    }
    CreateWebhook.getAttributeTypeMap = function () {
        return CreateWebhook.attributeTypeMap;
    };
    CreateWebhook.discriminator = undefined;
    CreateWebhook.attributeTypeMap = [
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "events",
            "baseName": "events",
            "type": "Array<CreateWebhook.EventsEnum>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "CreateWebhook.TypeEnum"
        }
    ];
    return CreateWebhook;
}());
exports.CreateWebhook = CreateWebhook;
(function (CreateWebhook) {
    var EventsEnum;
    (function (EventsEnum) {
        EventsEnum[EventsEnum["Sent"] = 'sent'] = "Sent";
        EventsEnum[EventsEnum["HardBounce"] = 'hardBounce'] = "HardBounce";
        EventsEnum[EventsEnum["SoftBounce"] = 'softBounce'] = "SoftBounce";
        EventsEnum[EventsEnum["Blocked"] = 'blocked'] = "Blocked";
        EventsEnum[EventsEnum["Spam"] = 'spam'] = "Spam";
        EventsEnum[EventsEnum["Delivered"] = 'delivered'] = "Delivered";
        EventsEnum[EventsEnum["Request"] = 'request'] = "Request";
        EventsEnum[EventsEnum["Click"] = 'click'] = "Click";
        EventsEnum[EventsEnum["Invalid"] = 'invalid'] = "Invalid";
        EventsEnum[EventsEnum["Deferred"] = 'deferred'] = "Deferred";
        EventsEnum[EventsEnum["Opened"] = 'opened'] = "Opened";
        EventsEnum[EventsEnum["UniqueOpened"] = 'uniqueOpened'] = "UniqueOpened";
        EventsEnum[EventsEnum["Unsubscribed"] = 'unsubscribed'] = "Unsubscribed";
        EventsEnum[EventsEnum["ListAddition"] = 'listAddition'] = "ListAddition";
        EventsEnum[EventsEnum["ContactUpdated"] = 'contactUpdated'] = "ContactUpdated";
        EventsEnum[EventsEnum["ContactDeleted"] = 'contactDeleted'] = "ContactDeleted";
    })(EventsEnum = CreateWebhook.EventsEnum || (CreateWebhook.EventsEnum = {}));
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Transactional"] = 'transactional'] = "Transactional";
        TypeEnum[TypeEnum["Marketing"] = 'marketing'] = "Marketing";
    })(TypeEnum = CreateWebhook.TypeEnum || (CreateWebhook.TypeEnum = {}));
})(CreateWebhook = exports.CreateWebhook || (exports.CreateWebhook = {}));
exports.CreateWebhook = CreateWebhook;
var CreatedProcessId = /** @class */ (function () {
    function CreatedProcessId() {
    }
    CreatedProcessId.getAttributeTypeMap = function () {
        return CreatedProcessId.attributeTypeMap;
    };
    CreatedProcessId.discriminator = undefined;
    CreatedProcessId.attributeTypeMap = [
        {
            "name": "processId",
            "baseName": "processId",
            "type": "number"
        }
    ];
    return CreatedProcessId;
}());
exports.CreatedProcessId = CreatedProcessId;
var DeleteHardbounces = /** @class */ (function () {
    function DeleteHardbounces() {
    }
    DeleteHardbounces.getAttributeTypeMap = function () {
        return DeleteHardbounces.attributeTypeMap;
    };
    DeleteHardbounces.discriminator = undefined;
    DeleteHardbounces.attributeTypeMap = [
        {
            "name": "startDate",
            "baseName": "startDate",
            "type": "string"
        },
        {
            "name": "endDate",
            "baseName": "endDate",
            "type": "string"
        },
        {
            "name": "contactEmail",
            "baseName": "contactEmail",
            "type": "string"
        }
    ];
    return DeleteHardbounces;
}());
exports.DeleteHardbounces = DeleteHardbounces;
var EmailExportRecipients = /** @class */ (function () {
    function EmailExportRecipients() {
    }
    EmailExportRecipients.getAttributeTypeMap = function () {
        return EmailExportRecipients.attributeTypeMap;
    };
    EmailExportRecipients.discriminator = undefined;
    EmailExportRecipients.attributeTypeMap = [
        {
            "name": "notifyURL",
            "baseName": "notifyURL",
            "type": "string"
        },
        {
            "name": "recipientsType",
            "baseName": "recipientsType",
            "type": "EmailExportRecipients.RecipientsTypeEnum"
        }
    ];
    return EmailExportRecipients;
}());
exports.EmailExportRecipients = EmailExportRecipients;
(function (EmailExportRecipients) {
    var RecipientsTypeEnum;
    (function (RecipientsTypeEnum) {
        RecipientsTypeEnum[RecipientsTypeEnum["All"] = 'all'] = "All";
        RecipientsTypeEnum[RecipientsTypeEnum["NonClickers"] = 'nonClickers'] = "NonClickers";
        RecipientsTypeEnum[RecipientsTypeEnum["NonOpeners"] = 'nonOpeners'] = "NonOpeners";
        RecipientsTypeEnum[RecipientsTypeEnum["Clickers"] = 'clickers'] = "Clickers";
        RecipientsTypeEnum[RecipientsTypeEnum["Openers"] = 'openers'] = "Openers";
        RecipientsTypeEnum[RecipientsTypeEnum["SoftBounces"] = 'softBounces'] = "SoftBounces";
        RecipientsTypeEnum[RecipientsTypeEnum["HardBounces"] = 'hardBounces'] = "HardBounces";
        RecipientsTypeEnum[RecipientsTypeEnum["Unsubscribed"] = 'unsubscribed'] = "Unsubscribed";
    })(RecipientsTypeEnum = EmailExportRecipients.RecipientsTypeEnum || (EmailExportRecipients.RecipientsTypeEnum = {}));
})(EmailExportRecipients = exports.EmailExportRecipients || (exports.EmailExportRecipients = {}));
exports.EmailExportRecipients = EmailExportRecipients;
var ErrorModel = /** @class */ (function () {
    function ErrorModel() {
    }
    ErrorModel.getAttributeTypeMap = function () {
        return ErrorModel.attributeTypeMap;
    };
    ErrorModel.discriminator = undefined;
    ErrorModel.attributeTypeMap = [
        {
            "name": "code",
            "baseName": "code",
            "type": "ErrorModel.CodeEnum"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        }
    ];
    return ErrorModel;
}());
exports.ErrorModel = ErrorModel;
(function (ErrorModel) {
    var CodeEnum;
    (function (CodeEnum) {
        CodeEnum[CodeEnum["InvalidParameter"] = 'invalid_parameter'] = "InvalidParameter";
        CodeEnum[CodeEnum["MissingParameter"] = 'missing_parameter'] = "MissingParameter";
        CodeEnum[CodeEnum["OutOfRange"] = 'out_of_range'] = "OutOfRange";
        CodeEnum[CodeEnum["CampaignProcessing"] = 'campaign_processing'] = "CampaignProcessing";
        CodeEnum[CodeEnum["CampaignSent"] = 'campaign_sent'] = "CampaignSent";
        CodeEnum[CodeEnum["DocumentNotFound"] = 'document_not_found'] = "DocumentNotFound";
        CodeEnum[CodeEnum["ResellerPermissionDenied"] = 'reseller_permission_denied'] = "ResellerPermissionDenied";
        CodeEnum[CodeEnum["NotEnoughCredits"] = 'not_enough_credits'] = "NotEnoughCredits";
        CodeEnum[CodeEnum["PermissionDenied"] = 'permission_denied'] = "PermissionDenied";
        CodeEnum[CodeEnum["DuplicateParameter"] = 'duplicate_parameter'] = "DuplicateParameter";
        CodeEnum[CodeEnum["DuplicateRequest"] = 'duplicate_request'] = "DuplicateRequest";
        CodeEnum[CodeEnum["MethodNotAllowed"] = 'method_not_allowed'] = "MethodNotAllowed";
        CodeEnum[CodeEnum["Unauthorized"] = 'unauthorized'] = "Unauthorized";
        CodeEnum[CodeEnum["AccountUnderValidation"] = 'account_under_validation'] = "AccountUnderValidation";
        CodeEnum[CodeEnum["NotAcceptable"] = 'not_acceptable'] = "NotAcceptable";
    })(CodeEnum = ErrorModel.CodeEnum || (ErrorModel.CodeEnum = {}));
})(ErrorModel = exports.ErrorModel || (exports.ErrorModel = {}));
exports.ErrorModel = ErrorModel;
var GetAccountMarketingAutomation = /** @class */ (function () {
    function GetAccountMarketingAutomation() {
    }
    GetAccountMarketingAutomation.getAttributeTypeMap = function () {
        return GetAccountMarketingAutomation.attributeTypeMap;
    };
    GetAccountMarketingAutomation.discriminator = undefined;
    GetAccountMarketingAutomation.attributeTypeMap = [
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean"
        }
    ];
    return GetAccountMarketingAutomation;
}());
exports.GetAccountMarketingAutomation = GetAccountMarketingAutomation;
var GetAccountPlan = /** @class */ (function () {
    function GetAccountPlan() {
    }
    GetAccountPlan.getAttributeTypeMap = function () {
        return GetAccountPlan.attributeTypeMap;
    };
    GetAccountPlan.discriminator = undefined;
    GetAccountPlan.attributeTypeMap = [
        {
            "name": "type",
            "baseName": "type",
            "type": "GetAccountPlan.TypeEnum"
        },
        {
            "name": "creditsType",
            "baseName": "creditsType",
            "type": "GetAccountPlan.CreditsTypeEnum"
        },
        {
            "name": "credits",
            "baseName": "credits",
            "type": "number"
        },
        {
            "name": "startDate",
            "baseName": "startDate",
            "type": "string"
        },
        {
            "name": "endDate",
            "baseName": "endDate",
            "type": "string"
        },
        {
            "name": "userLimit",
            "baseName": "userLimit",
            "type": "number"
        }
    ];
    return GetAccountPlan;
}());
exports.GetAccountPlan = GetAccountPlan;
(function (GetAccountPlan) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["PayAsYouGo"] = 'payAsYouGo'] = "PayAsYouGo";
        TypeEnum[TypeEnum["Free"] = 'free'] = "Free";
        TypeEnum[TypeEnum["Subscription"] = 'subscription'] = "Subscription";
        TypeEnum[TypeEnum["Sms"] = 'sms'] = "Sms";
        TypeEnum[TypeEnum["Reseller"] = 'reseller'] = "Reseller";
    })(TypeEnum = GetAccountPlan.TypeEnum || (GetAccountPlan.TypeEnum = {}));
    var CreditsTypeEnum;
    (function (CreditsTypeEnum) {
        CreditsTypeEnum[CreditsTypeEnum["SendLimit"] = 'sendLimit'] = "SendLimit";
    })(CreditsTypeEnum = GetAccountPlan.CreditsTypeEnum || (GetAccountPlan.CreditsTypeEnum = {}));
})(GetAccountPlan = exports.GetAccountPlan || (exports.GetAccountPlan = {}));
exports.GetAccountPlan = GetAccountPlan;
/**
* Information about your transactional email account
*/
var GetAccountRelay = /** @class */ (function () {
    function GetAccountRelay() {
    }
    GetAccountRelay.getAttributeTypeMap = function () {
        return GetAccountRelay.attributeTypeMap;
    };
    GetAccountRelay.discriminator = undefined;
    GetAccountRelay.attributeTypeMap = [
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "GetAccountRelayData"
        }
    ];
    return GetAccountRelay;
}());
exports.GetAccountRelay = GetAccountRelay;
/**
* Data regarding the transactional email account
*/
var GetAccountRelayData = /** @class */ (function () {
    function GetAccountRelayData() {
    }
    GetAccountRelayData.getAttributeTypeMap = function () {
        return GetAccountRelayData.attributeTypeMap;
    };
    GetAccountRelayData.discriminator = undefined;
    GetAccountRelayData.attributeTypeMap = [
        {
            "name": "userName",
            "baseName": "userName",
            "type": "string"
        },
        {
            "name": "relay",
            "baseName": "relay",
            "type": "string"
        },
        {
            "name": "port",
            "baseName": "port",
            "type": "number"
        }
    ];
    return GetAccountRelayData;
}());
exports.GetAccountRelayData = GetAccountRelayData;
var GetAggregatedReport = /** @class */ (function () {
    function GetAggregatedReport() {
    }
    GetAggregatedReport.getAttributeTypeMap = function () {
        return GetAggregatedReport.attributeTypeMap;
    };
    GetAggregatedReport.discriminator = undefined;
    GetAggregatedReport.attributeTypeMap = [
        {
            "name": "range",
            "baseName": "range",
            "type": "string"
        },
        {
            "name": "requests",
            "baseName": "requests",
            "type": "number"
        },
        {
            "name": "delivered",
            "baseName": "delivered",
            "type": "number"
        },
        {
            "name": "hardBounces",
            "baseName": "hardBounces",
            "type": "number"
        },
        {
            "name": "softBounces",
            "baseName": "softBounces",
            "type": "number"
        },
        {
            "name": "clicks",
            "baseName": "clicks",
            "type": "number"
        },
        {
            "name": "uniqueClicks",
            "baseName": "uniqueClicks",
            "type": "number"
        },
        {
            "name": "opens",
            "baseName": "opens",
            "type": "number"
        },
        {
            "name": "uniqueOpens",
            "baseName": "uniqueOpens",
            "type": "number"
        },
        {
            "name": "spamReports",
            "baseName": "spamReports",
            "type": "number"
        },
        {
            "name": "blocked",
            "baseName": "blocked",
            "type": "number"
        },
        {
            "name": "invalid",
            "baseName": "invalid",
            "type": "number"
        },
        {
            "name": "unsubscribed",
            "baseName": "unsubscribed",
            "type": "number"
        }
    ];
    return GetAggregatedReport;
}());
exports.GetAggregatedReport = GetAggregatedReport;
var GetAttributes = /** @class */ (function () {
    function GetAttributes() {
    }
    GetAttributes.getAttributeTypeMap = function () {
        return GetAttributes.attributeTypeMap;
    };
    GetAttributes.discriminator = undefined;
    GetAttributes.attributeTypeMap = [
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "Array<GetAttributesAttributes>"
        }
    ];
    return GetAttributes;
}());
exports.GetAttributes = GetAttributes;
var GetAttributesAttributes = /** @class */ (function () {
    function GetAttributesAttributes() {
    }
    GetAttributesAttributes.getAttributeTypeMap = function () {
        return GetAttributesAttributes.attributeTypeMap;
    };
    GetAttributesAttributes.discriminator = undefined;
    GetAttributesAttributes.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "category",
            "baseName": "category",
            "type": "GetAttributesAttributes.CategoryEnum"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "GetAttributesAttributes.TypeEnum"
        },
        {
            "name": "enumeration",
            "baseName": "enumeration",
            "type": "Array<GetAttributesEnumeration>"
        },
        {
            "name": "calculatedValue",
            "baseName": "calculatedValue",
            "type": "string"
        }
    ];
    return GetAttributesAttributes;
}());
exports.GetAttributesAttributes = GetAttributesAttributes;
(function (GetAttributesAttributes) {
    var CategoryEnum;
    (function (CategoryEnum) {
        CategoryEnum[CategoryEnum["Normal"] = 'normal'] = "Normal";
        CategoryEnum[CategoryEnum["Transactional"] = 'transactional'] = "Transactional";
        CategoryEnum[CategoryEnum["Category"] = 'category'] = "Category";
        CategoryEnum[CategoryEnum["Calculated"] = 'calculated'] = "Calculated";
        CategoryEnum[CategoryEnum["Global"] = 'global'] = "Global";
    })(CategoryEnum = GetAttributesAttributes.CategoryEnum || (GetAttributesAttributes.CategoryEnum = {}));
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Text"] = 'text'] = "Text";
        TypeEnum[TypeEnum["Date"] = 'date'] = "Date";
        TypeEnum[TypeEnum["Float"] = 'float'] = "Float";
        TypeEnum[TypeEnum["Id"] = 'id'] = "Id";
        TypeEnum[TypeEnum["Boolean"] = 'boolean'] = "Boolean";
    })(TypeEnum = GetAttributesAttributes.TypeEnum || (GetAttributesAttributes.TypeEnum = {}));
})(GetAttributesAttributes = exports.GetAttributesAttributes || (exports.GetAttributesAttributes = {}));
exports.GetAttributesAttributes = GetAttributesAttributes;
var GetAttributesEnumeration = /** @class */ (function () {
    function GetAttributesEnumeration() {
    }
    GetAttributesEnumeration.getAttributeTypeMap = function () {
        return GetAttributesEnumeration.attributeTypeMap;
    };
    GetAttributesEnumeration.discriminator = undefined;
    GetAttributesEnumeration.attributeTypeMap = [
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        }
    ];
    return GetAttributesEnumeration;
}());
exports.GetAttributesEnumeration = GetAttributesEnumeration;
/**
* list of blocked domains
*/
var GetBlockedDomains = /** @class */ (function () {
    function GetBlockedDomains() {
    }
    GetBlockedDomains.getAttributeTypeMap = function () {
        return GetBlockedDomains.attributeTypeMap;
    };
    GetBlockedDomains.discriminator = undefined;
    GetBlockedDomains.attributeTypeMap = [
        {
            "name": "domains",
            "baseName": "domains",
            "type": "Array<string>"
        }
    ];
    return GetBlockedDomains;
}());
exports.GetBlockedDomains = GetBlockedDomains;
var GetCampaignOverview = /** @class */ (function () {
    function GetCampaignOverview() {
    }
    GetCampaignOverview.getAttributeTypeMap = function () {
        return GetCampaignOverview.attributeTypeMap;
    };
    GetCampaignOverview.discriminator = undefined;
    GetCampaignOverview.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "GetCampaignOverview.TypeEnum"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "GetCampaignOverview.StatusEnum"
        },
        {
            "name": "scheduledAt",
            "baseName": "scheduledAt",
            "type": "string"
        },
        {
            "name": "abTesting",
            "baseName": "abTesting",
            "type": "boolean"
        },
        {
            "name": "subjectA",
            "baseName": "subjectA",
            "type": "string"
        },
        {
            "name": "subjectB",
            "baseName": "subjectB",
            "type": "string"
        },
        {
            "name": "splitRule",
            "baseName": "splitRule",
            "type": "number"
        },
        {
            "name": "winnerCriteria",
            "baseName": "winnerCriteria",
            "type": "string"
        },
        {
            "name": "winnerDelay",
            "baseName": "winnerDelay",
            "type": "number"
        },
        {
            "name": "sendAtBestTime",
            "baseName": "sendAtBestTime",
            "type": "boolean"
        }
    ];
    return GetCampaignOverview;
}());
exports.GetCampaignOverview = GetCampaignOverview;
(function (GetCampaignOverview) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Classic"] = 'classic'] = "Classic";
        TypeEnum[TypeEnum["Trigger"] = 'trigger'] = "Trigger";
    })(TypeEnum = GetCampaignOverview.TypeEnum || (GetCampaignOverview.TypeEnum = {}));
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Draft"] = 'draft'] = "Draft";
        StatusEnum[StatusEnum["Sent"] = 'sent'] = "Sent";
        StatusEnum[StatusEnum["Archive"] = 'archive'] = "Archive";
        StatusEnum[StatusEnum["Queued"] = 'queued'] = "Queued";
        StatusEnum[StatusEnum["Suspended"] = 'suspended'] = "Suspended";
        StatusEnum[StatusEnum["InProcess"] = 'in_process'] = "InProcess";
    })(StatusEnum = GetCampaignOverview.StatusEnum || (GetCampaignOverview.StatusEnum = {}));
})(GetCampaignOverview = exports.GetCampaignOverview || (exports.GetCampaignOverview = {}));
exports.GetCampaignOverview = GetCampaignOverview;
var GetCampaignRecipients = /** @class */ (function () {
    function GetCampaignRecipients() {
    }
    GetCampaignRecipients.getAttributeTypeMap = function () {
        return GetCampaignRecipients.attributeTypeMap;
    };
    GetCampaignRecipients.discriminator = undefined;
    GetCampaignRecipients.attributeTypeMap = [
        {
            "name": "lists",
            "baseName": "lists",
            "type": "Array<number>"
        },
        {
            "name": "exclusionLists",
            "baseName": "exclusionLists",
            "type": "Array<number>"
        }
    ];
    return GetCampaignRecipients;
}());
exports.GetCampaignRecipients = GetCampaignRecipients;
var GetCampaignStats = /** @class */ (function () {
    function GetCampaignStats() {
    }
    GetCampaignStats.getAttributeTypeMap = function () {
        return GetCampaignStats.attributeTypeMap;
    };
    GetCampaignStats.discriminator = undefined;
    GetCampaignStats.attributeTypeMap = [
        {
            "name": "listId",
            "baseName": "listId",
            "type": "number"
        },
        {
            "name": "uniqueClicks",
            "baseName": "uniqueClicks",
            "type": "number"
        },
        {
            "name": "clickers",
            "baseName": "clickers",
            "type": "number"
        },
        {
            "name": "complaints",
            "baseName": "complaints",
            "type": "number"
        },
        {
            "name": "delivered",
            "baseName": "delivered",
            "type": "number"
        },
        {
            "name": "sent",
            "baseName": "sent",
            "type": "number"
        },
        {
            "name": "softBounces",
            "baseName": "softBounces",
            "type": "number"
        },
        {
            "name": "hardBounces",
            "baseName": "hardBounces",
            "type": "number"
        },
        {
            "name": "uniqueViews",
            "baseName": "uniqueViews",
            "type": "number"
        },
        {
            "name": "unsubscriptions",
            "baseName": "unsubscriptions",
            "type": "number"
        },
        {
            "name": "viewed",
            "baseName": "viewed",
            "type": "number"
        },
        {
            "name": "deferred",
            "baseName": "deferred",
            "type": "number"
        },
        {
            "name": "returnBounce",
            "baseName": "returnBounce",
            "type": "number"
        }
    ];
    return GetCampaignStats;
}());
exports.GetCampaignStats = GetCampaignStats;
var GetChildAccountCreationStatus = /** @class */ (function () {
    function GetChildAccountCreationStatus() {
    }
    GetChildAccountCreationStatus.getAttributeTypeMap = function () {
        return GetChildAccountCreationStatus.attributeTypeMap;
    };
    GetChildAccountCreationStatus.discriminator = undefined;
    GetChildAccountCreationStatus.attributeTypeMap = [
        {
            "name": "childAccountCreated",
            "baseName": "childAccountCreated",
            "type": "boolean"
        }
    ];
    return GetChildAccountCreationStatus;
}());
exports.GetChildAccountCreationStatus = GetChildAccountCreationStatus;
var GetChildDomain = /** @class */ (function () {
    function GetChildDomain() {
    }
    GetChildDomain.getAttributeTypeMap = function () {
        return GetChildDomain.attributeTypeMap;
    };
    GetChildDomain.discriminator = undefined;
    GetChildDomain.attributeTypeMap = [
        {
            "name": "domain",
            "baseName": "domain",
            "type": "string"
        },
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        }
    ];
    return GetChildDomain;
}());
exports.GetChildDomain = GetChildDomain;
var GetChildDomains = /** @class */ (function (_super) {
    __extends(GetChildDomains, _super);
    function GetChildDomains() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetChildDomains.discriminator = undefined;
    return GetChildDomains;
}(Array));
exports.GetChildDomains = GetChildDomains;
/**
* API Keys associated to child account
*/
var GetChildInfoApiKeys = /** @class */ (function () {
    function GetChildInfoApiKeys() {
    }
    GetChildInfoApiKeys.getAttributeTypeMap = function () {
        return GetChildInfoApiKeys.attributeTypeMap;
    };
    GetChildInfoApiKeys.discriminator = undefined;
    GetChildInfoApiKeys.attributeTypeMap = [
        {
            "name": "v2",
            "baseName": "v2",
            "type": "Array<GetChildInfoApiKeysV2>"
        },
        {
            "name": "v3",
            "baseName": "v3",
            "type": "Array<GetChildInfoApiKeysV3>"
        }
    ];
    return GetChildInfoApiKeys;
}());
exports.GetChildInfoApiKeys = GetChildInfoApiKeys;
var GetChildInfoApiKeysV2 = /** @class */ (function () {
    function GetChildInfoApiKeysV2() {
    }
    GetChildInfoApiKeysV2.getAttributeTypeMap = function () {
        return GetChildInfoApiKeysV2.attributeTypeMap;
    };
    GetChildInfoApiKeysV2.discriminator = undefined;
    GetChildInfoApiKeysV2.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        }
    ];
    return GetChildInfoApiKeysV2;
}());
exports.GetChildInfoApiKeysV2 = GetChildInfoApiKeysV2;
var GetChildInfoApiKeysV3 = /** @class */ (function () {
    function GetChildInfoApiKeysV3() {
    }
    GetChildInfoApiKeysV3.getAttributeTypeMap = function () {
        return GetChildInfoApiKeysV3.attributeTypeMap;
    };
    GetChildInfoApiKeysV3.discriminator = undefined;
    GetChildInfoApiKeysV3.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        }
    ];
    return GetChildInfoApiKeysV3;
}());
exports.GetChildInfoApiKeysV3 = GetChildInfoApiKeysV3;
/**
* Credits available for your child
*/
var GetChildInfoCredits = /** @class */ (function () {
    function GetChildInfoCredits() {
    }
    GetChildInfoCredits.getAttributeTypeMap = function () {
        return GetChildInfoCredits.attributeTypeMap;
    };
    GetChildInfoCredits.discriminator = undefined;
    GetChildInfoCredits.attributeTypeMap = [
        {
            "name": "emailCredits",
            "baseName": "emailCredits",
            "type": "number"
        },
        {
            "name": "smsCredits",
            "baseName": "smsCredits",
            "type": "number"
        }
    ];
    return GetChildInfoCredits;
}());
exports.GetChildInfoCredits = GetChildInfoCredits;
/**
* Statistics about your child account activity
*/
var GetChildInfoStatistics = /** @class */ (function () {
    function GetChildInfoStatistics() {
    }
    GetChildInfoStatistics.getAttributeTypeMap = function () {
        return GetChildInfoStatistics.attributeTypeMap;
    };
    GetChildInfoStatistics.discriminator = undefined;
    GetChildInfoStatistics.attributeTypeMap = [
        {
            "name": "previousMonthTotalSent",
            "baseName": "previousMonthTotalSent",
            "type": "number"
        },
        {
            "name": "currentMonthTotalSent",
            "baseName": "currentMonthTotalSent",
            "type": "number"
        },
        {
            "name": "totalSent",
            "baseName": "totalSent",
            "type": "number"
        }
    ];
    return GetChildInfoStatistics;
}());
exports.GetChildInfoStatistics = GetChildInfoStatistics;
var GetChildrenList = /** @class */ (function () {
    function GetChildrenList() {
    }
    GetChildrenList.getAttributeTypeMap = function () {
        return GetChildrenList.attributeTypeMap;
    };
    GetChildrenList.discriminator = undefined;
    GetChildrenList.attributeTypeMap = [
        {
            "name": "children",
            "baseName": "children",
            "type": "Array<any>"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        }
    ];
    return GetChildrenList;
}());
exports.GetChildrenList = GetChildrenList;
var GetClient = /** @class */ (function () {
    function GetClient() {
    }
    GetClient.getAttributeTypeMap = function () {
        return GetClient.attributeTypeMap;
    };
    GetClient.discriminator = undefined;
    GetClient.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "firstName",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "lastName",
            "type": "string"
        },
        {
            "name": "companyName",
            "baseName": "companyName",
            "type": "string"
        }
    ];
    return GetClient;
}());
exports.GetClient = GetClient;
var GetChildInfo = /** @class */ (function (_super) {
    __extends(GetChildInfo, _super);
    function GetChildInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetChildInfo.getAttributeTypeMap = function () {
        return _super.getAttributeTypeMap.call(this).concat(GetChildInfo.attributeTypeMap);
    };
    GetChildInfo.discriminator = undefined;
    GetChildInfo.attributeTypeMap = [
        {
            "name": "credits",
            "baseName": "credits",
            "type": "GetChildInfoCredits"
        },
        {
            "name": "statistics",
            "baseName": "statistics",
            "type": "GetChildInfoStatistics"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        },
        {
            "name": "ips",
            "baseName": "ips",
            "type": "Array<string>"
        },
        {
            "name": "apiKeys",
            "baseName": "apiKeys",
            "type": "GetChildInfoApiKeys"
        }
    ];
    return GetChildInfo;
}(GetClient));
exports.GetChildInfo = GetChildInfo;
/**
* Campaign Statistics for the contact
*/
var GetContactCampaignStats = /** @class */ (function () {
    function GetContactCampaignStats() {
    }
    GetContactCampaignStats.getAttributeTypeMap = function () {
        return GetContactCampaignStats.attributeTypeMap;
    };
    GetContactCampaignStats.discriminator = undefined;
    GetContactCampaignStats.attributeTypeMap = [
        {
            "name": "messagesSent",
            "baseName": "messagesSent",
            "type": "Array<GetExtendedContactDetailsStatisticsMessagesSent>"
        },
        {
            "name": "hardBounces",
            "baseName": "hardBounces",
            "type": "Array<GetExtendedContactDetailsStatisticsMessagesSent>"
        },
        {
            "name": "softBounces",
            "baseName": "softBounces",
            "type": "Array<GetExtendedContactDetailsStatisticsMessagesSent>"
        },
        {
            "name": "complaints",
            "baseName": "complaints",
            "type": "Array<GetExtendedContactDetailsStatisticsMessagesSent>"
        },
        {
            "name": "unsubscriptions",
            "baseName": "unsubscriptions",
            "type": "GetContactCampaignStatsUnsubscriptions"
        },
        {
            "name": "opened",
            "baseName": "opened",
            "type": "Array<GetContactCampaignStatsOpened>"
        },
        {
            "name": "clicked",
            "baseName": "clicked",
            "type": "Array<GetContactCampaignStatsClicked>"
        },
        {
            "name": "transacAttributes",
            "baseName": "transacAttributes",
            "type": "Array<GetContactCampaignStatsTransacAttributes>"
        }
    ];
    return GetContactCampaignStats;
}());
exports.GetContactCampaignStats = GetContactCampaignStats;
var GetContactCampaignStatsClicked = /** @class */ (function () {
    function GetContactCampaignStatsClicked() {
    }
    GetContactCampaignStatsClicked.getAttributeTypeMap = function () {
        return GetContactCampaignStatsClicked.attributeTypeMap;
    };
    GetContactCampaignStatsClicked.discriminator = undefined;
    GetContactCampaignStatsClicked.attributeTypeMap = [
        {
            "name": "campaignId",
            "baseName": "campaignId",
            "type": "number"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<GetExtendedContactDetailsStatisticsLinks>"
        }
    ];
    return GetContactCampaignStatsClicked;
}());
exports.GetContactCampaignStatsClicked = GetContactCampaignStatsClicked;
var GetContactCampaignStatsOpened = /** @class */ (function () {
    function GetContactCampaignStatsOpened() {
    }
    GetContactCampaignStatsOpened.getAttributeTypeMap = function () {
        return GetContactCampaignStatsOpened.attributeTypeMap;
    };
    GetContactCampaignStatsOpened.discriminator = undefined;
    GetContactCampaignStatsOpened.attributeTypeMap = [
        {
            "name": "campaignId",
            "baseName": "campaignId",
            "type": "number"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        },
        {
            "name": "eventTime",
            "baseName": "eventTime",
            "type": "string"
        },
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        }
    ];
    return GetContactCampaignStatsOpened;
}());
exports.GetContactCampaignStatsOpened = GetContactCampaignStatsOpened;
var GetContactCampaignStatsTransacAttributes = /** @class */ (function () {
    function GetContactCampaignStatsTransacAttributes() {
    }
    GetContactCampaignStatsTransacAttributes.getAttributeTypeMap = function () {
        return GetContactCampaignStatsTransacAttributes.attributeTypeMap;
    };
    GetContactCampaignStatsTransacAttributes.discriminator = undefined;
    GetContactCampaignStatsTransacAttributes.attributeTypeMap = [
        {
            "name": "orderDate",
            "baseName": "orderDate",
            "type": "string"
        },
        {
            "name": "orderPrice",
            "baseName": "orderPrice",
            "type": "number"
        },
        {
            "name": "orderId",
            "baseName": "orderId",
            "type": "number"
        }
    ];
    return GetContactCampaignStatsTransacAttributes;
}());
exports.GetContactCampaignStatsTransacAttributes = GetContactCampaignStatsTransacAttributes;
var GetContactCampaignStatsUnsubscriptions = /** @class */ (function () {
    function GetContactCampaignStatsUnsubscriptions() {
    }
    GetContactCampaignStatsUnsubscriptions.getAttributeTypeMap = function () {
        return GetContactCampaignStatsUnsubscriptions.attributeTypeMap;
    };
    GetContactCampaignStatsUnsubscriptions.discriminator = undefined;
    GetContactCampaignStatsUnsubscriptions.attributeTypeMap = [
        {
            "name": "userUnsubscription",
            "baseName": "userUnsubscription",
            "type": "Array<GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription>"
        },
        {
            "name": "adminUnsubscription",
            "baseName": "adminUnsubscription",
            "type": "Array<GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription>"
        }
    ];
    return GetContactCampaignStatsUnsubscriptions;
}());
exports.GetContactCampaignStatsUnsubscriptions = GetContactCampaignStatsUnsubscriptions;
var GetContactDetails = /** @class */ (function () {
    function GetContactDetails() {
    }
    GetContactDetails.getAttributeTypeMap = function () {
        return GetContactDetails.attributeTypeMap;
    };
    GetContactDetails.discriminator = undefined;
    GetContactDetails.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "emailBlacklisted",
            "baseName": "emailBlacklisted",
            "type": "boolean"
        },
        {
            "name": "smsBlacklisted",
            "baseName": "smsBlacklisted",
            "type": "boolean"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "string"
        },
        {
            "name": "modifiedAt",
            "baseName": "modifiedAt",
            "type": "string"
        },
        {
            "name": "listIds",
            "baseName": "listIds",
            "type": "Array<number>"
        },
        {
            "name": "listUnsubscribed",
            "baseName": "listUnsubscribed",
            "type": "Array<number>"
        },
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "any"
        }
    ];
    return GetContactDetails;
}());
exports.GetContactDetails = GetContactDetails;
var GetContacts = /** @class */ (function () {
    function GetContacts() {
    }
    GetContacts.getAttributeTypeMap = function () {
        return GetContacts.attributeTypeMap;
    };
    GetContacts.discriminator = undefined;
    GetContacts.attributeTypeMap = [
        {
            "name": "contacts",
            "baseName": "contacts",
            "type": "Array<any>"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        }
    ];
    return GetContacts;
}());
exports.GetContacts = GetContacts;
var GetDeviceBrowserStats = /** @class */ (function () {
    function GetDeviceBrowserStats() {
    }
    GetDeviceBrowserStats.getAttributeTypeMap = function () {
        return GetDeviceBrowserStats.attributeTypeMap;
    };
    GetDeviceBrowserStats.discriminator = undefined;
    GetDeviceBrowserStats.attributeTypeMap = [
        {
            "name": "clickers",
            "baseName": "clickers",
            "type": "number"
        },
        {
            "name": "uniqueClicks",
            "baseName": "uniqueClicks",
            "type": "number"
        },
        {
            "name": "viewed",
            "baseName": "viewed",
            "type": "number"
        },
        {
            "name": "uniqueViews",
            "baseName": "uniqueViews",
            "type": "number"
        }
    ];
    return GetDeviceBrowserStats;
}());
exports.GetDeviceBrowserStats = GetDeviceBrowserStats;
var GetEmailCampaigns = /** @class */ (function () {
    function GetEmailCampaigns() {
    }
    GetEmailCampaigns.getAttributeTypeMap = function () {
        return GetEmailCampaigns.attributeTypeMap;
    };
    GetEmailCampaigns.discriminator = undefined;
    GetEmailCampaigns.attributeTypeMap = [
        {
            "name": "campaigns",
            "baseName": "campaigns",
            "type": "Array<any>"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        }
    ];
    return GetEmailCampaigns;
}());
exports.GetEmailCampaigns = GetEmailCampaigns;
var GetEmailEventReport = /** @class */ (function () {
    function GetEmailEventReport() {
    }
    GetEmailEventReport.getAttributeTypeMap = function () {
        return GetEmailEventReport.attributeTypeMap;
    };
    GetEmailEventReport.discriminator = undefined;
    GetEmailEventReport.attributeTypeMap = [
        {
            "name": "events",
            "baseName": "events",
            "type": "Array<GetEmailEventReportEvents>"
        }
    ];
    return GetEmailEventReport;
}());
exports.GetEmailEventReport = GetEmailEventReport;
var GetEmailEventReportEvents = /** @class */ (function () {
    function GetEmailEventReportEvents() {
    }
    GetEmailEventReportEvents.getAttributeTypeMap = function () {
        return GetEmailEventReportEvents.attributeTypeMap;
    };
    GetEmailEventReportEvents.discriminator = undefined;
    GetEmailEventReportEvents.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "messageId",
            "baseName": "messageId",
            "type": "string"
        },
        {
            "name": "event",
            "baseName": "event",
            "type": "GetEmailEventReportEvents.EventEnum"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string"
        },
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        },
        {
            "name": "link",
            "baseName": "link",
            "type": "string"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "string"
        },
        {
            "name": "templateId",
            "baseName": "templateId",
            "type": "number"
        }
    ];
    return GetEmailEventReportEvents;
}());
exports.GetEmailEventReportEvents = GetEmailEventReportEvents;
(function (GetEmailEventReportEvents) {
    var EventEnum;
    (function (EventEnum) {
        EventEnum[EventEnum["Bounces"] = 'bounces'] = "Bounces";
        EventEnum[EventEnum["HardBounces"] = 'hardBounces'] = "HardBounces";
        EventEnum[EventEnum["SoftBounces"] = 'softBounces'] = "SoftBounces";
        EventEnum[EventEnum["Delivered"] = 'delivered'] = "Delivered";
        EventEnum[EventEnum["Spam"] = 'spam'] = "Spam";
        EventEnum[EventEnum["Requests"] = 'requests'] = "Requests";
        EventEnum[EventEnum["Opened"] = 'opened'] = "Opened";
        EventEnum[EventEnum["Clicks"] = 'clicks'] = "Clicks";
        EventEnum[EventEnum["Invalid"] = 'invalid'] = "Invalid";
        EventEnum[EventEnum["Deferred"] = 'deferred'] = "Deferred";
        EventEnum[EventEnum["Blocked"] = 'blocked'] = "Blocked";
        EventEnum[EventEnum["Unsubscribed"] = 'unsubscribed'] = "Unsubscribed";
        EventEnum[EventEnum["Error"] = 'error'] = "Error";
    })(EventEnum = GetEmailEventReportEvents.EventEnum || (GetEmailEventReportEvents.EventEnum = {}));
})(GetEmailEventReportEvents = exports.GetEmailEventReportEvents || (exports.GetEmailEventReportEvents = {}));
exports.GetEmailEventReportEvents = GetEmailEventReportEvents;
var GetExtendedCampaignOverview = /** @class */ (function (_super) {
    __extends(GetExtendedCampaignOverview, _super);
    function GetExtendedCampaignOverview() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetExtendedCampaignOverview.getAttributeTypeMap = function () {
        return _super.getAttributeTypeMap.call(this).concat(GetExtendedCampaignOverview.attributeTypeMap);
    };
    GetExtendedCampaignOverview.discriminator = undefined;
    GetExtendedCampaignOverview.attributeTypeMap = [
        {
            "name": "testSent",
            "baseName": "testSent",
            "type": "boolean"
        },
        {
            "name": "header",
            "baseName": "header",
            "type": "string"
        },
        {
            "name": "footer",
            "baseName": "footer",
            "type": "string"
        },
        {
            "name": "sender",
            "baseName": "sender",
            "type": "GetExtendedCampaignOverviewSender"
        },
        {
            "name": "replyTo",
            "baseName": "replyTo",
            "type": "string"
        },
        {
            "name": "toField",
            "baseName": "toField",
            "type": "string"
        },
        {
            "name": "htmlContent",
            "baseName": "htmlContent",
            "type": "string"
        },
        {
            "name": "shareLink",
            "baseName": "shareLink",
            "type": "string"
        },
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "string"
        },
        {
            "name": "modifiedAt",
            "baseName": "modifiedAt",
            "type": "string"
        },
        {
            "name": "inlineImageActivation",
            "baseName": "inlineImageActivation",
            "type": "boolean"
        },
        {
            "name": "mirrorActive",
            "baseName": "mirrorActive",
            "type": "boolean"
        },
        {
            "name": "recurring",
            "baseName": "recurring",
            "type": "boolean"
        },
        {
            "name": "sentDate",
            "baseName": "sentDate",
            "type": "string"
        },
        {
            "name": "returnBounce",
            "baseName": "returnBounce",
            "type": "number"
        }
    ];
    return GetExtendedCampaignOverview;
}(GetCampaignOverview));
exports.GetExtendedCampaignOverview = GetExtendedCampaignOverview;
var GetEmailCampaign = /** @class */ (function (_super) {
    __extends(GetEmailCampaign, _super);
    function GetEmailCampaign() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetEmailCampaign.getAttributeTypeMap = function () {
        return _super.getAttributeTypeMap.call(this).concat(GetEmailCampaign.attributeTypeMap);
    };
    GetEmailCampaign.discriminator = undefined;
    GetEmailCampaign.attributeTypeMap = [
        {
            "name": "recipients",
            "baseName": "recipients",
            "type": "GetSmsCampaignRecipients"
        },
        {
            "name": "statistics",
            "baseName": "statistics",
            "type": "GetSmsCampaignRecipients"
        }
    ];
    return GetEmailCampaign;
}(GetExtendedCampaignOverview));
exports.GetEmailCampaign = GetEmailCampaign;
var GetExtendedCampaignOverviewSender = /** @class */ (function () {
    function GetExtendedCampaignOverviewSender() {
    }
    GetExtendedCampaignOverviewSender.getAttributeTypeMap = function () {
        return GetExtendedCampaignOverviewSender.attributeTypeMap;
    };
    GetExtendedCampaignOverviewSender.discriminator = undefined;
    GetExtendedCampaignOverviewSender.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        }
    ];
    return GetExtendedCampaignOverviewSender;
}());
exports.GetExtendedCampaignOverviewSender = GetExtendedCampaignOverviewSender;
var GetExtendedCampaignStats = /** @class */ (function () {
    function GetExtendedCampaignStats() {
    }
    GetExtendedCampaignStats.getAttributeTypeMap = function () {
        return GetExtendedCampaignStats.attributeTypeMap;
    };
    GetExtendedCampaignStats.discriminator = undefined;
    GetExtendedCampaignStats.attributeTypeMap = [
        {
            "name": "globalStats",
            "baseName": "globalStats",
            "type": "GetExtendedCampaignStatsGlobalStats"
        },
        {
            "name": "campaignStats",
            "baseName": "campaignStats",
            "type": "Array<any>"
        },
        {
            "name": "mirrorClick",
            "baseName": "mirrorClick",
            "type": "number"
        },
        {
            "name": "remaining",
            "baseName": "remaining",
            "type": "number"
        },
        {
            "name": "linksStats",
            "baseName": "linksStats",
            "type": "any"
        },
        {
            "name": "statsByDomain",
            "baseName": "statsByDomain",
            "type": "GetStatsByDomain"
        },
        {
            "name": "statsByDevice",
            "baseName": "statsByDevice",
            "type": "GetStatsByDevice"
        },
        {
            "name": "statsByBrowser",
            "baseName": "statsByBrowser",
            "type": "GetStatsByBrowser"
        }
    ];
    return GetExtendedCampaignStats;
}());
exports.GetExtendedCampaignStats = GetExtendedCampaignStats;
/**
* Overall statistics of the campaign
*/
var GetExtendedCampaignStatsGlobalStats = /** @class */ (function () {
    function GetExtendedCampaignStatsGlobalStats() {
    }
    GetExtendedCampaignStatsGlobalStats.getAttributeTypeMap = function () {
        return GetExtendedCampaignStatsGlobalStats.attributeTypeMap;
    };
    GetExtendedCampaignStatsGlobalStats.discriminator = undefined;
    GetExtendedCampaignStatsGlobalStats.attributeTypeMap = [];
    return GetExtendedCampaignStatsGlobalStats;
}());
exports.GetExtendedCampaignStatsGlobalStats = GetExtendedCampaignStatsGlobalStats;
var GetExtendedClient = /** @class */ (function (_super) {
    __extends(GetExtendedClient, _super);
    function GetExtendedClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetExtendedClient.getAttributeTypeMap = function () {
        return _super.getAttributeTypeMap.call(this).concat(GetExtendedClient.attributeTypeMap);
    };
    GetExtendedClient.discriminator = undefined;
    GetExtendedClient.attributeTypeMap = [
        {
            "name": "address",
            "baseName": "address",
            "type": "GetExtendedClientAddress"
        }
    ];
    return GetExtendedClient;
}(GetClient));
exports.GetExtendedClient = GetExtendedClient;
/**
* Address informations
*/
var GetExtendedClientAddress = /** @class */ (function () {
    function GetExtendedClientAddress() {
    }
    GetExtendedClientAddress.getAttributeTypeMap = function () {
        return GetExtendedClientAddress.attributeTypeMap;
    };
    GetExtendedClientAddress.discriminator = undefined;
    GetExtendedClientAddress.attributeTypeMap = [
        {
            "name": "street",
            "baseName": "street",
            "type": "string"
        },
        {
            "name": "city",
            "baseName": "city",
            "type": "string"
        },
        {
            "name": "zipCode",
            "baseName": "zipCode",
            "type": "string"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "string"
        }
    ];
    return GetExtendedClientAddress;
}());
exports.GetExtendedClientAddress = GetExtendedClientAddress;
var GetExtendedContactDetails = /** @class */ (function (_super) {
    __extends(GetExtendedContactDetails, _super);
    function GetExtendedContactDetails() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetExtendedContactDetails.getAttributeTypeMap = function () {
        return _super.getAttributeTypeMap.call(this).concat(GetExtendedContactDetails.attributeTypeMap);
    };
    GetExtendedContactDetails.discriminator = undefined;
    GetExtendedContactDetails.attributeTypeMap = [
        {
            "name": "statistics",
            "baseName": "statistics",
            "type": "GetExtendedContactDetailsStatistics"
        }
    ];
    return GetExtendedContactDetails;
}(GetContactDetails));
exports.GetExtendedContactDetails = GetExtendedContactDetails;
/**
* Campaign statistics of the contact
*/
var GetExtendedContactDetailsStatistics = /** @class */ (function () {
    function GetExtendedContactDetailsStatistics() {
    }
    GetExtendedContactDetailsStatistics.getAttributeTypeMap = function () {
        return GetExtendedContactDetailsStatistics.attributeTypeMap;
    };
    GetExtendedContactDetailsStatistics.discriminator = undefined;
    GetExtendedContactDetailsStatistics.attributeTypeMap = [
        {
            "name": "messagesSent",
            "baseName": "messagesSent",
            "type": "Array<GetExtendedContactDetailsStatisticsMessagesSent>"
        },
        {
            "name": "hardBounces",
            "baseName": "hardBounces",
            "type": "Array<GetExtendedContactDetailsStatisticsMessagesSent>"
        },
        {
            "name": "softBounces",
            "baseName": "softBounces",
            "type": "Array<GetExtendedContactDetailsStatisticsMessagesSent>"
        },
        {
            "name": "complaints",
            "baseName": "complaints",
            "type": "Array<GetExtendedContactDetailsStatisticsMessagesSent>"
        },
        {
            "name": "unsubscriptions",
            "baseName": "unsubscriptions",
            "type": "GetExtendedContactDetailsStatisticsUnsubscriptions"
        },
        {
            "name": "opened",
            "baseName": "opened",
            "type": "Array<GetExtendedContactDetailsStatisticsOpened>"
        },
        {
            "name": "clicked",
            "baseName": "clicked",
            "type": "Array<GetExtendedContactDetailsStatisticsClicked>"
        },
        {
            "name": "transacAttributes",
            "baseName": "transacAttributes",
            "type": "Array<any>"
        }
    ];
    return GetExtendedContactDetailsStatistics;
}());
exports.GetExtendedContactDetailsStatistics = GetExtendedContactDetailsStatistics;
var GetExtendedContactDetailsStatisticsClicked = /** @class */ (function () {
    function GetExtendedContactDetailsStatisticsClicked() {
    }
    GetExtendedContactDetailsStatisticsClicked.getAttributeTypeMap = function () {
        return GetExtendedContactDetailsStatisticsClicked.attributeTypeMap;
    };
    GetExtendedContactDetailsStatisticsClicked.discriminator = undefined;
    GetExtendedContactDetailsStatisticsClicked.attributeTypeMap = [
        {
            "name": "campaignId",
            "baseName": "campaignId",
            "type": "number"
        },
        {
            "name": "links",
            "baseName": "links",
            "type": "Array<GetExtendedContactDetailsStatisticsLinks>"
        }
    ];
    return GetExtendedContactDetailsStatisticsClicked;
}());
exports.GetExtendedContactDetailsStatisticsClicked = GetExtendedContactDetailsStatisticsClicked;
var GetAccount = /** @class */ (function (_super) {
    __extends(GetAccount, _super);
    function GetAccount() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetAccount.getAttributeTypeMap = function () {
        return _super.getAttributeTypeMap.call(this).concat(GetAccount.attributeTypeMap);
    };
    GetAccount.discriminator = undefined;
    GetAccount.attributeTypeMap = [
        {
            "name": "plan",
            "baseName": "plan",
            "type": "Array<GetAccountPlan>"
        },
        {
            "name": "relay",
            "baseName": "relay",
            "type": "GetAccountRelay"
        },
        {
            "name": "marketingAutomation",
            "baseName": "marketingAutomation",
            "type": "GetAccountMarketingAutomation"
        }
    ];
    return GetAccount;
}(GetExtendedClient));
exports.GetAccount = GetAccount;
var GetExtendedContactDetailsStatisticsLinks = /** @class */ (function () {
    function GetExtendedContactDetailsStatisticsLinks() {
    }
    GetExtendedContactDetailsStatisticsLinks.getAttributeTypeMap = function () {
        return GetExtendedContactDetailsStatisticsLinks.attributeTypeMap;
    };
    GetExtendedContactDetailsStatisticsLinks.discriminator = undefined;
    GetExtendedContactDetailsStatisticsLinks.attributeTypeMap = [
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        },
        {
            "name": "eventTime",
            "baseName": "eventTime",
            "type": "string"
        },
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }
    ];
    return GetExtendedContactDetailsStatisticsLinks;
}());
exports.GetExtendedContactDetailsStatisticsLinks = GetExtendedContactDetailsStatisticsLinks;
var GetExtendedContactDetailsStatisticsMessagesSent = /** @class */ (function () {
    function GetExtendedContactDetailsStatisticsMessagesSent() {
    }
    GetExtendedContactDetailsStatisticsMessagesSent.getAttributeTypeMap = function () {
        return GetExtendedContactDetailsStatisticsMessagesSent.attributeTypeMap;
    };
    GetExtendedContactDetailsStatisticsMessagesSent.discriminator = undefined;
    GetExtendedContactDetailsStatisticsMessagesSent.attributeTypeMap = [
        {
            "name": "campaignId",
            "baseName": "campaignId",
            "type": "number"
        },
        {
            "name": "eventTime",
            "baseName": "eventTime",
            "type": "string"
        }
    ];
    return GetExtendedContactDetailsStatisticsMessagesSent;
}());
exports.GetExtendedContactDetailsStatisticsMessagesSent = GetExtendedContactDetailsStatisticsMessagesSent;
var GetExtendedContactDetailsStatisticsOpened = /** @class */ (function () {
    function GetExtendedContactDetailsStatisticsOpened() {
    }
    GetExtendedContactDetailsStatisticsOpened.getAttributeTypeMap = function () {
        return GetExtendedContactDetailsStatisticsOpened.attributeTypeMap;
    };
    GetExtendedContactDetailsStatisticsOpened.discriminator = undefined;
    GetExtendedContactDetailsStatisticsOpened.attributeTypeMap = [
        {
            "name": "campaignId",
            "baseName": "campaignId",
            "type": "number"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        },
        {
            "name": "eventTime",
            "baseName": "eventTime",
            "type": "string"
        },
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        }
    ];
    return GetExtendedContactDetailsStatisticsOpened;
}());
exports.GetExtendedContactDetailsStatisticsOpened = GetExtendedContactDetailsStatisticsOpened;
/**
* Listing of the unsubscription for the contact
*/
var GetExtendedContactDetailsStatisticsUnsubscriptions = /** @class */ (function () {
    function GetExtendedContactDetailsStatisticsUnsubscriptions() {
    }
    GetExtendedContactDetailsStatisticsUnsubscriptions.getAttributeTypeMap = function () {
        return GetExtendedContactDetailsStatisticsUnsubscriptions.attributeTypeMap;
    };
    GetExtendedContactDetailsStatisticsUnsubscriptions.discriminator = undefined;
    GetExtendedContactDetailsStatisticsUnsubscriptions.attributeTypeMap = [
        {
            "name": "userUnsubscription",
            "baseName": "userUnsubscription",
            "type": "Array<GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription>"
        },
        {
            "name": "adminUnsubscription",
            "baseName": "adminUnsubscription",
            "type": "Array<GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription>"
        }
    ];
    return GetExtendedContactDetailsStatisticsUnsubscriptions;
}());
exports.GetExtendedContactDetailsStatisticsUnsubscriptions = GetExtendedContactDetailsStatisticsUnsubscriptions;
var GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription = /** @class */ (function () {
    function GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription() {
    }
    GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription.getAttributeTypeMap = function () {
        return GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription.attributeTypeMap;
    };
    GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription.discriminator = undefined;
    GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription.attributeTypeMap = [
        {
            "name": "eventTime",
            "baseName": "eventTime",
            "type": "string"
        },
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        }
    ];
    return GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription;
}());
exports.GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription = GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription;
var GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription = /** @class */ (function () {
    function GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription() {
    }
    GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription.getAttributeTypeMap = function () {
        return GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription.attributeTypeMap;
    };
    GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription.discriminator = undefined;
    GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription.attributeTypeMap = [
        {
            "name": "campaignId",
            "baseName": "campaignId",
            "type": "number"
        },
        {
            "name": "eventTime",
            "baseName": "eventTime",
            "type": "string"
        },
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        }
    ];
    return GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription;
}());
exports.GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription = GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription;
var GetExtendedListCampaignStats = /** @class */ (function () {
    function GetExtendedListCampaignStats() {
    }
    GetExtendedListCampaignStats.getAttributeTypeMap = function () {
        return GetExtendedListCampaignStats.attributeTypeMap;
    };
    GetExtendedListCampaignStats.discriminator = undefined;
    GetExtendedListCampaignStats.attributeTypeMap = [
        {
            "name": "campaignId",
            "baseName": "campaignId",
            "type": "number"
        },
        {
            "name": "stats",
            "baseName": "stats",
            "type": "GetCampaignStats"
        }
    ];
    return GetExtendedListCampaignStats;
}());
exports.GetExtendedListCampaignStats = GetExtendedListCampaignStats;
var GetFolder = /** @class */ (function () {
    function GetFolder() {
    }
    GetFolder.getAttributeTypeMap = function () {
        return GetFolder.attributeTypeMap;
    };
    GetFolder.discriminator = undefined;
    GetFolder.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "totalBlacklisted",
            "baseName": "totalBlacklisted",
            "type": "number"
        },
        {
            "name": "totalSubscribers",
            "baseName": "totalSubscribers",
            "type": "number"
        },
        {
            "name": "uniqueSubscribers",
            "baseName": "uniqueSubscribers",
            "type": "number"
        }
    ];
    return GetFolder;
}());
exports.GetFolder = GetFolder;
var GetFolderLists = /** @class */ (function () {
    function GetFolderLists() {
    }
    GetFolderLists.getAttributeTypeMap = function () {
        return GetFolderLists.attributeTypeMap;
    };
    GetFolderLists.discriminator = undefined;
    GetFolderLists.attributeTypeMap = [
        {
            "name": "lists",
            "baseName": "lists",
            "type": "Array<any>"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        }
    ];
    return GetFolderLists;
}());
exports.GetFolderLists = GetFolderLists;
var GetFolders = /** @class */ (function () {
    function GetFolders() {
    }
    GetFolders.getAttributeTypeMap = function () {
        return GetFolders.attributeTypeMap;
    };
    GetFolders.discriminator = undefined;
    GetFolders.attributeTypeMap = [
        {
            "name": "folders",
            "baseName": "folders",
            "type": "Array<any>"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        }
    ];
    return GetFolders;
}());
exports.GetFolders = GetFolders;
var GetIp = /** @class */ (function () {
    function GetIp() {
    }
    GetIp.getAttributeTypeMap = function () {
        return GetIp.attributeTypeMap;
    };
    GetIp.discriminator = undefined;
    GetIp.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        },
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        },
        {
            "name": "domain",
            "baseName": "domain",
            "type": "string"
        }
    ];
    return GetIp;
}());
exports.GetIp = GetIp;
var GetIpFromSender = /** @class */ (function () {
    function GetIpFromSender() {
    }
    GetIpFromSender.getAttributeTypeMap = function () {
        return GetIpFromSender.attributeTypeMap;
    };
    GetIpFromSender.discriminator = undefined;
    GetIpFromSender.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        },
        {
            "name": "domain",
            "baseName": "domain",
            "type": "string"
        },
        {
            "name": "weight",
            "baseName": "weight",
            "type": "number"
        }
    ];
    return GetIpFromSender;
}());
exports.GetIpFromSender = GetIpFromSender;
var GetIps = /** @class */ (function () {
    function GetIps() {
    }
    GetIps.getAttributeTypeMap = function () {
        return GetIps.attributeTypeMap;
    };
    GetIps.discriminator = undefined;
    GetIps.attributeTypeMap = [
        {
            "name": "ips",
            "baseName": "ips",
            "type": "Array<GetIp>"
        }
    ];
    return GetIps;
}());
exports.GetIps = GetIps;
var GetIpsFromSender = /** @class */ (function () {
    function GetIpsFromSender() {
    }
    GetIpsFromSender.getAttributeTypeMap = function () {
        return GetIpsFromSender.attributeTypeMap;
    };
    GetIpsFromSender.discriminator = undefined;
    GetIpsFromSender.attributeTypeMap = [
        {
            "name": "ips",
            "baseName": "ips",
            "type": "Array<GetIpFromSender>"
        }
    ];
    return GetIpsFromSender;
}());
exports.GetIpsFromSender = GetIpsFromSender;
var GetList = /** @class */ (function () {
    function GetList() {
    }
    GetList.getAttributeTypeMap = function () {
        return GetList.attributeTypeMap;
    };
    GetList.discriminator = undefined;
    GetList.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "totalBlacklisted",
            "baseName": "totalBlacklisted",
            "type": "number"
        },
        {
            "name": "totalSubscribers",
            "baseName": "totalSubscribers",
            "type": "number"
        },
        {
            "name": "uniqueSubscribers",
            "baseName": "uniqueSubscribers",
            "type": "number"
        }
    ];
    return GetList;
}());
exports.GetList = GetList;
var GetLists = /** @class */ (function () {
    function GetLists() {
    }
    GetLists.getAttributeTypeMap = function () {
        return GetLists.attributeTypeMap;
    };
    GetLists.discriminator = undefined;
    GetLists.attributeTypeMap = [
        {
            "name": "lists",
            "baseName": "lists",
            "type": "Array<any>"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        }
    ];
    return GetLists;
}());
exports.GetLists = GetLists;
var GetExtendedList = /** @class */ (function (_super) {
    __extends(GetExtendedList, _super);
    function GetExtendedList() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetExtendedList.getAttributeTypeMap = function () {
        return _super.getAttributeTypeMap.call(this).concat(GetExtendedList.attributeTypeMap);
    };
    GetExtendedList.discriminator = undefined;
    GetExtendedList.attributeTypeMap = [
        {
            "name": "folderId",
            "baseName": "folderId",
            "type": "number"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "string"
        },
        {
            "name": "campaignStats",
            "baseName": "campaignStats",
            "type": "Array<GetExtendedListCampaignStats>"
        },
        {
            "name": "dynamicList",
            "baseName": "dynamicList",
            "type": "boolean"
        }
    ];
    return GetExtendedList;
}(GetList));
exports.GetExtendedList = GetExtendedList;
var GetProcess = /** @class */ (function () {
    function GetProcess() {
    }
    GetProcess.getAttributeTypeMap = function () {
        return GetProcess.attributeTypeMap;
    };
    GetProcess.discriminator = undefined;
    GetProcess.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "GetProcess.StatusEnum"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "exportUrl",
            "baseName": "export_url",
            "type": "string"
        }
    ];
    return GetProcess;
}());
exports.GetProcess = GetProcess;
(function (GetProcess) {
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Queued"] = 'queued'] = "Queued";
        StatusEnum[StatusEnum["InProcess"] = 'in_process'] = "InProcess";
        StatusEnum[StatusEnum["Completed"] = 'completed'] = "Completed";
    })(StatusEnum = GetProcess.StatusEnum || (GetProcess.StatusEnum = {}));
})(GetProcess = exports.GetProcess || (exports.GetProcess = {}));
exports.GetProcess = GetProcess;
var GetProcesses = /** @class */ (function () {
    function GetProcesses() {
    }
    GetProcesses.getAttributeTypeMap = function () {
        return GetProcesses.attributeTypeMap;
    };
    GetProcesses.discriminator = undefined;
    GetProcesses.attributeTypeMap = [
        {
            "name": "processes",
            "baseName": "processes",
            "type": "Array<GetProcess>"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        }
    ];
    return GetProcesses;
}());
exports.GetProcesses = GetProcesses;
var GetReports = /** @class */ (function () {
    function GetReports() {
    }
    GetReports.getAttributeTypeMap = function () {
        return GetReports.attributeTypeMap;
    };
    GetReports.discriminator = undefined;
    GetReports.attributeTypeMap = [
        {
            "name": "reports",
            "baseName": "reports",
            "type": "Array<GetReportsReports>"
        }
    ];
    return GetReports;
}());
exports.GetReports = GetReports;
var GetReportsReports = /** @class */ (function () {
    function GetReportsReports() {
    }
    GetReportsReports.getAttributeTypeMap = function () {
        return GetReportsReports.attributeTypeMap;
    };
    GetReportsReports.discriminator = undefined;
    GetReportsReports.attributeTypeMap = [
        {
            "name": "date",
            "baseName": "date",
            "type": "string"
        },
        {
            "name": "requests",
            "baseName": "requests",
            "type": "number"
        },
        {
            "name": "delivered",
            "baseName": "delivered",
            "type": "number"
        },
        {
            "name": "hardBounces",
            "baseName": "hardBounces",
            "type": "number"
        },
        {
            "name": "softBounces",
            "baseName": "softBounces",
            "type": "number"
        },
        {
            "name": "clicks",
            "baseName": "clicks",
            "type": "number"
        },
        {
            "name": "uniqueClicks",
            "baseName": "uniqueClicks",
            "type": "number"
        },
        {
            "name": "opens",
            "baseName": "opens",
            "type": "number"
        },
        {
            "name": "uniqueOpens",
            "baseName": "uniqueOpens",
            "type": "number"
        },
        {
            "name": "spamReports",
            "baseName": "spamReports",
            "type": "number"
        },
        {
            "name": "blocked",
            "baseName": "blocked",
            "type": "number"
        },
        {
            "name": "invalid",
            "baseName": "invalid",
            "type": "number"
        },
        {
            "name": "unsubscribed",
            "baseName": "unsubscribed",
            "type": "number"
        }
    ];
    return GetReportsReports;
}());
exports.GetReportsReports = GetReportsReports;
var GetSendersList = /** @class */ (function () {
    function GetSendersList() {
    }
    GetSendersList.getAttributeTypeMap = function () {
        return GetSendersList.attributeTypeMap;
    };
    GetSendersList.discriminator = undefined;
    GetSendersList.attributeTypeMap = [
        {
            "name": "senders",
            "baseName": "senders",
            "type": "Array<GetSendersListSenders>"
        }
    ];
    return GetSendersList;
}());
exports.GetSendersList = GetSendersList;
var GetSendersListIps = /** @class */ (function () {
    function GetSendersListIps() {
    }
    GetSendersListIps.getAttributeTypeMap = function () {
        return GetSendersListIps.attributeTypeMap;
    };
    GetSendersListIps.discriminator = undefined;
    GetSendersListIps.attributeTypeMap = [
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        },
        {
            "name": "domain",
            "baseName": "domain",
            "type": "string"
        },
        {
            "name": "weight",
            "baseName": "weight",
            "type": "number"
        }
    ];
    return GetSendersListIps;
}());
exports.GetSendersListIps = GetSendersListIps;
var GetSendersListSenders = /** @class */ (function () {
    function GetSendersListSenders() {
    }
    GetSendersListSenders.getAttributeTypeMap = function () {
        return GetSendersListSenders.attributeTypeMap;
    };
    GetSendersListSenders.discriminator = undefined;
    GetSendersListSenders.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "active",
            "baseName": "active",
            "type": "boolean"
        },
        {
            "name": "ips",
            "baseName": "ips",
            "type": "Array<GetSendersListIps>"
        }
    ];
    return GetSendersListSenders;
}());
exports.GetSendersListSenders = GetSendersListSenders;
var GetSharedTemplateUrl = /** @class */ (function () {
    function GetSharedTemplateUrl() {
    }
    GetSharedTemplateUrl.getAttributeTypeMap = function () {
        return GetSharedTemplateUrl.attributeTypeMap;
    };
    GetSharedTemplateUrl.discriminator = undefined;
    GetSharedTemplateUrl.attributeTypeMap = [
        {
            "name": "sharedUrl",
            "baseName": "sharedUrl",
            "type": "string"
        }
    ];
    return GetSharedTemplateUrl;
}());
exports.GetSharedTemplateUrl = GetSharedTemplateUrl;
var GetSmsCampaignOverview = /** @class */ (function () {
    function GetSmsCampaignOverview() {
    }
    GetSmsCampaignOverview.getAttributeTypeMap = function () {
        return GetSmsCampaignOverview.attributeTypeMap;
    };
    GetSmsCampaignOverview.discriminator = undefined;
    GetSmsCampaignOverview.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "GetSmsCampaignOverview.StatusEnum"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "scheduledAt",
            "baseName": "scheduledAt",
            "type": "string"
        },
        {
            "name": "sender",
            "baseName": "sender",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "string"
        },
        {
            "name": "modifiedAt",
            "baseName": "modifiedAt",
            "type": "string"
        }
    ];
    return GetSmsCampaignOverview;
}());
exports.GetSmsCampaignOverview = GetSmsCampaignOverview;
var GetSmsCampaign = /** @class */ (function (_super) {
    __extends(GetSmsCampaign, _super);
    function GetSmsCampaign() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetSmsCampaign.getAttributeTypeMap = function () {
        return _super.getAttributeTypeMap.call(this).concat(GetSmsCampaign.attributeTypeMap);
    };
    GetSmsCampaign.discriminator = undefined;
    GetSmsCampaign.attributeTypeMap = [
        {
            "name": "recipients",
            "baseName": "recipients",
            "type": "GetSmsCampaignRecipients"
        },
        {
            "name": "statistics",
            "baseName": "statistics",
            "type": "GetSmsCampaignRecipients"
        }
    ];
    return GetSmsCampaign;
}(GetSmsCampaignOverview));
exports.GetSmsCampaign = GetSmsCampaign;
(function (GetSmsCampaignOverview) {
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Draft"] = 'draft'] = "Draft";
        StatusEnum[StatusEnum["Sent"] = 'sent'] = "Sent";
        StatusEnum[StatusEnum["Archive"] = 'archive'] = "Archive";
        StatusEnum[StatusEnum["Queued"] = 'queued'] = "Queued";
        StatusEnum[StatusEnum["Suspended"] = 'suspended'] = "Suspended";
        StatusEnum[StatusEnum["InProcess"] = 'inProcess'] = "InProcess";
    })(StatusEnum = GetSmsCampaignOverview.StatusEnum || (GetSmsCampaignOverview.StatusEnum = {}));
})(GetSmsCampaignOverview = exports.GetSmsCampaignOverview || (exports.GetSmsCampaignOverview = {}));
exports.GetSmsCampaignOverview = GetSmsCampaignOverview;
var GetSmsCampaignRecipients = /** @class */ (function () {
    function GetSmsCampaignRecipients() {
    }
    GetSmsCampaignRecipients.getAttributeTypeMap = function () {
        return GetSmsCampaignRecipients.attributeTypeMap;
    };
    GetSmsCampaignRecipients.discriminator = undefined;
    GetSmsCampaignRecipients.attributeTypeMap = [];
    return GetSmsCampaignRecipients;
}());
exports.GetSmsCampaignRecipients = GetSmsCampaignRecipients;
var GetSmsCampaignStats = /** @class */ (function () {
    function GetSmsCampaignStats() {
    }
    GetSmsCampaignStats.getAttributeTypeMap = function () {
        return GetSmsCampaignStats.attributeTypeMap;
    };
    GetSmsCampaignStats.discriminator = undefined;
    GetSmsCampaignStats.attributeTypeMap = [
        {
            "name": "delivered",
            "baseName": "delivered",
            "type": "number"
        },
        {
            "name": "sent",
            "baseName": "sent",
            "type": "number"
        },
        {
            "name": "processing",
            "baseName": "processing",
            "type": "number"
        },
        {
            "name": "softBounces",
            "baseName": "softBounces",
            "type": "number"
        },
        {
            "name": "hardBounces",
            "baseName": "hardBounces",
            "type": "number"
        },
        {
            "name": "unsubscriptions",
            "baseName": "unsubscriptions",
            "type": "number"
        },
        {
            "name": "answered",
            "baseName": "answered",
            "type": "number"
        }
    ];
    return GetSmsCampaignStats;
}());
exports.GetSmsCampaignStats = GetSmsCampaignStats;
var GetSmsCampaigns = /** @class */ (function () {
    function GetSmsCampaigns() {
    }
    GetSmsCampaigns.getAttributeTypeMap = function () {
        return GetSmsCampaigns.attributeTypeMap;
    };
    GetSmsCampaigns.discriminator = undefined;
    GetSmsCampaigns.attributeTypeMap = [
        {
            "name": "campaigns",
            "baseName": "campaigns",
            "type": "Array<any>"
        },
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        }
    ];
    return GetSmsCampaigns;
}());
exports.GetSmsCampaigns = GetSmsCampaigns;
var GetSmsEventReport = /** @class */ (function () {
    function GetSmsEventReport() {
    }
    GetSmsEventReport.getAttributeTypeMap = function () {
        return GetSmsEventReport.attributeTypeMap;
    };
    GetSmsEventReport.discriminator = undefined;
    GetSmsEventReport.attributeTypeMap = [
        {
            "name": "events",
            "baseName": "events",
            "type": "Array<GetSmsEventReportEvents>"
        }
    ];
    return GetSmsEventReport;
}());
exports.GetSmsEventReport = GetSmsEventReport;
var GetSmsEventReportEvents = /** @class */ (function () {
    function GetSmsEventReportEvents() {
    }
    GetSmsEventReportEvents.getAttributeTypeMap = function () {
        return GetSmsEventReportEvents.attributeTypeMap;
    };
    GetSmsEventReportEvents.discriminator = undefined;
    GetSmsEventReportEvents.attributeTypeMap = [
        {
            "name": "phoneNumber",
            "baseName": "phoneNumber",
            "type": "string"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "string"
        },
        {
            "name": "messageId",
            "baseName": "messageId",
            "type": "string"
        },
        {
            "name": "event",
            "baseName": "event",
            "type": "GetSmsEventReportEvents.EventEnum"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "reply",
            "baseName": "reply",
            "type": "string"
        },
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string"
        }
    ];
    return GetSmsEventReportEvents;
}());
exports.GetSmsEventReportEvents = GetSmsEventReportEvents;
(function (GetSmsEventReportEvents) {
    var EventEnum;
    (function (EventEnum) {
        EventEnum[EventEnum["Bounces"] = 'bounces'] = "Bounces";
        EventEnum[EventEnum["HardBounces"] = 'hardBounces'] = "HardBounces";
        EventEnum[EventEnum["SoftBounces"] = 'softBounces'] = "SoftBounces";
        EventEnum[EventEnum["Delivered"] = 'delivered'] = "Delivered";
        EventEnum[EventEnum["Sent"] = 'sent'] = "Sent";
        EventEnum[EventEnum["Accepted"] = 'accepted'] = "Accepted";
        EventEnum[EventEnum["Unsubscription"] = 'unsubscription'] = "Unsubscription";
        EventEnum[EventEnum["Replies"] = 'replies'] = "Replies";
        EventEnum[EventEnum["Blocked"] = 'blocked'] = "Blocked";
    })(EventEnum = GetSmsEventReportEvents.EventEnum || (GetSmsEventReportEvents.EventEnum = {}));
})(GetSmsEventReportEvents = exports.GetSmsEventReportEvents || (exports.GetSmsEventReportEvents = {}));
exports.GetSmsEventReportEvents = GetSmsEventReportEvents;
var GetSmtpTemplateOverview = /** @class */ (function () {
    function GetSmtpTemplateOverview() {
    }
    GetSmtpTemplateOverview.getAttributeTypeMap = function () {
        return GetSmtpTemplateOverview.attributeTypeMap;
    };
    GetSmtpTemplateOverview.discriminator = undefined;
    GetSmtpTemplateOverview.attributeTypeMap = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "isActive",
            "baseName": "isActive",
            "type": "boolean"
        },
        {
            "name": "testSent",
            "baseName": "testSent",
            "type": "boolean"
        },
        {
            "name": "sender",
            "baseName": "sender",
            "type": "GetSmtpTemplateOverviewSender"
        },
        {
            "name": "replyTo",
            "baseName": "replyTo",
            "type": "string"
        },
        {
            "name": "toField",
            "baseName": "toField",
            "type": "string"
        },
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string"
        },
        {
            "name": "htmlContent",
            "baseName": "htmlContent",
            "type": "string"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "string"
        },
        {
            "name": "modifiedAt",
            "baseName": "modifiedAt",
            "type": "string"
        },
        {
            "name": "doiTemplate",
            "baseName": "doiTemplate",
            "type": "boolean"
        }
    ];
    return GetSmtpTemplateOverview;
}());
exports.GetSmtpTemplateOverview = GetSmtpTemplateOverview;
var GetSmtpTemplateOverviewSender = /** @class */ (function () {
    function GetSmtpTemplateOverviewSender() {
    }
    GetSmtpTemplateOverviewSender.getAttributeTypeMap = function () {
        return GetSmtpTemplateOverviewSender.attributeTypeMap;
    };
    GetSmtpTemplateOverviewSender.discriminator = undefined;
    GetSmtpTemplateOverviewSender.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        }
    ];
    return GetSmtpTemplateOverviewSender;
}());
exports.GetSmtpTemplateOverviewSender = GetSmtpTemplateOverviewSender;
var GetSmtpTemplates = /** @class */ (function () {
    function GetSmtpTemplates() {
    }
    GetSmtpTemplates.getAttributeTypeMap = function () {
        return GetSmtpTemplates.attributeTypeMap;
    };
    GetSmtpTemplates.discriminator = undefined;
    GetSmtpTemplates.attributeTypeMap = [
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        },
        {
            "name": "templates",
            "baseName": "templates",
            "type": "Array<GetSmtpTemplateOverview>"
        }
    ];
    return GetSmtpTemplates;
}());
exports.GetSmtpTemplates = GetSmtpTemplates;
var GetSsoToken = /** @class */ (function () {
    function GetSsoToken() {
    }
    GetSsoToken.getAttributeTypeMap = function () {
        return GetSsoToken.attributeTypeMap;
    };
    GetSsoToken.discriminator = undefined;
    GetSsoToken.attributeTypeMap = [
        {
            "name": "token",
            "baseName": "token",
            "type": "string"
        }
    ];
    return GetSsoToken;
}());
exports.GetSsoToken = GetSsoToken;
var GetStatsByBrowser = /** @class */ (function (_super) {
    __extends(GetStatsByBrowser, _super);
    function GetStatsByBrowser() {
    }
    GetStatsByBrowser.getAttributeTypeMap = function () {
        return _super.getAttributeTypeMap.call(this).concat(GetStatsByBrowser.attributeTypeMap);
    };
    GetStatsByBrowser.discriminator = undefined;
    GetStatsByBrowser.attributeTypeMap = [];
    return GetStatsByBrowser;
}(null));
exports.GetStatsByBrowser = GetStatsByBrowser;
var GetStatsByDevice = /** @class */ (function () {
    function GetStatsByDevice() {
    }
    GetStatsByDevice.getAttributeTypeMap = function () {
        return GetStatsByDevice.attributeTypeMap;
    };
    GetStatsByDevice.discriminator = undefined;
    GetStatsByDevice.attributeTypeMap = [
        {
            "name": "desktop",
            "baseName": "desktop",
            "type": "{ [key: string]: GetDeviceBrowserStats; }"
        },
        {
            "name": "mobile",
            "baseName": "mobile",
            "type": "{ [key: string]: GetDeviceBrowserStats; }"
        },
        {
            "name": "tablet",
            "baseName": "tablet",
            "type": "{ [key: string]: GetDeviceBrowserStats; }"
        },
        {
            "name": "unknown",
            "baseName": "unknown",
            "type": "{ [key: string]: GetDeviceBrowserStats; }"
        }
    ];
    return GetStatsByDevice;
}());
exports.GetStatsByDevice = GetStatsByDevice;
var GetStatsByDomain = /** @class */ (function (_super) {
    __extends(GetStatsByDomain, _super);
    function GetStatsByDomain() {
    }
    GetStatsByDomain.getAttributeTypeMap = function () {
        return _super.getAttributeTypeMap.call(this).concat(GetStatsByDomain.attributeTypeMap);
    };
    GetStatsByDomain.discriminator = undefined;
    GetStatsByDomain.attributeTypeMap = [];
    return GetStatsByDomain;
}(null));
exports.GetStatsByDomain = GetStatsByDomain;
var GetTransacAggregatedSmsReport = /** @class */ (function () {
    function GetTransacAggregatedSmsReport() {
    }
    GetTransacAggregatedSmsReport.getAttributeTypeMap = function () {
        return GetTransacAggregatedSmsReport.attributeTypeMap;
    };
    GetTransacAggregatedSmsReport.discriminator = undefined;
    GetTransacAggregatedSmsReport.attributeTypeMap = [
        {
            "name": "range",
            "baseName": "range",
            "type": "string"
        },
        {
            "name": "requests",
            "baseName": "requests",
            "type": "number"
        },
        {
            "name": "delivered",
            "baseName": "delivered",
            "type": "number"
        },
        {
            "name": "hardBounces",
            "baseName": "hardBounces",
            "type": "number"
        },
        {
            "name": "softBounces",
            "baseName": "softBounces",
            "type": "number"
        },
        {
            "name": "blocked",
            "baseName": "blocked",
            "type": "number"
        },
        {
            "name": "unsubscribed",
            "baseName": "unsubscribed",
            "type": "number"
        },
        {
            "name": "replied",
            "baseName": "replied",
            "type": "number"
        },
        {
            "name": "accepted",
            "baseName": "accepted",
            "type": "number"
        },
        {
            "name": "rejected",
            "baseName": "rejected",
            "type": "number"
        }
    ];
    return GetTransacAggregatedSmsReport;
}());
exports.GetTransacAggregatedSmsReport = GetTransacAggregatedSmsReport;
var GetTransacBlockedContacts = /** @class */ (function () {
    function GetTransacBlockedContacts() {
    }
    GetTransacBlockedContacts.getAttributeTypeMap = function () {
        return GetTransacBlockedContacts.attributeTypeMap;
    };
    GetTransacBlockedContacts.discriminator = undefined;
    GetTransacBlockedContacts.attributeTypeMap = [
        {
            "name": "count",
            "baseName": "count",
            "type": "number"
        },
        {
            "name": "contacts",
            "baseName": "contacts",
            "type": "Array<GetTransacBlockedContactsContacts>"
        }
    ];
    return GetTransacBlockedContacts;
}());
exports.GetTransacBlockedContacts = GetTransacBlockedContacts;
var GetTransacBlockedContactsContacts = /** @class */ (function () {
    function GetTransacBlockedContactsContacts() {
    }
    GetTransacBlockedContactsContacts.getAttributeTypeMap = function () {
        return GetTransacBlockedContactsContacts.attributeTypeMap;
    };
    GetTransacBlockedContactsContacts.discriminator = undefined;
    GetTransacBlockedContactsContacts.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "senderEmail",
            "baseName": "senderEmail",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "GetTransacBlockedContactsReason"
        },
        {
            "name": "blockedAt",
            "baseName": "blockedAt",
            "type": "string"
        }
    ];
    return GetTransacBlockedContactsContacts;
}());
exports.GetTransacBlockedContactsContacts = GetTransacBlockedContactsContacts;
/**
* Reason for blocking / unsubscribing
*/
var GetTransacBlockedContactsReason = /** @class */ (function () {
    function GetTransacBlockedContactsReason() {
    }
    GetTransacBlockedContactsReason.getAttributeTypeMap = function () {
        return GetTransacBlockedContactsReason.attributeTypeMap;
    };
    GetTransacBlockedContactsReason.discriminator = undefined;
    GetTransacBlockedContactsReason.attributeTypeMap = [
        {
            "name": "code",
            "baseName": "code",
            "type": "GetTransacBlockedContactsReason.CodeEnum"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        }
    ];
    return GetTransacBlockedContactsReason;
}());
exports.GetTransacBlockedContactsReason = GetTransacBlockedContactsReason;
(function (GetTransacBlockedContactsReason) {
    var CodeEnum;
    (function (CodeEnum) {
        CodeEnum[CodeEnum["UnsubscribedViaMA"] = 'unsubscribedViaMA'] = "UnsubscribedViaMA";
        CodeEnum[CodeEnum["UnsubscribedViaEmail"] = 'unsubscribedViaEmail'] = "UnsubscribedViaEmail";
        CodeEnum[CodeEnum["AdminBlocked"] = 'adminBlocked'] = "AdminBlocked";
        CodeEnum[CodeEnum["UnsubscribedViaApi"] = 'unsubscribedViaApi'] = "UnsubscribedViaApi";
        CodeEnum[CodeEnum["HardBounce"] = 'hardBounce'] = "HardBounce";
        CodeEnum[CodeEnum["ContactFlaggedAsSpam"] = 'contactFlaggedAsSpam'] = "ContactFlaggedAsSpam";
    })(CodeEnum = GetTransacBlockedContactsReason.CodeEnum || (GetTransacBlockedContactsReason.CodeEnum = {}));
})(GetTransacBlockedContactsReason = exports.GetTransacBlockedContactsReason || (exports.GetTransacBlockedContactsReason = {}));
exports.GetTransacBlockedContactsReason = GetTransacBlockedContactsReason;
var GetTransacEmailContent = /** @class */ (function () {
    function GetTransacEmailContent() {
    }
    GetTransacEmailContent.getAttributeTypeMap = function () {
        return GetTransacEmailContent.attributeTypeMap;
    };
    GetTransacEmailContent.discriminator = undefined;
    GetTransacEmailContent.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "templateId",
            "baseName": "templateId",
            "type": "number"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "string"
        },
        {
            "name": "events",
            "baseName": "events",
            "type": "Array<GetTransacEmailContentEvents>"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "attachmentCount",
            "baseName": "attachmentCount",
            "type": "number"
        }
    ];
    return GetTransacEmailContent;
}());
exports.GetTransacEmailContent = GetTransacEmailContent;
var GetTransacEmailContentEvents = /** @class */ (function () {
    function GetTransacEmailContentEvents() {
    }
    GetTransacEmailContentEvents.getAttributeTypeMap = function () {
        return GetTransacEmailContentEvents.attributeTypeMap;
    };
    GetTransacEmailContentEvents.discriminator = undefined;
    GetTransacEmailContentEvents.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "time",
            "baseName": "time",
            "type": "string"
        }
    ];
    return GetTransacEmailContentEvents;
}());
exports.GetTransacEmailContentEvents = GetTransacEmailContentEvents;
var GetTransacEmailsList = /** @class */ (function () {
    function GetTransacEmailsList() {
    }
    GetTransacEmailsList.getAttributeTypeMap = function () {
        return GetTransacEmailsList.attributeTypeMap;
    };
    GetTransacEmailsList.discriminator = undefined;
    GetTransacEmailsList.attributeTypeMap = [
        {
            "name": "transactionalEmails",
            "baseName": "transactionalEmails",
            "type": "Array<GetTransacEmailsListTransactionalEmails>"
        }
    ];
    return GetTransacEmailsList;
}());
exports.GetTransacEmailsList = GetTransacEmailsList;
var GetTransacEmailsListTransactionalEmails = /** @class */ (function () {
    function GetTransacEmailsListTransactionalEmails() {
    }
    GetTransacEmailsListTransactionalEmails.getAttributeTypeMap = function () {
        return GetTransacEmailsListTransactionalEmails.attributeTypeMap;
    };
    GetTransacEmailsListTransactionalEmails.discriminator = undefined;
    GetTransacEmailsListTransactionalEmails.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "templateId",
            "baseName": "templateId",
            "type": "number"
        },
        {
            "name": "messageId",
            "baseName": "messageId",
            "type": "string"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "string"
        },
        {
            "name": "from",
            "baseName": "from",
            "type": "string"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<string>"
        }
    ];
    return GetTransacEmailsListTransactionalEmails;
}());
exports.GetTransacEmailsListTransactionalEmails = GetTransacEmailsListTransactionalEmails;
var GetTransacSmsReport = /** @class */ (function () {
    function GetTransacSmsReport() {
    }
    GetTransacSmsReport.getAttributeTypeMap = function () {
        return GetTransacSmsReport.attributeTypeMap;
    };
    GetTransacSmsReport.discriminator = undefined;
    GetTransacSmsReport.attributeTypeMap = [
        {
            "name": "reports",
            "baseName": "reports",
            "type": "Array<GetTransacSmsReportReports>"
        }
    ];
    return GetTransacSmsReport;
}());
exports.GetTransacSmsReport = GetTransacSmsReport;
var GetTransacSmsReportReports = /** @class */ (function () {
    function GetTransacSmsReportReports() {
    }
    GetTransacSmsReportReports.getAttributeTypeMap = function () {
        return GetTransacSmsReportReports.attributeTypeMap;
    };
    GetTransacSmsReportReports.discriminator = undefined;
    GetTransacSmsReportReports.attributeTypeMap = [
        {
            "name": "date",
            "baseName": "date",
            "type": "string"
        },
        {
            "name": "requests",
            "baseName": "requests",
            "type": "number"
        },
        {
            "name": "delivered",
            "baseName": "delivered",
            "type": "number"
        },
        {
            "name": "hardBounces",
            "baseName": "hardBounces",
            "type": "number"
        },
        {
            "name": "softBounces",
            "baseName": "softBounces",
            "type": "number"
        },
        {
            "name": "blocked",
            "baseName": "blocked",
            "type": "number"
        },
        {
            "name": "unsubscribed",
            "baseName": "unsubscribed",
            "type": "number"
        },
        {
            "name": "replied",
            "baseName": "replied",
            "type": "number"
        },
        {
            "name": "accepted",
            "baseName": "accepted",
            "type": "number"
        },
        {
            "name": "rejected",
            "baseName": "rejected",
            "type": "number"
        }
    ];
    return GetTransacSmsReportReports;
}());
exports.GetTransacSmsReportReports = GetTransacSmsReportReports;
var GetWebhook = /** @class */ (function () {
    function GetWebhook() {
    }
    GetWebhook.getAttributeTypeMap = function () {
        return GetWebhook.attributeTypeMap;
    };
    GetWebhook.discriminator = undefined;
    GetWebhook.attributeTypeMap = [
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "events",
            "baseName": "events",
            "type": "Array<string>"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "GetWebhook.TypeEnum"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "string"
        },
        {
            "name": "modifiedAt",
            "baseName": "modifiedAt",
            "type": "string"
        }
    ];
    return GetWebhook;
}());
exports.GetWebhook = GetWebhook;
(function (GetWebhook) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Marketing"] = 'marketing'] = "Marketing";
        TypeEnum[TypeEnum["Transac"] = 'transac'] = "Transac";
    })(TypeEnum = GetWebhook.TypeEnum || (GetWebhook.TypeEnum = {}));
})(GetWebhook = exports.GetWebhook || (exports.GetWebhook = {}));
exports.GetWebhook = GetWebhook;
var GetWebhooks = /** @class */ (function () {
    function GetWebhooks() {
    }
    GetWebhooks.getAttributeTypeMap = function () {
        return GetWebhooks.attributeTypeMap;
    };
    GetWebhooks.discriminator = undefined;
    GetWebhooks.attributeTypeMap = [
        {
            "name": "webhooks",
            "baseName": "webhooks",
            "type": "Array<any>"
        }
    ];
    return GetWebhooks;
}());
exports.GetWebhooks = GetWebhooks;
var ManageIp = /** @class */ (function () {
    function ManageIp() {
    }
    ManageIp.getAttributeTypeMap = function () {
        return ManageIp.attributeTypeMap;
    };
    ManageIp.discriminator = undefined;
    ManageIp.attributeTypeMap = [
        {
            "name": "ip",
            "baseName": "ip",
            "type": "string"
        }
    ];
    return ManageIp;
}());
exports.ManageIp = ManageIp;
var PostContactInfo = /** @class */ (function () {
    function PostContactInfo() {
    }
    PostContactInfo.getAttributeTypeMap = function () {
        return PostContactInfo.attributeTypeMap;
    };
    PostContactInfo.discriminator = undefined;
    PostContactInfo.attributeTypeMap = [
        {
            "name": "contacts",
            "baseName": "contacts",
            "type": "PostContactInfoContacts"
        }
    ];
    return PostContactInfo;
}());
exports.PostContactInfo = PostContactInfo;
var PostContactInfoContacts = /** @class */ (function () {
    function PostContactInfoContacts() {
    }
    PostContactInfoContacts.getAttributeTypeMap = function () {
        return PostContactInfoContacts.attributeTypeMap;
    };
    PostContactInfoContacts.discriminator = undefined;
    PostContactInfoContacts.attributeTypeMap = [
        {
            "name": "success",
            "baseName": "success",
            "type": "Array<string>"
        },
        {
            "name": "failure",
            "baseName": "failure",
            "type": "Array<string>"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        },
        {
            "name": "processId",
            "baseName": "processId",
            "type": "number"
        }
    ];
    return PostContactInfoContacts;
}());
exports.PostContactInfoContacts = PostContactInfoContacts;
var PostSendFailed = /** @class */ (function () {
    function PostSendFailed() {
    }
    PostSendFailed.getAttributeTypeMap = function () {
        return PostSendFailed.attributeTypeMap;
    };
    PostSendFailed.discriminator = undefined;
    PostSendFailed.attributeTypeMap = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "unexistingEmails",
            "baseName": "unexistingEmails",
            "type": "Array<string>"
        },
        {
            "name": "withoutListEmails",
            "baseName": "withoutListEmails",
            "type": "Array<string>"
        },
        {
            "name": "blackListedEmails",
            "baseName": "blackListedEmails",
            "type": "Array<string>"
        }
    ];
    return PostSendFailed;
}());
exports.PostSendFailed = PostSendFailed;
var PostSendSmsTestFailed = /** @class */ (function () {
    function PostSendSmsTestFailed() {
    }
    PostSendSmsTestFailed.getAttributeTypeMap = function () {
        return PostSendSmsTestFailed.attributeTypeMap;
    };
    PostSendSmsTestFailed.discriminator = undefined;
    PostSendSmsTestFailed.attributeTypeMap = [
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "unexistingSms",
            "baseName": "unexistingSms",
            "type": "Array<string>"
        },
        {
            "name": "withoutListSms",
            "baseName": "withoutListSms",
            "type": "Array<string>"
        }
    ];
    return PostSendSmsTestFailed;
}());
exports.PostSendSmsTestFailed = PostSendSmsTestFailed;
var RemainingCreditModel = /** @class */ (function () {
    function RemainingCreditModel() {
    }
    RemainingCreditModel.getAttributeTypeMap = function () {
        return RemainingCreditModel.attributeTypeMap;
    };
    RemainingCreditModel.discriminator = undefined;
    RemainingCreditModel.attributeTypeMap = [
        {
            "name": "child",
            "baseName": "child",
            "type": "RemainingCreditModelChild"
        },
        {
            "name": "reseller",
            "baseName": "reseller",
            "type": "RemainingCreditModelReseller"
        }
    ];
    return RemainingCreditModel;
}());
exports.RemainingCreditModel = RemainingCreditModel;
/**
* Credits remaining for child account
*/
var RemainingCreditModelChild = /** @class */ (function () {
    function RemainingCreditModelChild() {
    }
    RemainingCreditModelChild.getAttributeTypeMap = function () {
        return RemainingCreditModelChild.attributeTypeMap;
    };
    RemainingCreditModelChild.discriminator = undefined;
    RemainingCreditModelChild.attributeTypeMap = [
        {
            "name": "sms",
            "baseName": "sms",
            "type": "number"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "number"
        }
    ];
    return RemainingCreditModelChild;
}());
exports.RemainingCreditModelChild = RemainingCreditModelChild;
var RemainingCreditModelReseller = /** @class */ (function () {
    function RemainingCreditModelReseller() {
    }
    RemainingCreditModelReseller.getAttributeTypeMap = function () {
        return RemainingCreditModelReseller.attributeTypeMap;
    };
    RemainingCreditModelReseller.discriminator = undefined;
    RemainingCreditModelReseller.attributeTypeMap = [
        {
            "name": "sms",
            "baseName": "sms",
            "type": "number"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "number"
        }
    ];
    return RemainingCreditModelReseller;
}());
exports.RemainingCreditModelReseller = RemainingCreditModelReseller;
var RemoveContactFromList = /** @class */ (function () {
    function RemoveContactFromList() {
    }
    RemoveContactFromList.getAttributeTypeMap = function () {
        return RemoveContactFromList.attributeTypeMap;
    };
    RemoveContactFromList.discriminator = undefined;
    RemoveContactFromList.attributeTypeMap = [
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<string>"
        },
        {
            "name": "ids",
            "baseName": "ids",
            "type": "Array<number>"
        },
        {
            "name": "all",
            "baseName": "all",
            "type": "boolean"
        }
    ];
    return RemoveContactFromList;
}());
exports.RemoveContactFromList = RemoveContactFromList;
var RemoveCredits = /** @class */ (function () {
    function RemoveCredits() {
    }
    RemoveCredits.getAttributeTypeMap = function () {
        return RemoveCredits.attributeTypeMap;
    };
    RemoveCredits.discriminator = undefined;
    RemoveCredits.attributeTypeMap = [
        {
            "name": "sms",
            "baseName": "sms",
            "type": "number"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "number"
        }
    ];
    return RemoveCredits;
}());
exports.RemoveCredits = RemoveCredits;
var RequestContactExport = /** @class */ (function () {
    function RequestContactExport() {
    }
    RequestContactExport.getAttributeTypeMap = function () {
        return RequestContactExport.attributeTypeMap;
    };
    RequestContactExport.discriminator = undefined;
    RequestContactExport.attributeTypeMap = [
        {
            "name": "exportAttributes",
            "baseName": "exportAttributes",
            "type": "Array<string>"
        },
        {
            "name": "contactFilter",
            "baseName": "contactFilter",
            "type": "any"
        },
        {
            "name": "customContactFilter",
            "baseName": "customContactFilter",
            "type": "RequestContactExportCustomContactFilter"
        },
        {
            "name": "notifyUrl",
            "baseName": "notifyUrl",
            "type": "string"
        }
    ];
    return RequestContactExport;
}());
exports.RequestContactExport = RequestContactExport;
/**
* Only one of the two filter options (contactFilter or customContactFilter) can be passed in the request. Set the filter for the contacts to be exported.
*/
var RequestContactExportCustomContactFilter = /** @class */ (function () {
    function RequestContactExportCustomContactFilter() {
    }
    RequestContactExportCustomContactFilter.getAttributeTypeMap = function () {
        return RequestContactExportCustomContactFilter.attributeTypeMap;
    };
    RequestContactExportCustomContactFilter.discriminator = undefined;
    RequestContactExportCustomContactFilter.attributeTypeMap = [
        {
            "name": "actionForContacts",
            "baseName": "actionForContacts",
            "type": "RequestContactExportCustomContactFilter.ActionForContactsEnum"
        },
        {
            "name": "actionForEmailCampaigns",
            "baseName": "actionForEmailCampaigns",
            "type": "RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum"
        },
        {
            "name": "actionForSmsCampaigns",
            "baseName": "actionForSmsCampaigns",
            "type": "RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum"
        },
        {
            "name": "listId",
            "baseName": "listId",
            "type": "number"
        },
        {
            "name": "emailCampaignId",
            "baseName": "emailCampaignId",
            "type": "number"
        },
        {
            "name": "smsCampaignId",
            "baseName": "smsCampaignId",
            "type": "number"
        }
    ];
    return RequestContactExportCustomContactFilter;
}());
exports.RequestContactExportCustomContactFilter = RequestContactExportCustomContactFilter;
(function (RequestContactExportCustomContactFilter) {
    var ActionForContactsEnum;
    (function (ActionForContactsEnum) {
        ActionForContactsEnum[ActionForContactsEnum["AllContacts"] = 'allContacts'] = "AllContacts";
        ActionForContactsEnum[ActionForContactsEnum["Subscribed"] = 'subscribed'] = "Subscribed";
        ActionForContactsEnum[ActionForContactsEnum["Unsubscribed"] = 'unsubscribed'] = "Unsubscribed";
        ActionForContactsEnum[ActionForContactsEnum["UnsubscribedPerList"] = 'unsubscribedPerList'] = "UnsubscribedPerList";
    })(ActionForContactsEnum = RequestContactExportCustomContactFilter.ActionForContactsEnum || (RequestContactExportCustomContactFilter.ActionForContactsEnum = {}));
    var ActionForEmailCampaignsEnum;
    (function (ActionForEmailCampaignsEnum) {
        ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum["Openers"] = 'openers'] = "Openers";
        ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum["NonOpeners"] = 'nonOpeners'] = "NonOpeners";
        ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum["Clickers"] = 'clickers'] = "Clickers";
        ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum["NonClickers"] = 'nonClickers'] = "NonClickers";
        ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum["Unsubscribed"] = 'unsubscribed'] = "Unsubscribed";
        ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum["HardBounces"] = 'hardBounces'] = "HardBounces";
        ActionForEmailCampaignsEnum[ActionForEmailCampaignsEnum["SoftBounces"] = 'softBounces'] = "SoftBounces";
    })(ActionForEmailCampaignsEnum = RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum || (RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum = {}));
    var ActionForSmsCampaignsEnum;
    (function (ActionForSmsCampaignsEnum) {
        ActionForSmsCampaignsEnum[ActionForSmsCampaignsEnum["HardBounces"] = 'hardBounces'] = "HardBounces";
        ActionForSmsCampaignsEnum[ActionForSmsCampaignsEnum["SoftBounces"] = 'softBounces'] = "SoftBounces";
        ActionForSmsCampaignsEnum[ActionForSmsCampaignsEnum["Unsubscribed"] = 'unsubscribed'] = "Unsubscribed";
    })(ActionForSmsCampaignsEnum = RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum || (RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum = {}));
})(RequestContactExportCustomContactFilter = exports.RequestContactExportCustomContactFilter || (exports.RequestContactExportCustomContactFilter = {}));
exports.RequestContactExportCustomContactFilter = RequestContactExportCustomContactFilter;
var RequestContactImport = /** @class */ (function () {
    function RequestContactImport() {
    }
    RequestContactImport.getAttributeTypeMap = function () {
        return RequestContactImport.attributeTypeMap;
    };
    RequestContactImport.discriminator = undefined;
    RequestContactImport.attributeTypeMap = [
        {
            "name": "fileUrl",
            "baseName": "fileUrl",
            "type": "string"
        },
        {
            "name": "fileBody",
            "baseName": "fileBody",
            "type": "string"
        },
        {
            "name": "listIds",
            "baseName": "listIds",
            "type": "Array<number>"
        },
        {
            "name": "notifyUrl",
            "baseName": "notifyUrl",
            "type": "string"
        },
        {
            "name": "newList",
            "baseName": "newList",
            "type": "RequestContactImportNewList"
        },
        {
            "name": "emailBlacklist",
            "baseName": "emailBlacklist",
            "type": "boolean"
        },
        {
            "name": "smsBlacklist",
            "baseName": "smsBlacklist",
            "type": "boolean"
        },
        {
            "name": "updateExistingContacts",
            "baseName": "updateExistingContacts",
            "type": "boolean"
        },
        {
            "name": "emptyContactsAttributes",
            "baseName": "emptyContactsAttributes",
            "type": "boolean"
        }
    ];
    return RequestContactImport;
}());
exports.RequestContactImport = RequestContactImport;
/**
* To create a new list and import the contacts into it, pass the listName and an optional folderId.
*/
var RequestContactImportNewList = /** @class */ (function () {
    function RequestContactImportNewList() {
    }
    RequestContactImportNewList.getAttributeTypeMap = function () {
        return RequestContactImportNewList.attributeTypeMap;
    };
    RequestContactImportNewList.discriminator = undefined;
    RequestContactImportNewList.attributeTypeMap = [
        {
            "name": "listName",
            "baseName": "listName",
            "type": "string"
        },
        {
            "name": "folderId",
            "baseName": "folderId",
            "type": "number"
        }
    ];
    return RequestContactImportNewList;
}());
exports.RequestContactImportNewList = RequestContactImportNewList;
var RequestSmsRecipientExport = /** @class */ (function () {
    function RequestSmsRecipientExport() {
    }
    RequestSmsRecipientExport.getAttributeTypeMap = function () {
        return RequestSmsRecipientExport.attributeTypeMap;
    };
    RequestSmsRecipientExport.discriminator = undefined;
    RequestSmsRecipientExport.attributeTypeMap = [
        {
            "name": "notifyURL",
            "baseName": "notifyURL",
            "type": "string"
        },
        {
            "name": "recipientsType",
            "baseName": "recipientsType",
            "type": "RequestSmsRecipientExport.RecipientsTypeEnum"
        }
    ];
    return RequestSmsRecipientExport;
}());
exports.RequestSmsRecipientExport = RequestSmsRecipientExport;
(function (RequestSmsRecipientExport) {
    var RecipientsTypeEnum;
    (function (RecipientsTypeEnum) {
        RecipientsTypeEnum[RecipientsTypeEnum["All"] = 'all'] = "All";
        RecipientsTypeEnum[RecipientsTypeEnum["Delivered"] = 'delivered'] = "Delivered";
        RecipientsTypeEnum[RecipientsTypeEnum["Answered"] = 'answered'] = "Answered";
        RecipientsTypeEnum[RecipientsTypeEnum["SoftBounces"] = 'softBounces'] = "SoftBounces";
        RecipientsTypeEnum[RecipientsTypeEnum["HardBounces"] = 'hardBounces'] = "HardBounces";
        RecipientsTypeEnum[RecipientsTypeEnum["Unsubscribed"] = 'unsubscribed'] = "Unsubscribed";
    })(RecipientsTypeEnum = RequestSmsRecipientExport.RecipientsTypeEnum || (RequestSmsRecipientExport.RecipientsTypeEnum = {}));
})(RequestSmsRecipientExport = exports.RequestSmsRecipientExport || (exports.RequestSmsRecipientExport = {}));
exports.RequestSmsRecipientExport = RequestSmsRecipientExport;
var SendEmail = /** @class */ (function () {
    function SendEmail() {
    }
    SendEmail.getAttributeTypeMap = function () {
        return SendEmail.attributeTypeMap;
    };
    SendEmail.discriminator = undefined;
    SendEmail.attributeTypeMap = [
        {
            "name": "emailTo",
            "baseName": "emailTo",
            "type": "Array<string>"
        },
        {
            "name": "emailBcc",
            "baseName": "emailBcc",
            "type": "Array<string>"
        },
        {
            "name": "emailCc",
            "baseName": "emailCc",
            "type": "Array<string>"
        },
        {
            "name": "replyTo",
            "baseName": "replyTo",
            "type": "string"
        },
        {
            "name": "attachmentUrl",
            "baseName": "attachmentUrl",
            "type": "string"
        },
        {
            "name": "attachment",
            "baseName": "attachment",
            "type": "Array<SendEmailAttachment>"
        },
        {
            "name": "headers",
            "baseName": "headers",
            "type": "any"
        },
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "any"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<string>"
        }
    ];
    return SendEmail;
}());
exports.SendEmail = SendEmail;
var SendEmailAttachment = /** @class */ (function () {
    function SendEmailAttachment() {
    }
    SendEmailAttachment.getAttributeTypeMap = function () {
        return SendEmailAttachment.attributeTypeMap;
    };
    SendEmailAttachment.discriminator = undefined;
    SendEmailAttachment.attributeTypeMap = [
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return SendEmailAttachment;
}());
exports.SendEmailAttachment = SendEmailAttachment;
var SendReport = /** @class */ (function () {
    function SendReport() {
    }
    SendReport.getAttributeTypeMap = function () {
        return SendReport.attributeTypeMap;
    };
    SendReport.discriminator = undefined;
    SendReport.attributeTypeMap = [
        {
            "name": "language",
            "baseName": "language",
            "type": "SendReport.LanguageEnum"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "SendReportEmail"
        }
    ];
    return SendReport;
}());
exports.SendReport = SendReport;
(function (SendReport) {
    var LanguageEnum;
    (function (LanguageEnum) {
        LanguageEnum[LanguageEnum["Fr"] = 'fr'] = "Fr";
        LanguageEnum[LanguageEnum["Es"] = 'es'] = "Es";
        LanguageEnum[LanguageEnum["Pt"] = 'pt'] = "Pt";
        LanguageEnum[LanguageEnum["It"] = 'it'] = "It";
        LanguageEnum[LanguageEnum["De"] = 'de'] = "De";
        LanguageEnum[LanguageEnum["En"] = 'en'] = "En";
    })(LanguageEnum = SendReport.LanguageEnum || (SendReport.LanguageEnum = {}));
})(SendReport = exports.SendReport || (exports.SendReport = {}));
exports.SendReport = SendReport;
/**
* Custom attributes for the report email.
*/
var SendReportEmail = /** @class */ (function () {
    function SendReportEmail() {
    }
    SendReportEmail.getAttributeTypeMap = function () {
        return SendReportEmail.attributeTypeMap;
    };
    SendReportEmail.discriminator = undefined;
    SendReportEmail.attributeTypeMap = [
        {
            "name": "to",
            "baseName": "to",
            "type": "Array<string>"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        }
    ];
    return SendReportEmail;
}());
exports.SendReportEmail = SendReportEmail;
var SendSms = /** @class */ (function () {
    function SendSms() {
    }
    SendSms.getAttributeTypeMap = function () {
        return SendSms.attributeTypeMap;
    };
    SendSms.discriminator = undefined;
    SendSms.attributeTypeMap = [
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "messageId",
            "baseName": "messageId",
            "type": "number"
        },
        {
            "name": "smsCount",
            "baseName": "smsCount",
            "type": "number"
        },
        {
            "name": "usedCredits",
            "baseName": "usedCredits",
            "type": "number"
        },
        {
            "name": "remainingCredits",
            "baseName": "remainingCredits",
            "type": "number"
        }
    ];
    return SendSms;
}());
exports.SendSms = SendSms;
var SendSmtpEmail = /** @class */ (function () {
    function SendSmtpEmail() {
    }
    SendSmtpEmail.getAttributeTypeMap = function () {
        return SendSmtpEmail.attributeTypeMap;
    };
    SendSmtpEmail.discriminator = undefined;
    SendSmtpEmail.attributeTypeMap = [
        {
            "name": "sender",
            "baseName": "sender",
            "type": "SendSmtpEmailSender"
        },
        {
            "name": "to",
            "baseName": "to",
            "type": "Array<SendSmtpEmailTo>"
        },
        {
            "name": "bcc",
            "baseName": "bcc",
            "type": "Array<SendSmtpEmailBcc>"
        },
        {
            "name": "cc",
            "baseName": "cc",
            "type": "Array<SendSmtpEmailCc>"
        },
        {
            "name": "htmlContent",
            "baseName": "htmlContent",
            "type": "string"
        },
        {
            "name": "textContent",
            "baseName": "textContent",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "replyTo",
            "baseName": "replyTo",
            "type": "SendSmtpEmailReplyTo"
        },
        {
            "name": "attachment",
            "baseName": "attachment",
            "type": "Array<SendSmtpEmailAttachment>"
        },
        {
            "name": "headers",
            "baseName": "headers",
            "type": "any"
        },
        {
            "name": "templateId",
            "baseName": "templateId",
            "type": "number"
        },
        {
            "name": "params",
            "baseName": "params",
            "type": "any"
        },
        {
            "name": "messageVersions",
            "baseName": "messageVersions",
            "type": "Array<SendSmtpEmailMessageVersions>"
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<string>"
        }
    ];
    return SendSmtpEmail;
}());
exports.SendSmtpEmail = SendSmtpEmail;
var SendSmtpEmailAttachment = /** @class */ (function () {
    function SendSmtpEmailAttachment() {
    }
    SendSmtpEmailAttachment.getAttributeTypeMap = function () {
        return SendSmtpEmailAttachment.attributeTypeMap;
    };
    SendSmtpEmailAttachment.discriminator = undefined;
    SendSmtpEmailAttachment.attributeTypeMap = [
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return SendSmtpEmailAttachment;
}());
exports.SendSmtpEmailAttachment = SendSmtpEmailAttachment;
var SendSmtpEmailBcc = /** @class */ (function () {
    function SendSmtpEmailBcc() {
    }
    SendSmtpEmailBcc.getAttributeTypeMap = function () {
        return SendSmtpEmailBcc.attributeTypeMap;
    };
    SendSmtpEmailBcc.discriminator = undefined;
    SendSmtpEmailBcc.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return SendSmtpEmailBcc;
}());
exports.SendSmtpEmailBcc = SendSmtpEmailBcc;
var SendSmtpEmailCc = /** @class */ (function () {
    function SendSmtpEmailCc() {
    }
    SendSmtpEmailCc.getAttributeTypeMap = function () {
        return SendSmtpEmailCc.attributeTypeMap;
    };
    SendSmtpEmailCc.discriminator = undefined;
    SendSmtpEmailCc.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return SendSmtpEmailCc;
}());
exports.SendSmtpEmailCc = SendSmtpEmailCc;
var SendSmtpEmailMessageVersions = /** @class */ (function () {
    function SendSmtpEmailMessageVersions() {
    }
    SendSmtpEmailMessageVersions.getAttributeTypeMap = function () {
        return SendSmtpEmailMessageVersions.attributeTypeMap;
    };
    SendSmtpEmailMessageVersions.discriminator = undefined;
    SendSmtpEmailMessageVersions.attributeTypeMap = [
        {
            "name": "to",
            "baseName": "to",
            "type": "Array<SendSmtpEmailTo1>"
        },
        {
            "name": "params",
            "baseName": "params",
            "type": "{ [key: string]: any; }"
        },
        {
            "name": "bcc",
            "baseName": "bcc",
            "type": "Array<SendSmtpEmailBcc>"
        },
        {
            "name": "cc",
            "baseName": "cc",
            "type": "Array<SendSmtpEmailCc>"
        },
        {
            "name": "replyTo",
            "baseName": "replyTo",
            "type": "SendSmtpEmailReplyTo1"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        }
    ];
    return SendSmtpEmailMessageVersions;
}());
exports.SendSmtpEmailMessageVersions = SendSmtpEmailMessageVersions;
/**
* Email (required), along with name (optional), on which transactional mail recipients will be able to reply back. For example, {\"email\":\"ann6533@example.com\", \"name\":\"Ann\"}.
*/
var SendSmtpEmailReplyTo = /** @class */ (function () {
    function SendSmtpEmailReplyTo() {
    }
    SendSmtpEmailReplyTo.getAttributeTypeMap = function () {
        return SendSmtpEmailReplyTo.attributeTypeMap;
    };
    SendSmtpEmailReplyTo.discriminator = undefined;
    SendSmtpEmailReplyTo.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return SendSmtpEmailReplyTo;
}());
exports.SendSmtpEmailReplyTo = SendSmtpEmailReplyTo;
/**
* Email (required), along with name (optional), on which transactional mail recipients will be able to reply back. For example, {\"email\":\"ann6533@example.com\", \"name\":\"Ann\"}
*/
var SendSmtpEmailReplyTo1 = /** @class */ (function () {
    function SendSmtpEmailReplyTo1() {
    }
    SendSmtpEmailReplyTo1.getAttributeTypeMap = function () {
        return SendSmtpEmailReplyTo1.attributeTypeMap;
    };
    SendSmtpEmailReplyTo1.discriminator = undefined;
    SendSmtpEmailReplyTo1.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return SendSmtpEmailReplyTo1;
}());
exports.SendSmtpEmailReplyTo1 = SendSmtpEmailReplyTo1;
/**
* Mandatory if `templateId` is not passed. Pass `name` (optional) and `email` OR `id` of sender from which emails will be sent. `name` will be ignored if passed along with sender `id`. For example, {\"name\":\"Mary from MyShop\", \"email\":\"no-reply@myshop.com\"} or {\"id\":2}
*/
var SendSmtpEmailSender = /** @class */ (function () {
    function SendSmtpEmailSender() {
    }
    SendSmtpEmailSender.getAttributeTypeMap = function () {
        return SendSmtpEmailSender.attributeTypeMap;
    };
    SendSmtpEmailSender.discriminator = undefined;
    SendSmtpEmailSender.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        }
    ];
    return SendSmtpEmailSender;
}());
exports.SendSmtpEmailSender = SendSmtpEmailSender;
var SendSmtpEmailTo = /** @class */ (function () {
    function SendSmtpEmailTo() {
    }
    SendSmtpEmailTo.getAttributeTypeMap = function () {
        return SendSmtpEmailTo.attributeTypeMap;
    };
    SendSmtpEmailTo.discriminator = undefined;
    SendSmtpEmailTo.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return SendSmtpEmailTo;
}());
exports.SendSmtpEmailTo = SendSmtpEmailTo;
var SendSmtpEmailTo1 = /** @class */ (function () {
    function SendSmtpEmailTo1() {
    }
    SendSmtpEmailTo1.getAttributeTypeMap = function () {
        return SendSmtpEmailTo1.attributeTypeMap;
    };
    SendSmtpEmailTo1.discriminator = undefined;
    SendSmtpEmailTo1.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return SendSmtpEmailTo1;
}());
exports.SendSmtpEmailTo1 = SendSmtpEmailTo1;
var SendTemplateEmail = /** @class */ (function () {
    function SendTemplateEmail() {
    }
    SendTemplateEmail.getAttributeTypeMap = function () {
        return SendTemplateEmail.attributeTypeMap;
    };
    SendTemplateEmail.discriminator = undefined;
    SendTemplateEmail.attributeTypeMap = [
        {
            "name": "messageId",
            "baseName": "messageId",
            "type": "string"
        }
    ];
    return SendTemplateEmail;
}());
exports.SendTemplateEmail = SendTemplateEmail;
var SendTestEmail = /** @class */ (function () {
    function SendTestEmail() {
    }
    SendTestEmail.getAttributeTypeMap = function () {
        return SendTestEmail.attributeTypeMap;
    };
    SendTestEmail.discriminator = undefined;
    SendTestEmail.attributeTypeMap = [
        {
            "name": "emailTo",
            "baseName": "emailTo",
            "type": "Array<string>"
        }
    ];
    return SendTestEmail;
}());
exports.SendTestEmail = SendTestEmail;
var SendTestSms = /** @class */ (function () {
    function SendTestSms() {
    }
    SendTestSms.getAttributeTypeMap = function () {
        return SendTestSms.attributeTypeMap;
    };
    SendTestSms.discriminator = undefined;
    SendTestSms.attributeTypeMap = [
        {
            "name": "phoneNumber",
            "baseName": "phoneNumber",
            "type": "string"
        }
    ];
    return SendTestSms;
}());
exports.SendTestSms = SendTestSms;
var SendTransacSms = /** @class */ (function () {
    function SendTransacSms() {
    }
    SendTransacSms.getAttributeTypeMap = function () {
        return SendTransacSms.attributeTypeMap;
    };
    SendTransacSms.discriminator = undefined;
    SendTransacSms.attributeTypeMap = [
        {
            "name": "sender",
            "baseName": "sender",
            "type": "string"
        },
        {
            "name": "recipient",
            "baseName": "recipient",
            "type": "string"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "SendTransacSms.TypeEnum"
        },
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string"
        },
        {
            "name": "webUrl",
            "baseName": "webUrl",
            "type": "string"
        }
    ];
    return SendTransacSms;
}());
exports.SendTransacSms = SendTransacSms;
(function (SendTransacSms) {
    var TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Transactional"] = 'transactional'] = "Transactional";
        TypeEnum[TypeEnum["Marketing"] = 'marketing'] = "Marketing";
    })(TypeEnum = SendTransacSms.TypeEnum || (SendTransacSms.TypeEnum = {}));
})(SendTransacSms = exports.SendTransacSms || (exports.SendTransacSms = {}));
exports.SendTransacSms = SendTransacSms;
var UpdateAttribute = /** @class */ (function () {
    function UpdateAttribute() {
    }
    UpdateAttribute.getAttributeTypeMap = function () {
        return UpdateAttribute.attributeTypeMap;
    };
    UpdateAttribute.discriminator = undefined;
    UpdateAttribute.attributeTypeMap = [
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "enumeration",
            "baseName": "enumeration",
            "type": "Array<UpdateAttributeEnumeration>"
        }
    ];
    return UpdateAttribute;
}());
exports.UpdateAttribute = UpdateAttribute;
var UpdateAttributeEnumeration = /** @class */ (function () {
    function UpdateAttributeEnumeration() {
    }
    UpdateAttributeEnumeration.getAttributeTypeMap = function () {
        return UpdateAttributeEnumeration.attributeTypeMap;
    };
    UpdateAttributeEnumeration.discriminator = undefined;
    UpdateAttributeEnumeration.attributeTypeMap = [
        {
            "name": "value",
            "baseName": "value",
            "type": "number"
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string"
        }
    ];
    return UpdateAttributeEnumeration;
}());
exports.UpdateAttributeEnumeration = UpdateAttributeEnumeration;
/**
* Status of the campaign
*/
var UpdateCampaignStatus = /** @class */ (function () {
    function UpdateCampaignStatus() {
    }
    UpdateCampaignStatus.getAttributeTypeMap = function () {
        return UpdateCampaignStatus.attributeTypeMap;
    };
    UpdateCampaignStatus.discriminator = undefined;
    UpdateCampaignStatus.attributeTypeMap = [
        {
            "name": "status",
            "baseName": "status",
            "type": "UpdateCampaignStatus.StatusEnum"
        }
    ];
    return UpdateCampaignStatus;
}());
exports.UpdateCampaignStatus = UpdateCampaignStatus;
(function (UpdateCampaignStatus) {
    var StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Suspended"] = 'suspended'] = "Suspended";
        StatusEnum[StatusEnum["Archive"] = 'archive'] = "Archive";
        StatusEnum[StatusEnum["Darchive"] = 'darchive'] = "Darchive";
        StatusEnum[StatusEnum["Sent"] = 'sent'] = "Sent";
        StatusEnum[StatusEnum["Queued"] = 'queued'] = "Queued";
        StatusEnum[StatusEnum["Replicate"] = 'replicate'] = "Replicate";
        StatusEnum[StatusEnum["ReplicateTemplate"] = 'replicateTemplate'] = "ReplicateTemplate";
        StatusEnum[StatusEnum["Draft"] = 'draft'] = "Draft";
    })(StatusEnum = UpdateCampaignStatus.StatusEnum || (UpdateCampaignStatus.StatusEnum = {}));
})(UpdateCampaignStatus = exports.UpdateCampaignStatus || (exports.UpdateCampaignStatus = {}));
exports.UpdateCampaignStatus = UpdateCampaignStatus;
var UpdateChild = /** @class */ (function () {
    function UpdateChild() {
    }
    UpdateChild.getAttributeTypeMap = function () {
        return UpdateChild.attributeTypeMap;
    };
    UpdateChild.discriminator = undefined;
    UpdateChild.attributeTypeMap = [
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "firstName",
            "baseName": "firstName",
            "type": "string"
        },
        {
            "name": "lastName",
            "baseName": "lastName",
            "type": "string"
        },
        {
            "name": "companyName",
            "baseName": "companyName",
            "type": "string"
        },
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        }
    ];
    return UpdateChild;
}());
exports.UpdateChild = UpdateChild;
var UpdateChildAccountStatus = /** @class */ (function () {
    function UpdateChildAccountStatus() {
    }
    UpdateChildAccountStatus.getAttributeTypeMap = function () {
        return UpdateChildAccountStatus.attributeTypeMap;
    };
    UpdateChildAccountStatus.discriminator = undefined;
    UpdateChildAccountStatus.attributeTypeMap = [
        {
            "name": "transactionalEmail",
            "baseName": "transactionalEmail",
            "type": "boolean"
        },
        {
            "name": "transactionalSms",
            "baseName": "transactionalSms",
            "type": "boolean"
        },
        {
            "name": "marketingAutomation",
            "baseName": "marketingAutomation",
            "type": "boolean"
        },
        {
            "name": "smsCampaign",
            "baseName": "smsCampaign",
            "type": "boolean"
        }
    ];
    return UpdateChildAccountStatus;
}());
exports.UpdateChildAccountStatus = UpdateChildAccountStatus;
var UpdateChildDomain = /** @class */ (function () {
    function UpdateChildDomain() {
    }
    UpdateChildDomain.getAttributeTypeMap = function () {
        return UpdateChildDomain.attributeTypeMap;
    };
    UpdateChildDomain.discriminator = undefined;
    UpdateChildDomain.attributeTypeMap = [
        {
            "name": "domain",
            "baseName": "domain",
            "type": "string"
        }
    ];
    return UpdateChildDomain;
}());
exports.UpdateChildDomain = UpdateChildDomain;
var UpdateContact = /** @class */ (function () {
    function UpdateContact() {
    }
    UpdateContact.getAttributeTypeMap = function () {
        return UpdateContact.attributeTypeMap;
    };
    UpdateContact.discriminator = undefined;
    UpdateContact.attributeTypeMap = [
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "any"
        },
        {
            "name": "emailBlacklisted",
            "baseName": "emailBlacklisted",
            "type": "boolean"
        },
        {
            "name": "smsBlacklisted",
            "baseName": "smsBlacklisted",
            "type": "boolean"
        },
        {
            "name": "listIds",
            "baseName": "listIds",
            "type": "Array<number>"
        },
        {
            "name": "unlinkListIds",
            "baseName": "unlinkListIds",
            "type": "Array<number>"
        },
        {
            "name": "smtpBlacklistSender",
            "baseName": "smtpBlacklistSender",
            "type": "Array<string>"
        }
    ];
    return UpdateContact;
}());
exports.UpdateContact = UpdateContact;
var UpdateEmailCampaign = /** @class */ (function () {
    function UpdateEmailCampaign() {
    }
    UpdateEmailCampaign.getAttributeTypeMap = function () {
        return UpdateEmailCampaign.attributeTypeMap;
    };
    UpdateEmailCampaign.discriminator = undefined;
    UpdateEmailCampaign.attributeTypeMap = [
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string"
        },
        {
            "name": "sender",
            "baseName": "sender",
            "type": "UpdateEmailCampaignSender"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "htmlContent",
            "baseName": "htmlContent",
            "type": "string"
        },
        {
            "name": "htmlUrl",
            "baseName": "htmlUrl",
            "type": "string"
        },
        {
            "name": "scheduledAt",
            "baseName": "scheduledAt",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "replyTo",
            "baseName": "replyTo",
            "type": "string"
        },
        {
            "name": "toField",
            "baseName": "toField",
            "type": "string"
        },
        {
            "name": "recipients",
            "baseName": "recipients",
            "type": "UpdateEmailCampaignRecipients"
        },
        {
            "name": "attachmentUrl",
            "baseName": "attachmentUrl",
            "type": "string"
        },
        {
            "name": "inlineImageActivation",
            "baseName": "inlineImageActivation",
            "type": "boolean"
        },
        {
            "name": "mirrorActive",
            "baseName": "mirrorActive",
            "type": "boolean"
        },
        {
            "name": "recurring",
            "baseName": "recurring",
            "type": "boolean"
        },
        {
            "name": "footer",
            "baseName": "footer",
            "type": "string"
        },
        {
            "name": "header",
            "baseName": "header",
            "type": "string"
        },
        {
            "name": "utmCampaign",
            "baseName": "utmCampaign",
            "type": "string"
        },
        {
            "name": "params",
            "baseName": "params",
            "type": "any"
        },
        {
            "name": "sendAtBestTime",
            "baseName": "sendAtBestTime",
            "type": "boolean"
        },
        {
            "name": "abTesting",
            "baseName": "abTesting",
            "type": "boolean"
        },
        {
            "name": "subjectA",
            "baseName": "subjectA",
            "type": "string"
        },
        {
            "name": "subjectB",
            "baseName": "subjectB",
            "type": "string"
        },
        {
            "name": "splitRule",
            "baseName": "splitRule",
            "type": "number"
        },
        {
            "name": "winnerCriteria",
            "baseName": "winnerCriteria",
            "type": "UpdateEmailCampaign.WinnerCriteriaEnum"
        },
        {
            "name": "winnerDelay",
            "baseName": "winnerDelay",
            "type": "number"
        },
        {
            "name": "ipWarmupEnable",
            "baseName": "ipWarmupEnable",
            "type": "boolean"
        },
        {
            "name": "initialQuota",
            "baseName": "initialQuota",
            "type": "number"
        },
        {
            "name": "increaseRate",
            "baseName": "increaseRate",
            "type": "number"
        }
    ];
    return UpdateEmailCampaign;
}());
exports.UpdateEmailCampaign = UpdateEmailCampaign;
(function (UpdateEmailCampaign) {
    var WinnerCriteriaEnum;
    (function (WinnerCriteriaEnum) {
        WinnerCriteriaEnum[WinnerCriteriaEnum["Open"] = 'open'] = "Open";
        WinnerCriteriaEnum[WinnerCriteriaEnum["Click"] = 'click'] = "Click";
    })(WinnerCriteriaEnum = UpdateEmailCampaign.WinnerCriteriaEnum || (UpdateEmailCampaign.WinnerCriteriaEnum = {}));
})(UpdateEmailCampaign = exports.UpdateEmailCampaign || (exports.UpdateEmailCampaign = {}));
exports.UpdateEmailCampaign = UpdateEmailCampaign;
/**
* List ids to include/exclude from campaign
*/
var UpdateEmailCampaignRecipients = /** @class */ (function () {
    function UpdateEmailCampaignRecipients() {
    }
    UpdateEmailCampaignRecipients.getAttributeTypeMap = function () {
        return UpdateEmailCampaignRecipients.attributeTypeMap;
    };
    UpdateEmailCampaignRecipients.discriminator = undefined;
    UpdateEmailCampaignRecipients.attributeTypeMap = [
        {
            "name": "exclusionListIds",
            "baseName": "exclusionListIds",
            "type": "Array<number>"
        },
        {
            "name": "listIds",
            "baseName": "listIds",
            "type": "Array<number>"
        }
    ];
    return UpdateEmailCampaignRecipients;
}());
exports.UpdateEmailCampaignRecipients = UpdateEmailCampaignRecipients;
/**
* Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"}` , `{\"name\":\"xyz\", \"id\":123}`
*/
var UpdateEmailCampaignSender = /** @class */ (function () {
    function UpdateEmailCampaignSender() {
    }
    UpdateEmailCampaignSender.getAttributeTypeMap = function () {
        return UpdateEmailCampaignSender.attributeTypeMap;
    };
    UpdateEmailCampaignSender.discriminator = undefined;
    UpdateEmailCampaignSender.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        }
    ];
    return UpdateEmailCampaignSender;
}());
exports.UpdateEmailCampaignSender = UpdateEmailCampaignSender;
var UpdateList = /** @class */ (function () {
    function UpdateList() {
    }
    UpdateList.getAttributeTypeMap = function () {
        return UpdateList.attributeTypeMap;
    };
    UpdateList.discriminator = undefined;
    UpdateList.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "folderId",
            "baseName": "folderId",
            "type": "number"
        }
    ];
    return UpdateList;
}());
exports.UpdateList = UpdateList;
var UpdateSender = /** @class */ (function () {
    function UpdateSender() {
    }
    UpdateSender.getAttributeTypeMap = function () {
        return UpdateSender.attributeTypeMap;
    };
    UpdateSender.discriminator = undefined;
    UpdateSender.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "ips",
            "baseName": "ips",
            "type": "Array<CreateSenderIps>"
        }
    ];
    return UpdateSender;
}());
exports.UpdateSender = UpdateSender;
var UpdateSmsCampaign = /** @class */ (function () {
    function UpdateSmsCampaign() {
    }
    UpdateSmsCampaign.getAttributeTypeMap = function () {
        return UpdateSmsCampaign.attributeTypeMap;
    };
    UpdateSmsCampaign.discriminator = undefined;
    UpdateSmsCampaign.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "sender",
            "baseName": "sender",
            "type": "string"
        },
        {
            "name": "content",
            "baseName": "content",
            "type": "string"
        },
        {
            "name": "recipients",
            "baseName": "recipients",
            "type": "CreateSmsCampaignRecipients"
        },
        {
            "name": "scheduledAt",
            "baseName": "scheduledAt",
            "type": "string"
        }
    ];
    return UpdateSmsCampaign;
}());
exports.UpdateSmsCampaign = UpdateSmsCampaign;
var UpdateSmtpTemplate = /** @class */ (function () {
    function UpdateSmtpTemplate() {
    }
    UpdateSmtpTemplate.getAttributeTypeMap = function () {
        return UpdateSmtpTemplate.attributeTypeMap;
    };
    UpdateSmtpTemplate.discriminator = undefined;
    UpdateSmtpTemplate.attributeTypeMap = [
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string"
        },
        {
            "name": "sender",
            "baseName": "sender",
            "type": "UpdateSmtpTemplateSender"
        },
        {
            "name": "templateName",
            "baseName": "templateName",
            "type": "string"
        },
        {
            "name": "htmlContent",
            "baseName": "htmlContent",
            "type": "string"
        },
        {
            "name": "htmlUrl",
            "baseName": "htmlUrl",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "replyTo",
            "baseName": "replyTo",
            "type": "string"
        },
        {
            "name": "toField",
            "baseName": "toField",
            "type": "string"
        },
        {
            "name": "attachmentUrl",
            "baseName": "attachmentUrl",
            "type": "string"
        },
        {
            "name": "isActive",
            "baseName": "isActive",
            "type": "boolean"
        }
    ];
    return UpdateSmtpTemplate;
}());
exports.UpdateSmtpTemplate = UpdateSmtpTemplate;
/**
* Sender details including id or email and name (optional). Only one of either Sender's email or Sender's ID shall be passed in one request at a time. For example `{\"name\":\"xyz\", \"email\":\"example@abc.com\"}` , `{\"name\":\"xyz\", \"id\":123}`
*/
var UpdateSmtpTemplateSender = /** @class */ (function () {
    function UpdateSmtpTemplateSender() {
    }
    UpdateSmtpTemplateSender.getAttributeTypeMap = function () {
        return UpdateSmtpTemplateSender.attributeTypeMap;
    };
    UpdateSmtpTemplateSender.discriminator = undefined;
    UpdateSmtpTemplateSender.attributeTypeMap = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        }
    ];
    return UpdateSmtpTemplateSender;
}());
exports.UpdateSmtpTemplateSender = UpdateSmtpTemplateSender;
var UpdateWebhook = /** @class */ (function () {
    function UpdateWebhook() {
    }
    UpdateWebhook.getAttributeTypeMap = function () {
        return UpdateWebhook.attributeTypeMap;
    };
    UpdateWebhook.discriminator = undefined;
    UpdateWebhook.attributeTypeMap = [
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "events",
            "baseName": "events",
            "type": "Array<UpdateWebhook.EventsEnum>"
        }
    ];
    return UpdateWebhook;
}());
exports.UpdateWebhook = UpdateWebhook;
(function (UpdateWebhook) {
    var EventsEnum;
    (function (EventsEnum) {
        EventsEnum[EventsEnum["HardBounce"] = 'hardBounce'] = "HardBounce";
        EventsEnum[EventsEnum["SoftBounce"] = 'softBounce'] = "SoftBounce";
        EventsEnum[EventsEnum["Blocked"] = 'blocked'] = "Blocked";
        EventsEnum[EventsEnum["Spam"] = 'spam'] = "Spam";
        EventsEnum[EventsEnum["Delivered"] = 'delivered'] = "Delivered";
        EventsEnum[EventsEnum["Request"] = 'request'] = "Request";
        EventsEnum[EventsEnum["Click"] = 'click'] = "Click";
        EventsEnum[EventsEnum["Invalid"] = 'invalid'] = "Invalid";
        EventsEnum[EventsEnum["Deferred"] = 'deferred'] = "Deferred";
        EventsEnum[EventsEnum["Opened"] = 'opened'] = "Opened";
        EventsEnum[EventsEnum["UniqueOpened"] = 'uniqueOpened'] = "UniqueOpened";
        EventsEnum[EventsEnum["Unsubscribed"] = 'unsubscribed'] = "Unsubscribed";
        EventsEnum[EventsEnum["ListAddition"] = 'listAddition'] = "ListAddition";
        EventsEnum[EventsEnum["ContactUpdated"] = 'contactUpdated'] = "ContactUpdated";
        EventsEnum[EventsEnum["ContactDeleted"] = 'contactDeleted'] = "ContactDeleted";
    })(EventsEnum = UpdateWebhook.EventsEnum || (UpdateWebhook.EventsEnum = {}));
})(UpdateWebhook = exports.UpdateWebhook || (exports.UpdateWebhook = {}));
exports.UpdateWebhook = UpdateWebhook;
var UploadImageToGallery = /** @class */ (function () {
    function UploadImageToGallery() {
    }
    UploadImageToGallery.getAttributeTypeMap = function () {
        return UploadImageToGallery.attributeTypeMap;
    };
    UploadImageToGallery.discriminator = undefined;
    UploadImageToGallery.attributeTypeMap = [
        {
            "name": "imageUrl",
            "baseName": "imageUrl",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        }
    ];
    return UploadImageToGallery;
}());
exports.UploadImageToGallery = UploadImageToGallery;
var enumsMap = {
    "AbTestCampaignResult.WinningVersionEnum": AbTestCampaignResult.WinningVersionEnum,
    "AbTestCampaignResult.WinningCriteriaEnum": AbTestCampaignResult.WinningCriteriaEnum,
    "CreateAttribute.TypeEnum": CreateAttribute.TypeEnum,
    "CreateChild.LanguageEnum": CreateChild.LanguageEnum,
    "CreateEmailCampaign.WinnerCriteriaEnum": CreateEmailCampaign.WinnerCriteriaEnum,
    "CreateWebhook.EventsEnum": CreateWebhook.EventsEnum,
    "CreateWebhook.TypeEnum": CreateWebhook.TypeEnum,
    "EmailExportRecipients.RecipientsTypeEnum": EmailExportRecipients.RecipientsTypeEnum,
    "ErrorModel.CodeEnum": ErrorModel.CodeEnum,
    "GetAccountPlan.TypeEnum": GetAccountPlan.TypeEnum,
    "GetAccountPlan.CreditsTypeEnum": GetAccountPlan.CreditsTypeEnum,
    "GetAttributesAttributes.CategoryEnum": GetAttributesAttributes.CategoryEnum,
    "GetAttributesAttributes.TypeEnum": GetAttributesAttributes.TypeEnum,
    "GetCampaignOverview.TypeEnum": GetCampaignOverview.TypeEnum,
    "GetCampaignOverview.StatusEnum": GetCampaignOverview.StatusEnum,
    "GetEmailEventReportEvents.EventEnum": GetEmailEventReportEvents.EventEnum,
    "GetProcess.StatusEnum": GetProcess.StatusEnum,
    "GetSmsCampaignOverview.StatusEnum": GetSmsCampaignOverview.StatusEnum,
    "GetSmsEventReportEvents.EventEnum": GetSmsEventReportEvents.EventEnum,
    "GetTransacBlockedContactsReason.CodeEnum": GetTransacBlockedContactsReason.CodeEnum,
    "GetWebhook.TypeEnum": GetWebhook.TypeEnum,
    "RequestContactExportCustomContactFilter.ActionForContactsEnum": RequestContactExportCustomContactFilter.ActionForContactsEnum,
    "RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum": RequestContactExportCustomContactFilter.ActionForEmailCampaignsEnum,
    "RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum": RequestContactExportCustomContactFilter.ActionForSmsCampaignsEnum,
    "RequestSmsRecipientExport.RecipientsTypeEnum": RequestSmsRecipientExport.RecipientsTypeEnum,
    "SendReport.LanguageEnum": SendReport.LanguageEnum,
    "SendTransacSms.TypeEnum": SendTransacSms.TypeEnum,
    "UpdateCampaignStatus.StatusEnum": UpdateCampaignStatus.StatusEnum,
    "UpdateEmailCampaign.WinnerCriteriaEnum": UpdateEmailCampaign.WinnerCriteriaEnum,
    "UpdateWebhook.EventsEnum": UpdateWebhook.EventsEnum,
};
var typeMap = {
    "AbTestCampaignResult": AbTestCampaignResult,
    "AbTestCampaignResultClickedLinks": AbTestCampaignResultClickedLinks,
    "AbTestCampaignResultStatistics": AbTestCampaignResultStatistics,
    "AbTestVersionClicks": AbTestVersionClicks,
    "AbTestVersionClicksInner": AbTestVersionClicksInner,
    "AbTestVersionStats": AbTestVersionStats,
    "AddChildDomain": AddChildDomain,
    "AddContactToList": AddContactToList,
    "AddCredits": AddCredits,
    "BlockDomain": BlockDomain,
    "CreateAttribute": CreateAttribute,
    "CreateAttributeEnumeration": CreateAttributeEnumeration,
    "CreateChild": CreateChild,
    "CreateContact": CreateContact,
    "CreateDoiContact": CreateDoiContact,
    "CreateEmailCampaign": CreateEmailCampaign,
    "CreateEmailCampaignRecipients": CreateEmailCampaignRecipients,
    "CreateEmailCampaignSender": CreateEmailCampaignSender,
    "CreateList": CreateList,
    "CreateModel": CreateModel,
    "CreateReseller": CreateReseller,
    "CreateSender": CreateSender,
    "CreateSenderIps": CreateSenderIps,
    "CreateSenderModel": CreateSenderModel,
    "CreateSmsCampaign": CreateSmsCampaign,
    "CreateSmsCampaignRecipients": CreateSmsCampaignRecipients,
    "CreateSmtpEmail": CreateSmtpEmail,
    "CreateSmtpTemplate": CreateSmtpTemplate,
    "CreateSmtpTemplateSender": CreateSmtpTemplateSender,
    "CreateUpdateContactModel": CreateUpdateContactModel,
    "CreateUpdateFolder": CreateUpdateFolder,
    "CreateWebhook": CreateWebhook,
    "CreatedProcessId": CreatedProcessId,
    "DeleteHardbounces": DeleteHardbounces,
    "EmailExportRecipients": EmailExportRecipients,
    "ErrorModel": ErrorModel,
    "GetAccount": GetAccount,
    "GetAccountMarketingAutomation": GetAccountMarketingAutomation,
    "GetAccountPlan": GetAccountPlan,
    "GetAccountRelay": GetAccountRelay,
    "GetAccountRelayData": GetAccountRelayData,
    "GetAggregatedReport": GetAggregatedReport,
    "GetAttributes": GetAttributes,
    "GetAttributesAttributes": GetAttributesAttributes,
    "GetAttributesEnumeration": GetAttributesEnumeration,
    "GetBlockedDomains": GetBlockedDomains,
    "GetCampaignOverview": GetCampaignOverview,
    "GetCampaignRecipients": GetCampaignRecipients,
    "GetCampaignStats": GetCampaignStats,
    "GetChildAccountCreationStatus": GetChildAccountCreationStatus,
    "GetChildDomain": GetChildDomain,
    "GetChildDomains": GetChildDomains,
    "GetChildInfo": GetChildInfo,
    "GetChildInfoApiKeys": GetChildInfoApiKeys,
    "GetChildInfoApiKeysV2": GetChildInfoApiKeysV2,
    "GetChildInfoApiKeysV3": GetChildInfoApiKeysV3,
    "GetChildInfoCredits": GetChildInfoCredits,
    "GetChildInfoStatistics": GetChildInfoStatistics,
    "GetChildrenList": GetChildrenList,
    "GetClient": GetClient,
    "GetContactCampaignStats": GetContactCampaignStats,
    "GetContactCampaignStatsClicked": GetContactCampaignStatsClicked,
    "GetContactCampaignStatsOpened": GetContactCampaignStatsOpened,
    "GetContactCampaignStatsTransacAttributes": GetContactCampaignStatsTransacAttributes,
    "GetContactCampaignStatsUnsubscriptions": GetContactCampaignStatsUnsubscriptions,
    "GetContactDetails": GetContactDetails,
    "GetContacts": GetContacts,
    "GetDeviceBrowserStats": GetDeviceBrowserStats,
    "GetEmailCampaign": GetEmailCampaign,
    "GetEmailCampaigns": GetEmailCampaigns,
    "GetEmailEventReport": GetEmailEventReport,
    "GetEmailEventReportEvents": GetEmailEventReportEvents,
    "GetExtendedCampaignOverview": GetExtendedCampaignOverview,
    "GetExtendedCampaignOverviewSender": GetExtendedCampaignOverviewSender,
    "GetExtendedCampaignStats": GetExtendedCampaignStats,
    "GetExtendedCampaignStatsGlobalStats": GetExtendedCampaignStatsGlobalStats,
    "GetExtendedClient": GetExtendedClient,
    "GetExtendedClientAddress": GetExtendedClientAddress,
    "GetExtendedContactDetails": GetExtendedContactDetails,
    "GetExtendedContactDetailsStatistics": GetExtendedContactDetailsStatistics,
    "GetExtendedContactDetailsStatisticsClicked": GetExtendedContactDetailsStatisticsClicked,
    "GetExtendedContactDetailsStatisticsLinks": GetExtendedContactDetailsStatisticsLinks,
    "GetExtendedContactDetailsStatisticsMessagesSent": GetExtendedContactDetailsStatisticsMessagesSent,
    "GetExtendedContactDetailsStatisticsOpened": GetExtendedContactDetailsStatisticsOpened,
    "GetExtendedContactDetailsStatisticsUnsubscriptions": GetExtendedContactDetailsStatisticsUnsubscriptions,
    "GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription": GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription,
    "GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription": GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription,
    "GetExtendedList": GetExtendedList,
    "GetExtendedListCampaignStats": GetExtendedListCampaignStats,
    "GetFolder": GetFolder,
    "GetFolderLists": GetFolderLists,
    "GetFolders": GetFolders,
    "GetIp": GetIp,
    "GetIpFromSender": GetIpFromSender,
    "GetIps": GetIps,
    "GetIpsFromSender": GetIpsFromSender,
    "GetList": GetList,
    "GetLists": GetLists,
    "GetProcess": GetProcess,
    "GetProcesses": GetProcesses,
    "GetReports": GetReports,
    "GetReportsReports": GetReportsReports,
    "GetSendersList": GetSendersList,
    "GetSendersListIps": GetSendersListIps,
    "GetSendersListSenders": GetSendersListSenders,
    "GetSharedTemplateUrl": GetSharedTemplateUrl,
    "GetSmsCampaign": GetSmsCampaign,
    "GetSmsCampaignOverview": GetSmsCampaignOverview,
    "GetSmsCampaignRecipients": GetSmsCampaignRecipients,
    "GetSmsCampaignStats": GetSmsCampaignStats,
    "GetSmsCampaigns": GetSmsCampaigns,
    "GetSmsEventReport": GetSmsEventReport,
    "GetSmsEventReportEvents": GetSmsEventReportEvents,
    "GetSmtpTemplateOverview": GetSmtpTemplateOverview,
    "GetSmtpTemplateOverviewSender": GetSmtpTemplateOverviewSender,
    "GetSmtpTemplates": GetSmtpTemplates,
    "GetSsoToken": GetSsoToken,
    "GetStatsByBrowser": GetStatsByBrowser,
    "GetStatsByDevice": GetStatsByDevice,
    "GetStatsByDomain": GetStatsByDomain,
    "GetTransacAggregatedSmsReport": GetTransacAggregatedSmsReport,
    "GetTransacBlockedContacts": GetTransacBlockedContacts,
    "GetTransacBlockedContactsContacts": GetTransacBlockedContactsContacts,
    "GetTransacBlockedContactsReason": GetTransacBlockedContactsReason,
    "GetTransacEmailContent": GetTransacEmailContent,
    "GetTransacEmailContentEvents": GetTransacEmailContentEvents,
    "GetTransacEmailsList": GetTransacEmailsList,
    "GetTransacEmailsListTransactionalEmails": GetTransacEmailsListTransactionalEmails,
    "GetTransacSmsReport": GetTransacSmsReport,
    "GetTransacSmsReportReports": GetTransacSmsReportReports,
    "GetWebhook": GetWebhook,
    "GetWebhooks": GetWebhooks,
    "ManageIp": ManageIp,
    "PostContactInfo": PostContactInfo,
    "PostContactInfoContacts": PostContactInfoContacts,
    "PostSendFailed": PostSendFailed,
    "PostSendSmsTestFailed": PostSendSmsTestFailed,
    "RemainingCreditModel": RemainingCreditModel,
    "RemainingCreditModelChild": RemainingCreditModelChild,
    "RemainingCreditModelReseller": RemainingCreditModelReseller,
    "RemoveContactFromList": RemoveContactFromList,
    "RemoveCredits": RemoveCredits,
    "RequestContactExport": RequestContactExport,
    "RequestContactExportCustomContactFilter": RequestContactExportCustomContactFilter,
    "RequestContactImport": RequestContactImport,
    "RequestContactImportNewList": RequestContactImportNewList,
    "RequestSmsRecipientExport": RequestSmsRecipientExport,
    "SendEmail": SendEmail,
    "SendEmailAttachment": SendEmailAttachment,
    "SendReport": SendReport,
    "SendReportEmail": SendReportEmail,
    "SendSms": SendSms,
    "SendSmtpEmail": SendSmtpEmail,
    "SendSmtpEmailAttachment": SendSmtpEmailAttachment,
    "SendSmtpEmailBcc": SendSmtpEmailBcc,
    "SendSmtpEmailCc": SendSmtpEmailCc,
    "SendSmtpEmailMessageVersions": SendSmtpEmailMessageVersions,
    "SendSmtpEmailReplyTo": SendSmtpEmailReplyTo,
    "SendSmtpEmailReplyTo1": SendSmtpEmailReplyTo1,
    "SendSmtpEmailSender": SendSmtpEmailSender,
    "SendSmtpEmailTo": SendSmtpEmailTo,
    "SendSmtpEmailTo1": SendSmtpEmailTo1,
    "SendTemplateEmail": SendTemplateEmail,
    "SendTestEmail": SendTestEmail,
    "SendTestSms": SendTestSms,
    "SendTransacSms": SendTransacSms,
    "UpdateAttribute": UpdateAttribute,
    "UpdateAttributeEnumeration": UpdateAttributeEnumeration,
    "UpdateCampaignStatus": UpdateCampaignStatus,
    "UpdateChild": UpdateChild,
    "UpdateChildAccountStatus": UpdateChildAccountStatus,
    "UpdateChildDomain": UpdateChildDomain,
    "UpdateContact": UpdateContact,
    "UpdateEmailCampaign": UpdateEmailCampaign,
    "UpdateEmailCampaignRecipients": UpdateEmailCampaignRecipients,
    "UpdateEmailCampaignSender": UpdateEmailCampaignSender,
    "UpdateList": UpdateList,
    "UpdateSender": UpdateSender,
    "UpdateSmsCampaign": UpdateSmsCampaign,
    "UpdateSmtpTemplate": UpdateSmtpTemplate,
    "UpdateSmtpTemplateSender": UpdateSmtpTemplateSender,
    "UpdateWebhook": UpdateWebhook,
    "UploadImageToGallery": UploadImageToGallery,
};
var HttpBasicAuth = /** @class */ (function () {
    function HttpBasicAuth() {
        this.username = '';
        this.password = '';
    }
    HttpBasicAuth.prototype.applyToRequest = function (requestOptions) {
        requestOptions.auth = {
            username: this.username, password: this.password
        };
    };
    return HttpBasicAuth;
}());
exports.HttpBasicAuth = HttpBasicAuth;
var ApiKeyAuth = /** @class */ (function () {
    function ApiKeyAuth(location, paramName) {
        this.location = location;
        this.paramName = paramName;
        this.apiKey = '';
    }
    ApiKeyAuth.prototype.applyToRequest = function (requestOptions) {
        if (this.location == "query") {
            requestOptions.qs[this.paramName] = this.apiKey;
        }
        else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    };
    return ApiKeyAuth;
}());
exports.ApiKeyAuth = ApiKeyAuth;
var OAuth = /** @class */ (function () {
    function OAuth() {
        this.accessToken = '';
    }
    OAuth.prototype.applyToRequest = function (requestOptions) {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    };
    return OAuth;
}());
exports.OAuth = OAuth;
var VoidAuth = /** @class */ (function () {
    function VoidAuth() {
        this.username = '';
        this.password = '';
    }
    VoidAuth.prototype.applyToRequest = function (_) {
        // Do nothing
    };
    return VoidAuth;
}());
exports.VoidAuth = VoidAuth;
var AccountApiApiKeys;
(function (AccountApiApiKeys) {
    AccountApiApiKeys[AccountApiApiKeys["apiKey"] = 0] = "apiKey";
    AccountApiApiKeys[AccountApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(AccountApiApiKeys = exports.AccountApiApiKeys || (exports.AccountApiApiKeys = {}));
var AccountApi = /** @class */ (function () {
    function AccountApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AccountApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AccountApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    AccountApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AccountApi.prototype.setApiKey = function (key, value) {
        this.authentications[AccountApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Get your account information, plan and credits details
     * @param {*} [options] Override http request options.
     */
    AccountApi.prototype.getAccount = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/account';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetAccount");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AccountApi;
}());
exports.AccountApi = AccountApi;
var AttributesApiApiKeys;
(function (AttributesApiApiKeys) {
    AttributesApiApiKeys[AttributesApiApiKeys["apiKey"] = 0] = "apiKey";
    AttributesApiApiKeys[AttributesApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(AttributesApiApiKeys = exports.AttributesApiApiKeys || (exports.AttributesApiApiKeys = {}));
var AttributesApi = /** @class */ (function () {
    function AttributesApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(AttributesApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AttributesApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    AttributesApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    AttributesApi.prototype.setApiKey = function (key, value) {
        this.authentications[AttributesApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Create contact attribute
     * @param attributeCategory Category of the attribute
     * @param attributeName Name of the attribute
     * @param createAttribute Values to create an attribute
     * @param {*} [options] Override http request options.
     */
    AttributesApi.prototype.createAttribute = function (attributeCategory, attributeName, createAttribute, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/attributes/{attributeCategory}/{attributeName}'
            .replace('{' + 'attributeCategory' + '}', encodeURIComponent(String(attributeCategory)))
            .replace('{' + 'attributeName' + '}', encodeURIComponent(String(attributeName)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'attributeCategory' is not null or undefined
        if (attributeCategory === null || attributeCategory === undefined) {
            throw new Error('Required parameter attributeCategory was null or undefined when calling createAttribute.');
        }
        // verify required parameter 'attributeName' is not null or undefined
        if (attributeName === null || attributeName === undefined) {
            throw new Error('Required parameter attributeName was null or undefined when calling createAttribute.');
        }
        // verify required parameter 'createAttribute' is not null or undefined
        if (createAttribute === null || createAttribute === undefined) {
            throw new Error('Required parameter createAttribute was null or undefined when calling createAttribute.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createAttribute, "CreateAttribute")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete an attribute
     * @param attributeCategory Category of the attribute
     * @param attributeName Name of the existing attribute
     * @param {*} [options] Override http request options.
     */
    AttributesApi.prototype.deleteAttribute = function (attributeCategory, attributeName, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/attributes/{attributeCategory}/{attributeName}'
            .replace('{' + 'attributeCategory' + '}', encodeURIComponent(String(attributeCategory)))
            .replace('{' + 'attributeName' + '}', encodeURIComponent(String(attributeName)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'attributeCategory' is not null or undefined
        if (attributeCategory === null || attributeCategory === undefined) {
            throw new Error('Required parameter attributeCategory was null or undefined when calling deleteAttribute.');
        }
        // verify required parameter 'attributeName' is not null or undefined
        if (attributeName === null || attributeName === undefined) {
            throw new Error('Required parameter attributeName was null or undefined when calling deleteAttribute.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary List all attributes
     * @param {*} [options] Override http request options.
     */
    AttributesApi.prototype.getAttributes = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/attributes';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetAttributes");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update contact attribute
     * @param attributeCategory Category of the attribute
     * @param attributeName Name of the existing attribute
     * @param updateAttribute Values to update an attribute
     * @param {*} [options] Override http request options.
     */
    AttributesApi.prototype.updateAttribute = function (attributeCategory, attributeName, updateAttribute, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/attributes/{attributeCategory}/{attributeName}'
            .replace('{' + 'attributeCategory' + '}', encodeURIComponent(String(attributeCategory)))
            .replace('{' + 'attributeName' + '}', encodeURIComponent(String(attributeName)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'attributeCategory' is not null or undefined
        if (attributeCategory === null || attributeCategory === undefined) {
            throw new Error('Required parameter attributeCategory was null or undefined when calling updateAttribute.');
        }
        // verify required parameter 'attributeName' is not null or undefined
        if (attributeName === null || attributeName === undefined) {
            throw new Error('Required parameter attributeName was null or undefined when calling updateAttribute.');
        }
        // verify required parameter 'updateAttribute' is not null or undefined
        if (updateAttribute === null || updateAttribute === undefined) {
            throw new Error('Required parameter updateAttribute was null or undefined when calling updateAttribute.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateAttribute, "UpdateAttribute")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return AttributesApi;
}());
exports.AttributesApi = AttributesApi;
var ContactsApiApiKeys;
(function (ContactsApiApiKeys) {
    ContactsApiApiKeys[ContactsApiApiKeys["apiKey"] = 0] = "apiKey";
    ContactsApiApiKeys[ContactsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(ContactsApiApiKeys = exports.ContactsApiApiKeys || (exports.ContactsApiApiKeys = {}));
var ContactsApi = /** @class */ (function () {
    function ContactsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ContactsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ContactsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    ContactsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ContactsApi.prototype.setApiKey = function (key, value) {
        this.authentications[ContactsApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Add existing contacts to a list
     * @param listId Id of the list
     * @param contactEmails Emails addresses OR IDs of the contacts
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.addContactToList = function (listId, contactEmails, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists/{listId}/contacts/add'
            .replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling addContactToList.');
        }
        // verify required parameter 'contactEmails' is not null or undefined
        if (contactEmails === null || contactEmails === undefined) {
            throw new Error('Required parameter contactEmails was null or undefined when calling addContactToList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(contactEmails, "AddContactToList")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostContactInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Create contact attribute
     * @param attributeCategory Category of the attribute
     * @param attributeName Name of the attribute
     * @param createAttribute Values to create an attribute
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.createAttribute = function (attributeCategory, attributeName, createAttribute, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/attributes/{attributeCategory}/{attributeName}'
            .replace('{' + 'attributeCategory' + '}', encodeURIComponent(String(attributeCategory)))
            .replace('{' + 'attributeName' + '}', encodeURIComponent(String(attributeName)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'attributeCategory' is not null or undefined
        if (attributeCategory === null || attributeCategory === undefined) {
            throw new Error('Required parameter attributeCategory was null or undefined when calling createAttribute.');
        }
        // verify required parameter 'attributeName' is not null or undefined
        if (attributeName === null || attributeName === undefined) {
            throw new Error('Required parameter attributeName was null or undefined when calling createAttribute.');
        }
        // verify required parameter 'createAttribute' is not null or undefined
        if (createAttribute === null || createAttribute === undefined) {
            throw new Error('Required parameter createAttribute was null or undefined when calling createAttribute.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createAttribute, "CreateAttribute")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Create a contact
     * @param createContact Values to create a contact
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.createContact = function (createContact, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'createContact' is not null or undefined
        if (createContact === null || createContact === undefined) {
            throw new Error('Required parameter createContact was null or undefined when calling createContact.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createContact, "CreateContact")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateUpdateContactModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Create Contact via DOI (Double-Opt-In) Flow
     * @param createDoiContact Values to create the Double opt-in (DOI) contact
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.createDoiContact = function (createDoiContact, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/doubleOptinConfirmation';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'createDoiContact' is not null or undefined
        if (createDoiContact === null || createDoiContact === undefined) {
            throw new Error('Required parameter createDoiContact was null or undefined when calling createDoiContact.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createDoiContact, "CreateDoiContact")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Create a folder
     * @param createFolder Name of the folder
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.createFolder = function (createFolder, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'createFolder' is not null or undefined
        if (createFolder === null || createFolder === undefined) {
            throw new Error('Required parameter createFolder was null or undefined when calling createFolder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createFolder, "CreateUpdateFolder")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Create a list
     * @param createList Values to create a list
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.createList = function (createList, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'createList' is not null or undefined
        if (createList === null || createList === undefined) {
            throw new Error('Required parameter createList was null or undefined when calling createList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createList, "CreateList")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete an attribute
     * @param attributeCategory Category of the attribute
     * @param attributeName Name of the existing attribute
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.deleteAttribute = function (attributeCategory, attributeName, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/attributes/{attributeCategory}/{attributeName}'
            .replace('{' + 'attributeCategory' + '}', encodeURIComponent(String(attributeCategory)))
            .replace('{' + 'attributeName' + '}', encodeURIComponent(String(attributeName)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'attributeCategory' is not null or undefined
        if (attributeCategory === null || attributeCategory === undefined) {
            throw new Error('Required parameter attributeCategory was null or undefined when calling deleteAttribute.');
        }
        // verify required parameter 'attributeName' is not null or undefined
        if (attributeName === null || attributeName === undefined) {
            throw new Error('Required parameter attributeName was null or undefined when calling deleteAttribute.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete a contact
     * @param identifier Email (urlencoded) OR ID of the contact
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.deleteContact = function (identifier, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/{identifier}'
            .replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'identifier' is not null or undefined
        if (identifier === null || identifier === undefined) {
            throw new Error('Required parameter identifier was null or undefined when calling deleteContact.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete a folder (and all its lists)
     * @param folderId Id of the folder
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.deleteFolder = function (folderId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders/{folderId}'
            .replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'folderId' is not null or undefined
        if (folderId === null || folderId === undefined) {
            throw new Error('Required parameter folderId was null or undefined when calling deleteFolder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete a list
     * @param listId Id of the list
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.deleteList = function (listId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists/{listId}'
            .replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling deleteList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary List all attributes
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.getAttributes = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/attributes';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetAttributes");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get a contact's details
     * @param identifier Email (urlencoded) OR ID of the contact OR its SMS attribute value
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.getContactInfo = function (identifier, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/{identifier}'
            .replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'identifier' is not null or undefined
        if (identifier === null || identifier === undefined) {
            throw new Error('Required parameter identifier was null or undefined when calling getContactInfo.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetExtendedContactDetails");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get email campaigns' statistics for a contact
     * @param identifier Email (urlencoded) OR ID of the contact
     * @param startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be lower than equal to endDate
     * @param endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the statistic events specific to campaigns. Must be greater than equal to startDate
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.getContactStats = function (identifier, startDate, endDate, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/{identifier}/campaignStats'
            .replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'identifier' is not null or undefined
        if (identifier === null || identifier === undefined) {
            throw new Error('Required parameter identifier was null or undefined when calling getContactStats.');
        }
        if (startDate !== undefined) {
            localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, "string");
        }
        if (endDate !== undefined) {
            localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetContactCampaignStats");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get all the contacts
     * @param limit Number of documents per page
     * @param offset Index of the first document of the page
     * @param modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.getContacts = function (limit, offset, modifiedSince, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (modifiedSince !== undefined) {
            localVarQueryParameters['modifiedSince'] = ObjectSerializer.serialize(modifiedSince, "string");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetContacts");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get contacts in a list
     * @param listId Id of the list
     * @param modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
     * @param limit Number of documents per page
     * @param offset Index of the first document of the page
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.getContactsFromList = function (listId, modifiedSince, limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists/{listId}/contacts'
            .replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling getContactsFromList.');
        }
        if (modifiedSince !== undefined) {
            localVarQueryParameters['modifiedSince'] = ObjectSerializer.serialize(modifiedSince, "string");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetContacts");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Returns a folder's details
     * @param folderId id of the folder
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.getFolder = function (folderId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders/{folderId}'
            .replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'folderId' is not null or undefined
        if (folderId === null || folderId === undefined) {
            throw new Error('Required parameter folderId was null or undefined when calling getFolder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetFolder");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get lists in a folder
     * @param folderId Id of the folder
     * @param limit Number of documents per page
     * @param offset Index of the first document of the page
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.getFolderLists = function (folderId, limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders/{folderId}/lists'
            .replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'folderId' is not null or undefined
        if (folderId === null || folderId === undefined) {
            throw new Error('Required parameter folderId was null or undefined when calling getFolderLists.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetFolderLists");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get all folders
     * @param limit Number of documents per page
     * @param offset Index of the first document of the page
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.getFolders = function (limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'limit' is not null or undefined
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getFolders.');
        }
        // verify required parameter 'offset' is not null or undefined
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getFolders.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetFolders");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get a list's details
     * @param listId Id of the list
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.getList = function (listId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists/{listId}'
            .replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling getList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetExtendedList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get all the lists
     * @param limit Number of documents per page
     * @param offset Index of the first document of the page
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.getLists = function (limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetLists");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * It returns the background process ID which on completion calls the notify URL that you have set in the input.
     * @summary Import contacts
     * @param requestContactImport Values to import contacts in Sendinblue. To know more about the expected format, please have a look at &#x60;&#x60;https://help.sendinblue.com/hc/en-us/articles/209499265-Build-contacts-lists-for-your-email-marketing-campaigns&#x60;&#x60;
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.importContacts = function (requestContactImport, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/import';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'requestContactImport' is not null or undefined
        if (requestContactImport === null || requestContactImport === undefined) {
            throw new Error('Required parameter requestContactImport was null or undefined when calling importContacts.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(requestContactImport, "RequestContactImport")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreatedProcessId");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete a contact from a list
     * @param listId Id of the list
     * @param contactEmails Emails addresses OR IDs of the contacts
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.removeContactFromList = function (listId, contactEmails, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists/{listId}/contacts/remove'
            .replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling removeContactFromList.');
        }
        // verify required parameter 'contactEmails' is not null or undefined
        if (contactEmails === null || contactEmails === undefined) {
            throw new Error('Required parameter contactEmails was null or undefined when calling removeContactFromList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(contactEmails, "RemoveContactFromList")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostContactInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * It returns the background process ID which on completion calls the notify URL that you have set in the input. File will be available in csv.
     * @summary Export contacts
     * @param requestContactExport Values to request a contact export
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.requestContactExport = function (requestContactExport, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/export';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'requestContactExport' is not null or undefined
        if (requestContactExport === null || requestContactExport === undefined) {
            throw new Error('Required parameter requestContactExport was null or undefined when calling requestContactExport.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(requestContactExport, "RequestContactExport")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreatedProcessId");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update contact attribute
     * @param attributeCategory Category of the attribute
     * @param attributeName Name of the existing attribute
     * @param updateAttribute Values to update an attribute
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.updateAttribute = function (attributeCategory, attributeName, updateAttribute, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/attributes/{attributeCategory}/{attributeName}'
            .replace('{' + 'attributeCategory' + '}', encodeURIComponent(String(attributeCategory)))
            .replace('{' + 'attributeName' + '}', encodeURIComponent(String(attributeName)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'attributeCategory' is not null or undefined
        if (attributeCategory === null || attributeCategory === undefined) {
            throw new Error('Required parameter attributeCategory was null or undefined when calling updateAttribute.');
        }
        // verify required parameter 'attributeName' is not null or undefined
        if (attributeName === null || attributeName === undefined) {
            throw new Error('Required parameter attributeName was null or undefined when calling updateAttribute.');
        }
        // verify required parameter 'updateAttribute' is not null or undefined
        if (updateAttribute === null || updateAttribute === undefined) {
            throw new Error('Required parameter updateAttribute was null or undefined when calling updateAttribute.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateAttribute, "UpdateAttribute")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update a contact
     * @param identifier Email (urlencoded) OR ID of the contact
     * @param updateContact Values to update a contact
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.updateContact = function (identifier, updateContact, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/{identifier}'
            .replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'identifier' is not null or undefined
        if (identifier === null || identifier === undefined) {
            throw new Error('Required parameter identifier was null or undefined when calling updateContact.');
        }
        // verify required parameter 'updateContact' is not null or undefined
        if (updateContact === null || updateContact === undefined) {
            throw new Error('Required parameter updateContact was null or undefined when calling updateContact.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateContact, "UpdateContact")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update a folder
     * @param folderId Id of the folder
     * @param updateFolder Name of the folder
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.updateFolder = function (folderId, updateFolder, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders/{folderId}'
            .replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'folderId' is not null or undefined
        if (folderId === null || folderId === undefined) {
            throw new Error('Required parameter folderId was null or undefined when calling updateFolder.');
        }
        // verify required parameter 'updateFolder' is not null or undefined
        if (updateFolder === null || updateFolder === undefined) {
            throw new Error('Required parameter updateFolder was null or undefined when calling updateFolder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateFolder, "CreateUpdateFolder")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update a list
     * @param listId Id of the list
     * @param updateList Values to update a list
     * @param {*} [options] Override http request options.
     */
    ContactsApi.prototype.updateList = function (listId, updateList, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists/{listId}'
            .replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling updateList.');
        }
        // verify required parameter 'updateList' is not null or undefined
        if (updateList === null || updateList === undefined) {
            throw new Error('Required parameter updateList was null or undefined when calling updateList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateList, "UpdateList")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ContactsApi;
}());
exports.ContactsApi = ContactsApi;
var EmailCampaignsApiApiKeys;
(function (EmailCampaignsApiApiKeys) {
    EmailCampaignsApiApiKeys[EmailCampaignsApiApiKeys["apiKey"] = 0] = "apiKey";
    EmailCampaignsApiApiKeys[EmailCampaignsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(EmailCampaignsApiApiKeys = exports.EmailCampaignsApiApiKeys || (exports.EmailCampaignsApiApiKeys = {}));
var EmailCampaignsApi = /** @class */ (function () {
    function EmailCampaignsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(EmailCampaignsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EmailCampaignsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    EmailCampaignsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    EmailCampaignsApi.prototype.setApiKey = function (key, value) {
        this.authentications[EmailCampaignsApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Create an email campaign
     * @param emailCampaigns Values to create a campaign
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.createEmailCampaign = function (emailCampaigns, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'emailCampaigns' is not null or undefined
        if (emailCampaigns === null || emailCampaigns === undefined) {
            throw new Error('Required parameter emailCampaigns was null or undefined when calling createEmailCampaign.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCampaigns, "CreateEmailCampaign")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete an email campaign
     * @param campaignId id of the campaign
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.deleteEmailCampaign = function (campaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns/{campaignId}'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling deleteEmailCampaign.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Export the recipients of an email campaign
     * @param campaignId Id of the campaign
     * @param recipientExport Values to send for a recipient export request
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.emailExportRecipients = function (campaignId, recipientExport, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns/{campaignId}/exportRecipients'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling emailExportRecipients.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(recipientExport, "EmailExportRecipients")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreatedProcessId");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Obtain winning version of an A/B test email campaign
     * @summary Get an A/B test email campaign results
     * @param campaignId Id of the A/B test campaign
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.getAbTestCampaignResult = function (campaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns/{campaignId}/abTestCampaignResult'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling getAbTestCampaignResult.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "AbTestCampaignResult");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get an email campaign report
     * @param campaignId Id of the campaign
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.getEmailCampaign = function (campaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns/{campaignId}'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling getEmailCampaign.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetEmailCampaign");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Return all your created email campaigns
     * @param type Filter on the type of the campaigns
     * @param status Filter on the status of the campaign
     * @param startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )
     * @param endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )
     * @param limit Number of documents per page
     * @param offset Index of the first document in the page
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.getEmailCampaigns = function (type, status, startDate, endDate, limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(type, "'classic' | 'trigger'");
        }
        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "'suspended' | 'archive' | 'sent' | 'queued' | 'draft' | 'inProcess'");
        }
        if (startDate !== undefined) {
            localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, "string");
        }
        if (endDate !== undefined) {
            localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, "string");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetEmailCampaigns");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get a unique URL to share & import an email template from one Sendinblue account to another.
     * @summary Get a shared template url
     * @param campaignId Id of the campaign or template
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.getSharedTemplateUrl = function (campaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns/{campaignId}/sharedUrl'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling getSharedTemplateUrl.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetSharedTemplateUrl");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Send an email campaign immediately, based on campaignId
     * @param campaignId Id of the campaign
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.sendEmailCampaignNow = function (campaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns/{campaignId}/sendNow'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling sendEmailCampaignNow.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * A PDF will be sent to the specified email addresses
     * @summary Send the report of a campaign
     * @param campaignId Id of the campaign
     * @param sendReport Values for send a report
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.sendReport = function (campaignId, sendReport, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns/{campaignId}/sendReport'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling sendReport.');
        }
        // verify required parameter 'sendReport' is not null or undefined
        if (sendReport === null || sendReport === undefined) {
            throw new Error('Required parameter sendReport was null or undefined when calling sendReport.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sendReport, "SendReport")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Send an email campaign to your test list
     * @param campaignId Id of the campaign
     * @param emailTo
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.sendTestEmail = function (campaignId, emailTo, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns/{campaignId}/sendTest'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling sendTestEmail.');
        }
        // verify required parameter 'emailTo' is not null or undefined
        if (emailTo === null || emailTo === undefined) {
            throw new Error('Required parameter emailTo was null or undefined when calling sendTestEmail.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailTo, "SendTestEmail")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update an email campaign status
     * @param campaignId Id of the campaign
     * @param status Status of the campaign
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.updateCampaignStatus = function (campaignId, status, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns/{campaignId}/status'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling updateCampaignStatus.');
        }
        // verify required parameter 'status' is not null or undefined
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling updateCampaignStatus.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(status, "UpdateCampaignStatus")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update an email campaign
     * @param campaignId Id of the campaign
     * @param emailCampaign Values to update a campaign
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.updateEmailCampaign = function (campaignId, emailCampaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns/{campaignId}'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling updateEmailCampaign.');
        }
        // verify required parameter 'emailCampaign' is not null or undefined
        if (emailCampaign === null || emailCampaign === undefined) {
            throw new Error('Required parameter emailCampaign was null or undefined when calling updateEmailCampaign.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(emailCampaign, "UpdateEmailCampaign")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Upload an image to your account's image gallery
     * @param uploadImage Parameters to upload an image
     * @param {*} [options] Override http request options.
     */
    EmailCampaignsApi.prototype.uploadImageToGallery = function (uploadImage, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/emailCampaigns/images';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'uploadImage' is not null or undefined
        if (uploadImage === null || uploadImage === undefined) {
            throw new Error('Required parameter uploadImage was null or undefined when calling uploadImageToGallery.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(uploadImage, "UploadImageToGallery")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return EmailCampaignsApi;
}());
exports.EmailCampaignsApi = EmailCampaignsApi;
var FoldersApiApiKeys;
(function (FoldersApiApiKeys) {
    FoldersApiApiKeys[FoldersApiApiKeys["apiKey"] = 0] = "apiKey";
    FoldersApiApiKeys[FoldersApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(FoldersApiApiKeys = exports.FoldersApiApiKeys || (exports.FoldersApiApiKeys = {}));
var FoldersApi = /** @class */ (function () {
    function FoldersApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(FoldersApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FoldersApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    FoldersApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    FoldersApi.prototype.setApiKey = function (key, value) {
        this.authentications[FoldersApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Create a folder
     * @param createFolder Name of the folder
     * @param {*} [options] Override http request options.
     */
    FoldersApi.prototype.createFolder = function (createFolder, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'createFolder' is not null or undefined
        if (createFolder === null || createFolder === undefined) {
            throw new Error('Required parameter createFolder was null or undefined when calling createFolder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createFolder, "CreateUpdateFolder")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete a folder (and all its lists)
     * @param folderId Id of the folder
     * @param {*} [options] Override http request options.
     */
    FoldersApi.prototype.deleteFolder = function (folderId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders/{folderId}'
            .replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'folderId' is not null or undefined
        if (folderId === null || folderId === undefined) {
            throw new Error('Required parameter folderId was null or undefined when calling deleteFolder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Returns a folder's details
     * @param folderId id of the folder
     * @param {*} [options] Override http request options.
     */
    FoldersApi.prototype.getFolder = function (folderId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders/{folderId}'
            .replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'folderId' is not null or undefined
        if (folderId === null || folderId === undefined) {
            throw new Error('Required parameter folderId was null or undefined when calling getFolder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetFolder");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get lists in a folder
     * @param folderId Id of the folder
     * @param limit Number of documents per page
     * @param offset Index of the first document of the page
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    FoldersApi.prototype.getFolderLists = function (folderId, limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders/{folderId}/lists'
            .replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'folderId' is not null or undefined
        if (folderId === null || folderId === undefined) {
            throw new Error('Required parameter folderId was null or undefined when calling getFolderLists.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetFolderLists");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get all folders
     * @param limit Number of documents per page
     * @param offset Index of the first document of the page
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    FoldersApi.prototype.getFolders = function (limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'limit' is not null or undefined
        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling getFolders.');
        }
        // verify required parameter 'offset' is not null or undefined
        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling getFolders.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetFolders");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update a folder
     * @param folderId Id of the folder
     * @param updateFolder Name of the folder
     * @param {*} [options] Override http request options.
     */
    FoldersApi.prototype.updateFolder = function (folderId, updateFolder, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders/{folderId}'
            .replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'folderId' is not null or undefined
        if (folderId === null || folderId === undefined) {
            throw new Error('Required parameter folderId was null or undefined when calling updateFolder.');
        }
        // verify required parameter 'updateFolder' is not null or undefined
        if (updateFolder === null || updateFolder === undefined) {
            throw new Error('Required parameter updateFolder was null or undefined when calling updateFolder.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateFolder, "CreateUpdateFolder")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return FoldersApi;
}());
exports.FoldersApi = FoldersApi;
var ListsApiApiKeys;
(function (ListsApiApiKeys) {
    ListsApiApiKeys[ListsApiApiKeys["apiKey"] = 0] = "apiKey";
    ListsApiApiKeys[ListsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(ListsApiApiKeys = exports.ListsApiApiKeys || (exports.ListsApiApiKeys = {}));
var ListsApi = /** @class */ (function () {
    function ListsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ListsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ListsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    ListsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ListsApi.prototype.setApiKey = function (key, value) {
        this.authentications[ListsApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Add existing contacts to a list
     * @param listId Id of the list
     * @param contactEmails Emails addresses OR IDs of the contacts
     * @param {*} [options] Override http request options.
     */
    ListsApi.prototype.addContactToList = function (listId, contactEmails, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists/{listId}/contacts/add'
            .replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling addContactToList.');
        }
        // verify required parameter 'contactEmails' is not null or undefined
        if (contactEmails === null || contactEmails === undefined) {
            throw new Error('Required parameter contactEmails was null or undefined when calling addContactToList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(contactEmails, "AddContactToList")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostContactInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Create a list
     * @param createList Values to create a list
     * @param {*} [options] Override http request options.
     */
    ListsApi.prototype.createList = function (createList, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'createList' is not null or undefined
        if (createList === null || createList === undefined) {
            throw new Error('Required parameter createList was null or undefined when calling createList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createList, "CreateList")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete a list
     * @param listId Id of the list
     * @param {*} [options] Override http request options.
     */
    ListsApi.prototype.deleteList = function (listId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists/{listId}'
            .replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling deleteList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get contacts in a list
     * @param listId Id of the list
     * @param modifiedSince Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result.
     * @param limit Number of documents per page
     * @param offset Index of the first document of the page
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    ListsApi.prototype.getContactsFromList = function (listId, modifiedSince, limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists/{listId}/contacts'
            .replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling getContactsFromList.');
        }
        if (modifiedSince !== undefined) {
            localVarQueryParameters['modifiedSince'] = ObjectSerializer.serialize(modifiedSince, "string");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetContacts");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get lists in a folder
     * @param folderId Id of the folder
     * @param limit Number of documents per page
     * @param offset Index of the first document of the page
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    ListsApi.prototype.getFolderLists = function (folderId, limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/folders/{folderId}/lists'
            .replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'folderId' is not null or undefined
        if (folderId === null || folderId === undefined) {
            throw new Error('Required parameter folderId was null or undefined when calling getFolderLists.');
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetFolderLists");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get a list's details
     * @param listId Id of the list
     * @param {*} [options] Override http request options.
     */
    ListsApi.prototype.getList = function (listId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists/{listId}'
            .replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling getList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetExtendedList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get all the lists
     * @param limit Number of documents per page
     * @param offset Index of the first document of the page
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    ListsApi.prototype.getLists = function (limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetLists");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete a contact from a list
     * @param listId Id of the list
     * @param contactEmails Emails addresses OR IDs of the contacts
     * @param {*} [options] Override http request options.
     */
    ListsApi.prototype.removeContactFromList = function (listId, contactEmails, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists/{listId}/contacts/remove'
            .replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling removeContactFromList.');
        }
        // verify required parameter 'contactEmails' is not null or undefined
        if (contactEmails === null || contactEmails === undefined) {
            throw new Error('Required parameter contactEmails was null or undefined when calling removeContactFromList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(contactEmails, "RemoveContactFromList")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "PostContactInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update a list
     * @param listId Id of the list
     * @param updateList Values to update a list
     * @param {*} [options] Override http request options.
     */
    ListsApi.prototype.updateList = function (listId, updateList, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/contacts/lists/{listId}'
            .replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'listId' is not null or undefined
        if (listId === null || listId === undefined) {
            throw new Error('Required parameter listId was null or undefined when calling updateList.');
        }
        // verify required parameter 'updateList' is not null or undefined
        if (updateList === null || updateList === undefined) {
            throw new Error('Required parameter updateList was null or undefined when calling updateList.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateList, "UpdateList")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ListsApi;
}());
exports.ListsApi = ListsApi;
var ProcessApiApiKeys;
(function (ProcessApiApiKeys) {
    ProcessApiApiKeys[ProcessApiApiKeys["apiKey"] = 0] = "apiKey";
    ProcessApiApiKeys[ProcessApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(ProcessApiApiKeys = exports.ProcessApiApiKeys || (exports.ProcessApiApiKeys = {}));
var ProcessApi = /** @class */ (function () {
    function ProcessApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ProcessApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ProcessApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    ProcessApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ProcessApi.prototype.setApiKey = function (key, value) {
        this.authentications[ProcessApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Return the informations for a process
     * @param processId Id of the process
     * @param {*} [options] Override http request options.
     */
    ProcessApi.prototype.getProcess = function (processId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/processes/{processId}'
            .replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'processId' is not null or undefined
        if (processId === null || processId === undefined) {
            throw new Error('Required parameter processId was null or undefined when calling getProcess.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetProcess");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Return all the processes for your account
     * @param limit Number limitation for the result returned
     * @param offset Beginning point in the list to retrieve from.
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    ProcessApi.prototype.getProcesses = function (limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/processes';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetProcesses");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ProcessApi;
}());
exports.ProcessApi = ProcessApi;
var ResellerApiApiKeys;
(function (ResellerApiApiKeys) {
    ResellerApiApiKeys[ResellerApiApiKeys["apiKey"] = 0] = "apiKey";
    ResellerApiApiKeys[ResellerApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(ResellerApiApiKeys = exports.ResellerApiApiKeys || (exports.ResellerApiApiKeys = {}));
var ResellerApi = /** @class */ (function () {
    function ResellerApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(ResellerApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ResellerApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    ResellerApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    ResellerApi.prototype.setApiKey = function (key, value) {
        this.authentications[ResellerApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Add Email and/or SMS credits to a specific child account
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param addCredits Values to post to add credit to a specific child account
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.addCredits = function (childIdentifier, addCredits, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}/credits/add'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling addCredits.');
        }
        // verify required parameter 'addCredits' is not null or undefined
        if (addCredits === null || addCredits === undefined) {
            throw new Error('Required parameter addCredits was null or undefined when calling addCredits.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(addCredits, "AddCredits")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RemainingCreditModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Associate a dedicated IP to the child
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param ip IP to associate
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.associateIpToChild = function (childIdentifier, ip, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}/ips/associate'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling associateIpToChild.');
        }
        // verify required parameter 'ip' is not null or undefined
        if (ip === null || ip === undefined) {
            throw new Error('Required parameter ip was null or undefined when calling associateIpToChild.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(ip, "ManageIp")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Create a domain for a child account
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param addChildDomain Sender domain to add for a specific child account. This will not be displayed to the parent account.
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.createChildDomain = function (childIdentifier, addChildDomain, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}/domains'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling createChildDomain.');
        }
        // verify required parameter 'addChildDomain' is not null or undefined
        if (addChildDomain === null || addChildDomain === undefined) {
            throw new Error('Required parameter addChildDomain was null or undefined when calling createChildDomain.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(addChildDomain, "AddChildDomain")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Creates a reseller child
     * @param resellerChild reseller child to add
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.createResellerChild = function (resellerChild, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(resellerChild, "CreateChild")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateReseller");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete the sender domain of the reseller child based on the childIdentifier and domainName passed
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param domainName Pass the existing domain that needs to be deleted
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.deleteChildDomain = function (childIdentifier, domainName, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}/domains/{domainName}'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)))
            .replace('{' + 'domainName' + '}', encodeURIComponent(String(domainName)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling deleteChildDomain.');
        }
        // verify required parameter 'domainName' is not null or undefined
        if (domainName === null || domainName === undefined) {
            throw new Error('Required parameter domainName was null or undefined when calling deleteChildDomain.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete a single reseller child based on the child identifier supplied
     * @param childIdentifier Either auth key or child id of reseller&#39;s child
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.deleteResellerChild = function (childIdentifier, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling deleteResellerChild.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Dissociate a dedicated IP to the child
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param ip IP to dissociate
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.dissociateIpFromChild = function (childIdentifier, ip, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}/ips/dissociate'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling dissociateIpFromChild.');
        }
        // verify required parameter 'ip' is not null or undefined
        if (ip === null || ip === undefined) {
            throw new Error('Required parameter ip was null or undefined when calling dissociateIpFromChild.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(ip, "ManageIp")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get the status of a reseller's child account creation, whether it is successfully created (exists) or not based on the identifier supplied
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.getChildAccountCreationStatus = function (childIdentifier, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}/accountCreationStatus'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling getChildAccountCreationStatus.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetChildAccountCreationStatus");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get all sender domains for a specific child account
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.getChildDomains = function (childIdentifier, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}/domains'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling getChildDomains.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetChildDomains");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get a child account's details
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.getChildInfo = function (childIdentifier, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling getChildInfo.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetChildInfo");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get the list of all children accounts
     * @param limit Number of documents for child accounts information per page
     * @param offset Index of the first document in the page
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.getResellerChilds = function (limit, offset, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetChildrenList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * It returns a session [token] which will remain valid for a short period of time. A child account will be able to access a white-labeled section by using the following url pattern => https:/email.mydomain.com/login/sso?token=[token]
     * @summary Get session token to access Sendinblue (SSO)
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.getSsoToken = function (childIdentifier, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}/auth'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling getSsoToken.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetSsoToken");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Remove Email and/or SMS credits from a specific child account
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param removeCredits Values to post to remove email or SMS credits from a specific child account
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.removeCredits = function (childIdentifier, removeCredits, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}/credits/remove'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling removeCredits.');
        }
        // verify required parameter 'removeCredits' is not null or undefined
        if (removeCredits === null || removeCredits === undefined) {
            throw new Error('Required parameter removeCredits was null or undefined when calling removeCredits.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(removeCredits, "RemoveCredits")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "RemainingCreditModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update info of reseller's child account status based on the childIdentifier supplied
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param updateChildAccountStatus values to update in child account status
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.updateChildAccountStatus = function (childIdentifier, updateChildAccountStatus, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}/accountStatus'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling updateChildAccountStatus.');
        }
        // verify required parameter 'updateChildAccountStatus' is not null or undefined
        if (updateChildAccountStatus === null || updateChildAccountStatus === undefined) {
            throw new Error('Required parameter updateChildAccountStatus was null or undefined when calling updateChildAccountStatus.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateChildAccountStatus, "UpdateChildAccountStatus")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update the sender domain of reseller's child based on the childIdentifier and domainName passed
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param domainName Pass the existing domain that needs to be updated
     * @param updateChildDomain value to update for sender domain
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.updateChildDomain = function (childIdentifier, domainName, updateChildDomain, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}/domains/{domainName}'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)))
            .replace('{' + 'domainName' + '}', encodeURIComponent(String(domainName)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling updateChildDomain.');
        }
        // verify required parameter 'domainName' is not null or undefined
        if (domainName === null || domainName === undefined) {
            throw new Error('Required parameter domainName was null or undefined when calling updateChildDomain.');
        }
        // verify required parameter 'updateChildDomain' is not null or undefined
        if (updateChildDomain === null || updateChildDomain === undefined) {
            throw new Error('Required parameter updateChildDomain was null or undefined when calling updateChildDomain.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateChildDomain, "UpdateChildDomain")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update info of reseller's child based on the child identifier supplied
     * @param childIdentifier Either auth key or id of reseller&#39;s child
     * @param resellerChild values to update in child profile
     * @param {*} [options] Override http request options.
     */
    ResellerApi.prototype.updateResellerChild = function (childIdentifier, resellerChild, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/reseller/children/{childIdentifier}'
            .replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'childIdentifier' is not null or undefined
        if (childIdentifier === null || childIdentifier === undefined) {
            throw new Error('Required parameter childIdentifier was null or undefined when calling updateResellerChild.');
        }
        // verify required parameter 'resellerChild' is not null or undefined
        if (resellerChild === null || resellerChild === undefined) {
            throw new Error('Required parameter resellerChild was null or undefined when calling updateResellerChild.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(resellerChild, "UpdateChild")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return ResellerApi;
}());
exports.ResellerApi = ResellerApi;
var SMSCampaignsApiApiKeys;
(function (SMSCampaignsApiApiKeys) {
    SMSCampaignsApiApiKeys[SMSCampaignsApiApiKeys["apiKey"] = 0] = "apiKey";
    SMSCampaignsApiApiKeys[SMSCampaignsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(SMSCampaignsApiApiKeys = exports.SMSCampaignsApiApiKeys || (exports.SMSCampaignsApiApiKeys = {}));
var SMSCampaignsApi = /** @class */ (function () {
    function SMSCampaignsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SMSCampaignsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SMSCampaignsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    SMSCampaignsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    SMSCampaignsApi.prototype.setApiKey = function (key, value) {
        this.authentications[SMSCampaignsApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Creates an SMS campaign
     * @param createSmsCampaign Values to create an SMS Campaign
     * @param {*} [options] Override http request options.
     */
    SMSCampaignsApi.prototype.createSmsCampaign = function (createSmsCampaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smsCampaigns';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'createSmsCampaign' is not null or undefined
        if (createSmsCampaign === null || createSmsCampaign === undefined) {
            throw new Error('Required parameter createSmsCampaign was null or undefined when calling createSmsCampaign.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createSmsCampaign, "CreateSmsCampaign")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete an SMS campaign
     * @param campaignId id of the SMS campaign
     * @param {*} [options] Override http request options.
     */
    SMSCampaignsApi.prototype.deleteSmsCampaign = function (campaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smsCampaigns/{campaignId}'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling deleteSmsCampaign.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get an SMS campaign
     * @param campaignId id of the SMS campaign
     * @param {*} [options] Override http request options.
     */
    SMSCampaignsApi.prototype.getSmsCampaign = function (campaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smsCampaigns/{campaignId}'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling getSmsCampaign.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetSmsCampaign");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Returns the information for all your created SMS campaigns
     * @param status Status of campaign.
     * @param startDate Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )
     * @param endDate Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either &#39;status&#39; not passed and if passed is set to &#39;sent&#39; )
     * @param limit Number limitation for the result returned
     * @param offset Beginning point in the list to retrieve from.
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    SMSCampaignsApi.prototype.getSmsCampaigns = function (status, startDate, endDate, limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smsCampaigns';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "'suspended' | 'archive' | 'sent' | 'queued' | 'draft' | 'inProcess'");
        }
        if (startDate !== undefined) {
            localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, "string");
        }
        if (endDate !== undefined) {
            localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, "string");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetSmsCampaigns");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * It returns the background process ID which on completion calls the notify URL that you have set in the input.
     * @summary Export an SMS campaign's recipients
     * @param campaignId id of the campaign
     * @param recipientExport Values to send for a recipient export request
     * @param {*} [options] Override http request options.
     */
    SMSCampaignsApi.prototype.requestSmsRecipientExport = function (campaignId, recipientExport, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smsCampaigns/{campaignId}/exportRecipients'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling requestSmsRecipientExport.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(recipientExport, "RequestSmsRecipientExport")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreatedProcessId");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Send your SMS campaign immediately
     * @param campaignId id of the campaign
     * @param {*} [options] Override http request options.
     */
    SMSCampaignsApi.prototype.sendSmsCampaignNow = function (campaignId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smsCampaigns/{campaignId}/sendNow'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling sendSmsCampaignNow.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.
     * @summary Send an SMS campaign's report
     * @param campaignId id of the campaign
     * @param sendReport Values for send a report
     * @param {*} [options] Override http request options.
     */
    SMSCampaignsApi.prototype.sendSmsReport = function (campaignId, sendReport, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smsCampaigns/{campaignId}/sendReport'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling sendSmsReport.');
        }
        // verify required parameter 'sendReport' is not null or undefined
        if (sendReport === null || sendReport === undefined) {
            throw new Error('Required parameter sendReport was null or undefined when calling sendSmsReport.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sendReport, "SendReport")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Send a test SMS campaign
     * @param campaignId Id of the SMS campaign
     * @param phoneNumber Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted
     * @param {*} [options] Override http request options.
     */
    SMSCampaignsApi.prototype.sendTestSms = function (campaignId, phoneNumber, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smsCampaigns/{campaignId}/sendTest'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling sendTestSms.');
        }
        // verify required parameter 'phoneNumber' is not null or undefined
        if (phoneNumber === null || phoneNumber === undefined) {
            throw new Error('Required parameter phoneNumber was null or undefined when calling sendTestSms.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(phoneNumber, "SendTestSms")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update an SMS campaign
     * @param campaignId id of the SMS campaign
     * @param updateSmsCampaign Values to update an SMS Campaign
     * @param {*} [options] Override http request options.
     */
    SMSCampaignsApi.prototype.updateSmsCampaign = function (campaignId, updateSmsCampaign, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smsCampaigns/{campaignId}'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling updateSmsCampaign.');
        }
        // verify required parameter 'updateSmsCampaign' is not null or undefined
        if (updateSmsCampaign === null || updateSmsCampaign === undefined) {
            throw new Error('Required parameter updateSmsCampaign was null or undefined when calling updateSmsCampaign.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateSmsCampaign, "UpdateSmsCampaign")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update a campaign's status
     * @param campaignId id of the campaign
     * @param status Status of the campaign.
     * @param {*} [options] Override http request options.
     */
    SMSCampaignsApi.prototype.updateSmsCampaignStatus = function (campaignId, status, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smsCampaigns/{campaignId}/status'
            .replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'campaignId' is not null or undefined
        if (campaignId === null || campaignId === undefined) {
            throw new Error('Required parameter campaignId was null or undefined when calling updateSmsCampaignStatus.');
        }
        // verify required parameter 'status' is not null or undefined
        if (status === null || status === undefined) {
            throw new Error('Required parameter status was null or undefined when calling updateSmsCampaignStatus.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(status, "UpdateCampaignStatus")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return SMSCampaignsApi;
}());
exports.SMSCampaignsApi = SMSCampaignsApi;
var SendersApiApiKeys;
(function (SendersApiApiKeys) {
    SendersApiApiKeys[SendersApiApiKeys["apiKey"] = 0] = "apiKey";
    SendersApiApiKeys[SendersApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(SendersApiApiKeys = exports.SendersApiApiKeys || (exports.SendersApiApiKeys = {}));
var SendersApi = /** @class */ (function () {
    function SendersApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(SendersApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SendersApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    SendersApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    SendersApi.prototype.setApiKey = function (key, value) {
        this.authentications[SendersApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Create a new sender
     * @param sender sender&#39;s name
     * @param {*} [options] Override http request options.
     */
    SendersApi.prototype.createSender = function (sender, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/senders';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sender, "CreateSender")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateSenderModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete a sender
     * @param senderId Id of the sender
     * @param {*} [options] Override http request options.
     */
    SendersApi.prototype.deleteSender = function (senderId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/senders/{senderId}'
            .replace('{' + 'senderId' + '}', encodeURIComponent(String(senderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'senderId' is not null or undefined
        if (senderId === null || senderId === undefined) {
            throw new Error('Required parameter senderId was null or undefined when calling deleteSender.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get all the dedicated IPs for your account
     * @param {*} [options] Override http request options.
     */
    SendersApi.prototype.getIps = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/senders/ips';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetIps");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get all the dedicated IPs for a sender
     * @param senderId Id of the sender
     * @param {*} [options] Override http request options.
     */
    SendersApi.prototype.getIpsFromSender = function (senderId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/senders/{senderId}/ips'
            .replace('{' + 'senderId' + '}', encodeURIComponent(String(senderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'senderId' is not null or undefined
        if (senderId === null || senderId === undefined) {
            throw new Error('Required parameter senderId was null or undefined when calling getIpsFromSender.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetIpsFromSender");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get the list of all your senders
     * @param ip Filter your senders for a specific ip (available for dedicated IP usage only)
     * @param domain Filter your senders for a specific domain
     * @param {*} [options] Override http request options.
     */
    SendersApi.prototype.getSenders = function (ip, domain, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/senders';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (ip !== undefined) {
            localVarQueryParameters['ip'] = ObjectSerializer.serialize(ip, "string");
        }
        if (domain !== undefined) {
            localVarQueryParameters['domain'] = ObjectSerializer.serialize(domain, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetSendersList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update a sender
     * @param senderId Id of the sender
     * @param sender sender&#39;s name
     * @param {*} [options] Override http request options.
     */
    SendersApi.prototype.updateSender = function (senderId, sender, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/senders/{senderId}'
            .replace('{' + 'senderId' + '}', encodeURIComponent(String(senderId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'senderId' is not null or undefined
        if (senderId === null || senderId === undefined) {
            throw new Error('Required parameter senderId was null or undefined when calling updateSender.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sender, "UpdateSender")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return SendersApi;
}());
exports.SendersApi = SendersApi;
var TransactionalEmailsApiApiKeys;
(function (TransactionalEmailsApiApiKeys) {
    TransactionalEmailsApiApiKeys[TransactionalEmailsApiApiKeys["apiKey"] = 0] = "apiKey";
    TransactionalEmailsApiApiKeys[TransactionalEmailsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(TransactionalEmailsApiApiKeys = exports.TransactionalEmailsApiApiKeys || (exports.TransactionalEmailsApiApiKeys = {}));
var TransactionalEmailsApi = /** @class */ (function () {
    function TransactionalEmailsApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(TransactionalEmailsApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionalEmailsApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    TransactionalEmailsApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    TransactionalEmailsApi.prototype.setApiKey = function (key, value) {
        this.authentications[TransactionalEmailsApiApiKeys[key]].apiKey = value;
    };
    /**
     * Blocks a new domain in order to avoid messages being sent to the same
     * @summary Add a new domain to the list of blocked domains
     * @param blockDomain
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.blockNewDomain = function (blockDomain, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/blockedDomains';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'blockDomain' is not null or undefined
        if (blockDomain === null || blockDomain === undefined) {
            throw new Error('Required parameter blockDomain was null or undefined when calling blockNewDomain.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(blockDomain, "BlockDomain")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Create an email template
     * @param smtpTemplate values to update in transactional email template
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.createSmtpTemplate = function (smtpTemplate, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/templates';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'smtpTemplate' is not null or undefined
        if (smtpTemplate === null || smtpTemplate === undefined) {
            throw new Error('Required parameter smtpTemplate was null or undefined when calling createSmtpTemplate.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(smtpTemplate, "CreateSmtpTemplate")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Unblocks an existing domain from the list of blocked domains
     * @summary Unblock an existing domain from the list of blocked domains
     * @param domain The name of the domain to be deleted
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.deleteBlockedDomain = function (domain, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/blockedDomains/{domain}'
            .replace('{' + 'domain' + '}', encodeURIComponent(String(domain)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'domain' is not null or undefined
        if (domain === null || domain === undefined) {
            throw new Error('Required parameter domain was null or undefined when calling deleteBlockedDomain.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Delete hardbounces. To use carefully (e.g. in case of temporary ISP failures)
     * @summary Delete hardbounces
     * @param deleteHardbounces values to delete hardbounces
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.deleteHardbounces = function (deleteHardbounces, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/deleteHardbounces';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deleteHardbounces, "DeleteHardbounces")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete an inactive email template
     * @param templateId id of the template
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.deleteSmtpTemplate = function (templateId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/templates/{templateId}'
            .replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'templateId' is not null or undefined
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling deleteSmtpTemplate.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get your transactional email activity aggregated over a period of time
     * @param startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
     * @param endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
     * @param days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
     * @param tag Tag of the emails
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.getAggregatedSmtpReport = function (startDate, endDate, days, tag, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/statistics/aggregatedReport';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (startDate !== undefined) {
            localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, "string");
        }
        if (endDate !== undefined) {
            localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, "string");
        }
        if (days !== undefined) {
            localVarQueryParameters['days'] = ObjectSerializer.serialize(days, "number");
        }
        if (tag !== undefined) {
            localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetAggregatedReport");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * Get the list of blocked domains
     * @summary Get the list of blocked domains
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.getBlockedDomains = function (options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/blockedDomains';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetBlockedDomains");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get all your transactional email activity (unaggregated events)
     * @param limit Number limitation for the result returned
     * @param offset Beginning point in the list to retrieve from.
     * @param startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate
     * @param endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate
     * @param days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
     * @param email Filter the report for a specific email addresses
     * @param event Filter the report for a specific event type
     * @param tags Filter the report for tags (serialized and urlencoded array)
     * @param messageId Filter on a specific message id
     * @param templateId Filter on a specific template id
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.getEmailEventReport = function (limit, offset, startDate, endDate, days, email, event, tags, messageId, templateId, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/statistics/events';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (startDate !== undefined) {
            localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, "string");
        }
        if (endDate !== undefined) {
            localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, "string");
        }
        if (days !== undefined) {
            localVarQueryParameters['days'] = ObjectSerializer.serialize(days, "number");
        }
        if (email !== undefined) {
            localVarQueryParameters['email'] = ObjectSerializer.serialize(email, "string");
        }
        if (event !== undefined) {
            localVarQueryParameters['event'] = ObjectSerializer.serialize(event, "'bounces' | 'hardBounces' | 'softBounces' | 'delivered' | 'spam' | 'requests' | 'opened' | 'clicks' | 'invalid' | 'deferred' | 'blocked' | 'unsubscribed' | 'error'");
        }
        if (tags !== undefined) {
            localVarQueryParameters['tags'] = ObjectSerializer.serialize(tags, "string");
        }
        if (messageId !== undefined) {
            localVarQueryParameters['messageId'] = ObjectSerializer.serialize(messageId, "string");
        }
        if (templateId !== undefined) {
            localVarQueryParameters['templateId'] = ObjectSerializer.serialize(templateId, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetEmailEventReport");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get your transactional email activity aggregated per day
     * @param limit Number of documents returned per page
     * @param offset Index of the first document on the page
     * @param startDate Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD)
     * @param endDate Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD)
     * @param days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
     * @param tag Tag of the emails
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.getSmtpReport = function (limit, offset, startDate, endDate, days, tag, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/statistics/reports';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (startDate !== undefined) {
            localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, "string");
        }
        if (endDate !== undefined) {
            localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, "string");
        }
        if (days !== undefined) {
            localVarQueryParameters['days'] = ObjectSerializer.serialize(days, "number");
        }
        if (tag !== undefined) {
            localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, "string");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetReports");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Returns the template information
     * @param templateId id of the template
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.getSmtpTemplate = function (templateId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/templates/{templateId}'
            .replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'templateId' is not null or undefined
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling getSmtpTemplate.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetSmtpTemplateOverview");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get the list of email templates
     * @param templateStatus Filter on the status of the template. Active &#x3D; true, inactive &#x3D; false
     * @param limit Number of documents returned per page
     * @param offset Index of the first document in the page
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.getSmtpTemplates = function (templateStatus, limit, offset, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/templates';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (templateStatus !== undefined) {
            localVarQueryParameters['templateStatus'] = ObjectSerializer.serialize(templateStatus, "boolean");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetSmtpTemplates");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get the list of blocked or unsubscribed transactional contacts
     * @param startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts
     * @param endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts
     * @param limit Number of documents returned per page
     * @param offset Index of the first document on the page
     * @param senders Comma separated list of emails of the senders from which contacts are blocked or unsubscribed
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.getTransacBlockedContacts = function (startDate, endDate, limit, offset, senders, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/blockedContacts';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (startDate !== undefined) {
            localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, "string");
        }
        if (endDate !== undefined) {
            localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, "string");
        }
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (senders !== undefined) {
            localVarQueryParameters['senders'] = ObjectSerializer.serialize(senders, "Array<string>");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetTransacBlockedContacts");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get the personalized content of a sent transactional email
     * @param uuid Unique id of the transactional email that has been sent to a particular contact
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.getTransacEmailContent = function (uuid, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/emails/{uuid}'
            .replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'uuid' is not null or undefined
        if (uuid === null || uuid === undefined) {
            throw new Error('Required parameter uuid was null or undefined when calling getTransacEmailContent.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetTransacEmailContent");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * This endpoint will show the list of emails for past 30 days by default. To retrieve emails before that time, please pass startDate and endDate in query filters.
     * @summary Get the list of transactional emails on the basis of allowed filters
     * @param email Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent.
     * @param templateId Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email.
     * @param messageId Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent.
     * @param startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month.
     * @param endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month.
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.getTransacEmailsList = function (email, templateId, messageId, startDate, endDate, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/emails';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (email !== undefined) {
            localVarQueryParameters['email'] = ObjectSerializer.serialize(email, "string");
        }
        if (templateId !== undefined) {
            localVarQueryParameters['templateId'] = ObjectSerializer.serialize(templateId, "number");
        }
        if (messageId !== undefined) {
            localVarQueryParameters['messageId'] = ObjectSerializer.serialize(messageId, "string");
        }
        if (startDate !== undefined) {
            localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, "string");
        }
        if (endDate !== undefined) {
            localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, "string");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetTransacEmailsList");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     * This endpoint is deprecated. Prefer v3/smtp/email instead.
     * @summary Send a template
     * @param templateId Id of the template
     * @param sendEmail
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.sendTemplate = function (templateId, sendEmail, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/templates/{templateId}/send'
            .replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'templateId' is not null or undefined
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling sendTemplate.');
        }
        // verify required parameter 'sendEmail' is not null or undefined
        if (sendEmail === null || sendEmail === undefined) {
            throw new Error('Required parameter sendEmail was null or undefined when calling sendTemplate.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sendEmail, "SendEmail")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SendTemplateEmail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Send a template to your test list
     * @param templateId Id of the template
     * @param sendTestEmail
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.sendTestTemplate = function (templateId, sendTestEmail, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/templates/{templateId}/sendTest'
            .replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'templateId' is not null or undefined
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling sendTestTemplate.');
        }
        // verify required parameter 'sendTestEmail' is not null or undefined
        if (sendTestEmail === null || sendTestEmail === undefined) {
            throw new Error('Required parameter sendTestEmail was null or undefined when calling sendTestTemplate.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sendTestEmail, "SendTestEmail")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Send a transactional email
     * @param sendSmtpEmail Values to send a transactional email
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.sendTransacEmail = function (sendSmtpEmail, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/email';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'sendSmtpEmail' is not null or undefined
        if (sendSmtpEmail === null || sendSmtpEmail === undefined) {
            throw new Error('Required parameter sendSmtpEmail was null or undefined when calling sendTransacEmail.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sendSmtpEmail, "SendSmtpEmail")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateSmtpEmail");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Unblock or resubscribe a transactional contact
     * @param email contact email (urlencoded) to unblock.
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.smtpBlockedContactsEmailDelete = function (email, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/blockedContacts/{email}'
            .replace('{' + 'email' + '}', encodeURIComponent(String(email)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling smtpBlockedContactsEmailDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete an SMTP transactional log
     * @param messageId MessageId of the transactional log to delete
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.smtpLogMessageIdDelete = function (messageId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/log/{messageId}'
            .replace('{' + 'messageId' + '}', encodeURIComponent(String(messageId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'messageId' is not null or undefined
        if (messageId === null || messageId === undefined) {
            throw new Error('Required parameter messageId was null or undefined when calling smtpLogMessageIdDelete.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update an email template
     * @param templateId id of the template
     * @param smtpTemplate values to update in transactional email template
     * @param {*} [options] Override http request options.
     */
    TransactionalEmailsApi.prototype.updateSmtpTemplate = function (templateId, smtpTemplate, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/smtp/templates/{templateId}'
            .replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'templateId' is not null or undefined
        if (templateId === null || templateId === undefined) {
            throw new Error('Required parameter templateId was null or undefined when calling updateSmtpTemplate.');
        }
        // verify required parameter 'smtpTemplate' is not null or undefined
        if (smtpTemplate === null || smtpTemplate === undefined) {
            throw new Error('Required parameter smtpTemplate was null or undefined when calling updateSmtpTemplate.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(smtpTemplate, "UpdateSmtpTemplate")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return TransactionalEmailsApi;
}());
exports.TransactionalEmailsApi = TransactionalEmailsApi;
var TransactionalSMSApiApiKeys;
(function (TransactionalSMSApiApiKeys) {
    TransactionalSMSApiApiKeys[TransactionalSMSApiApiKeys["apiKey"] = 0] = "apiKey";
    TransactionalSMSApiApiKeys[TransactionalSMSApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(TransactionalSMSApiApiKeys = exports.TransactionalSMSApiApiKeys || (exports.TransactionalSMSApiApiKeys = {}));
var TransactionalSMSApi = /** @class */ (function () {
    function TransactionalSMSApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(TransactionalSMSApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TransactionalSMSApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    TransactionalSMSApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    TransactionalSMSApi.prototype.setApiKey = function (key, value) {
        this.authentications[TransactionalSMSApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Get all your SMS activity (unaggregated events)
     * @param limit Number of documents per page
     * @param startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
     * @param endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
     * @param offset Index of the first document of the page
     * @param days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
     * @param phoneNumber Filter the report for a specific phone number
     * @param event Filter the report for specific events
     * @param tags Filter the report for specific tags passed as a serialized urlencoded array
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    TransactionalSMSApi.prototype.getSmsEvents = function (limit, startDate, endDate, offset, days, phoneNumber, event, tags, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/transactionalSMS/statistics/events';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }
        if (startDate !== undefined) {
            localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, "string");
        }
        if (endDate !== undefined) {
            localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, "string");
        }
        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }
        if (days !== undefined) {
            localVarQueryParameters['days'] = ObjectSerializer.serialize(days, "number");
        }
        if (phoneNumber !== undefined) {
            localVarQueryParameters['phoneNumber'] = ObjectSerializer.serialize(phoneNumber, "string");
        }
        if (event !== undefined) {
            localVarQueryParameters['event'] = ObjectSerializer.serialize(event, "'bounces' | 'hardBounces' | 'softBounces' | 'delivered' | 'sent' | 'accepted' | 'unsubscription' | 'replies' | 'blocked'");
        }
        if (tags !== undefined) {
            localVarQueryParameters['tags'] = ObjectSerializer.serialize(tags, "string");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetSmsEventReport");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get your SMS activity aggregated over a period of time
     * @param startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
     * @param endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
     * @param days Number of days in the past including today (positive integer). Not compatible with startDate and endDate
     * @param tag Filter on a tag
     * @param {*} [options] Override http request options.
     */
    TransactionalSMSApi.prototype.getTransacAggregatedSmsReport = function (startDate, endDate, days, tag, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/transactionalSMS/statistics/aggregatedReport';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (startDate !== undefined) {
            localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, "string");
        }
        if (endDate !== undefined) {
            localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, "string");
        }
        if (days !== undefined) {
            localVarQueryParameters['days'] = ObjectSerializer.serialize(days, "number");
        }
        if (tag !== undefined) {
            localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, "string");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetTransacAggregatedSmsReport");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get your SMS activity aggregated per day
     * @param startDate Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report
     * @param endDate Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report
     * @param days Number of days in the past including today (positive integer). Not compatible with &#39;startDate&#39; and &#39;endDate&#39;
     * @param tag Filter on a tag
     * @param sort Sort the results in the ascending/descending order of record creation. Default order is **descending** if &#x60;sort&#x60; is not passed
     * @param {*} [options] Override http request options.
     */
    TransactionalSMSApi.prototype.getTransacSmsReport = function (startDate, endDate, days, tag, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/transactionalSMS/statistics/reports';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (startDate !== undefined) {
            localVarQueryParameters['startDate'] = ObjectSerializer.serialize(startDate, "string");
        }
        if (endDate !== undefined) {
            localVarQueryParameters['endDate'] = ObjectSerializer.serialize(endDate, "string");
        }
        if (days !== undefined) {
            localVarQueryParameters['days'] = ObjectSerializer.serialize(days, "number");
        }
        if (tag !== undefined) {
            localVarQueryParameters['tag'] = ObjectSerializer.serialize(tag, "string");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetTransacSmsReport");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Send SMS message to a mobile number
     * @param sendTransacSms Values to send a transactional SMS
     * @param {*} [options] Override http request options.
     */
    TransactionalSMSApi.prototype.sendTransacSms = function (sendTransacSms, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/transactionalSMS/sms';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'sendTransacSms' is not null or undefined
        if (sendTransacSms === null || sendTransacSms === undefined) {
            throw new Error('Required parameter sendTransacSms was null or undefined when calling sendTransacSms.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sendTransacSms, "SendTransacSms")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "SendSms");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return TransactionalSMSApi;
}());
exports.TransactionalSMSApi = TransactionalSMSApi;
var WebhooksApiApiKeys;
(function (WebhooksApiApiKeys) {
    WebhooksApiApiKeys[WebhooksApiApiKeys["apiKey"] = 0] = "apiKey";
    WebhooksApiApiKeys[WebhooksApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(WebhooksApiApiKeys = exports.WebhooksApiApiKeys || (exports.WebhooksApiApiKeys = {}));
var WebhooksApi = /** @class */ (function () {
    function WebhooksApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new VoidAuth(),
            'apiKey': new ApiKeyAuth('header', 'api-key'),
            'partnerKey': new ApiKeyAuth('header', 'partner-key'),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(WebhooksApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WebhooksApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: false,
        configurable: true
    });
    WebhooksApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    WebhooksApi.prototype.setApiKey = function (key, value) {
        this.authentications[WebhooksApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Create a webhook
     * @param createWebhook Values to create a webhook
     * @param {*} [options] Override http request options.
     */
    WebhooksApi.prototype.createWebhook = function (createWebhook, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhooks';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'createWebhook' is not null or undefined
        if (createWebhook === null || createWebhook === undefined) {
            throw new Error('Required parameter createWebhook was null or undefined when calling createWebhook.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createWebhook, "CreateWebhook")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "CreateModel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete a webhook
     * @param webhookId Id of the webhook
     * @param {*} [options] Override http request options.
     */
    WebhooksApi.prototype.deleteWebhook = function (webhookId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhooks/{webhookId}'
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'webhookId' is not null or undefined
        if (webhookId === null || webhookId === undefined) {
            throw new Error('Required parameter webhookId was null or undefined when calling deleteWebhook.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get a webhook details
     * @param webhookId Id of the webhook
     * @param {*} [options] Override http request options.
     */
    WebhooksApi.prototype.getWebhook = function (webhookId, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhooks/{webhookId}'
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'webhookId' is not null or undefined
        if (webhookId === null || webhookId === undefined) {
            throw new Error('Required parameter webhookId was null or undefined when calling getWebhook.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetWebhook");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get all webhooks
     * @param type Filter on webhook type
     * @param sort Sort the results in the ascending/descending order of webhook creation
     * @param {*} [options] Override http request options.
     */
    WebhooksApi.prototype.getWebhooks = function (type, sort, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhooks';
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        if (type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(type, "'marketing' | 'transactional'");
        }
        if (sort !== undefined) {
            localVarQueryParameters['sort'] = ObjectSerializer.serialize(sort, "'asc' | 'desc'");
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = ObjectSerializer.deserialize(body, "GetWebhooks");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update a webhook
     * @param webhookId Id of the webhook
     * @param updateWebhook Values to update a webhook
     * @param {*} [options] Override http request options.
     */
    WebhooksApi.prototype.updateWebhook = function (webhookId, updateWebhook, options) {
        if (options === void 0) { options = {}; }
        var localVarPath = this.basePath + '/webhooks/{webhookId}'
            .replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'webhookId' is not null or undefined
        if (webhookId === null || webhookId === undefined) {
            throw new Error('Required parameter webhookId was null or undefined when calling updateWebhook.');
        }
        // verify required parameter 'updateWebhook' is not null or undefined
        if (updateWebhook === null || updateWebhook === undefined) {
            throw new Error('Required parameter updateWebhook was null or undefined when calling updateWebhook.');
        }
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateWebhook, "UpdateWebhook")
        };
        this.authentications.apiKey.applyToRequest(localVarRequestOptions);
        this.authentications.partnerKey.applyToRequest(localVarRequestOptions);
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return WebhooksApi;
}());
exports.WebhooksApi = WebhooksApi;
